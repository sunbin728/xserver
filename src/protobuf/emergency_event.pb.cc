// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: emergency_event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "emergency_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
namespace Pw {
class DoorBellRingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DoorBellRing> {
} _DoorBellRing_default_instance_;
class BirdVoiceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BirdVoice> {
} _BirdVoice_default_instance_;
class BirdVisitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BirdVisit> {
} _BirdVisit_default_instance_;
class BirdLeaveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BirdLeave> {
} _BirdLeave_default_instance_;
class EventDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EventData> {
} _EventData_default_instance_;
class EmergencyEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmergencyEvent> {
} _EmergencyEvent_default_instance_;

namespace protobuf_emergency_5fevent_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoorBellRing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdVoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdVisit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdVisit, taking_seed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdLeave, leave_feather_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventData, door_beel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventData, bird_voice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventData, bird_visit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventData, bird_leave_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyEvent, data_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(DoorBellRing)},
  { 5, -1, sizeof(BirdVoice)},
  { 10, -1, sizeof(BirdVisit)},
  { 16, -1, sizeof(BirdLeave)},
  { 22, -1, sizeof(EventData)},
  { 31, -1, sizeof(EmergencyEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DoorBellRing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BirdVoice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BirdVisit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BirdLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EventData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmergencyEvent_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "emergency_event.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _DoorBellRing_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BirdVoice_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _BirdVisit_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _BirdLeave_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _EventData_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _EmergencyEvent_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DoorBellRing_default_instance_.DefaultConstruct();
  _BirdVoice_default_instance_.DefaultConstruct();
  _BirdVisit_default_instance_.DefaultConstruct();
  _BirdLeave_default_instance_.DefaultConstruct();
  _EventData_default_instance_.DefaultConstruct();
  _EmergencyEvent_default_instance_.DefaultConstruct();
  _EventData_default_instance_.get_mutable()->door_beel_ = const_cast< ::NetProto::Pw::DoorBellRing*>(
      ::NetProto::Pw::DoorBellRing::internal_default_instance());
  _EventData_default_instance_.get_mutable()->bird_voice_ = const_cast< ::NetProto::Pw::BirdVoice*>(
      ::NetProto::Pw::BirdVoice::internal_default_instance());
  _EventData_default_instance_.get_mutable()->bird_visit_ = const_cast< ::NetProto::Pw::BirdVisit*>(
      ::NetProto::Pw::BirdVisit::internal_default_instance());
  _EventData_default_instance_.get_mutable()->bird_leave_ = const_cast< ::NetProto::Pw::BirdLeave*>(
      ::NetProto::Pw::BirdLeave::internal_default_instance());
  _EmergencyEvent_default_instance_.get_mutable()->data_ = const_cast< ::NetProto::Pw::EventData*>(
      ::NetProto::Pw::EventData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025emergency_event.proto\022\013NetProto.Pw\"\016\n\014"
      "DoorBellRing\"\013\n\tBirdVoice\" \n\tBirdVisit\022\023"
      "\n\013taking_seed\030\001 \001(\010\"\"\n\tBirdLeave\022\025\n\rleav"
      "e_feather\030\001 \001(\010\"\275\001\n\tEventData\022,\n\tdoor_be"
      "el\030\001 \001(\0132\031.NetProto.Pw.DoorBellRing\022*\n\nb"
      "ird_voice\030\002 \001(\0132\026.NetProto.Pw.BirdVoice\022"
      "*\n\nbird_visit\030\003 \001(\0132\026.NetProto.Pw.BirdVi"
      "sit\022*\n\nbird_leave\030\004 \001(\0132\026.NetProto.Pw.Bi"
      "rdLeave\"\\\n\016EmergencyEvent\022$\n\004type\030\001 \001(\0162"
      "\026.NetProto.Pw.EventType\022$\n\004data\030\002 \001(\0132\026."
      "NetProto.Pw.EventData*\\\n\tEventType\022\013\n\007Un"
      "known\020\000\022\022\n\016DOOR_BELL_RING\020\001\022\016\n\nBIRD_VOIC"
      "E\020\002\022\016\n\nBIRD_VISIT\020\003\022\016\n\nBIRD_LEAVE\020\004b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 523);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "emergency_event.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_emergency_5fevent_2eproto

const ::google::protobuf::EnumDescriptor* EventType_descriptor() {
  protobuf_emergency_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emergency_5fevent_2eproto::file_level_enum_descriptors[0];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoorBellRing::DoorBellRing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_emergency_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Pw.DoorBellRing)
}
DoorBellRing::DoorBellRing(const DoorBellRing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetProto.Pw.DoorBellRing)
}

void DoorBellRing::SharedCtor() {
  _cached_size_ = 0;
}

DoorBellRing::~DoorBellRing() {
  // @@protoc_insertion_point(destructor:NetProto.Pw.DoorBellRing)
  SharedDtor();
}

void DoorBellRing::SharedDtor() {
}

void DoorBellRing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoorBellRing::descriptor() {
  protobuf_emergency_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emergency_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DoorBellRing& DoorBellRing::default_instance() {
  protobuf_emergency_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

DoorBellRing* DoorBellRing::New(::google::protobuf::Arena* arena) const {
  DoorBellRing* n = new DoorBellRing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoorBellRing::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Pw.DoorBellRing)
}

bool DoorBellRing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Pw.DoorBellRing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Pw.DoorBellRing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Pw.DoorBellRing)
  return false;
#undef DO_
}

void DoorBellRing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Pw.DoorBellRing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:NetProto.Pw.DoorBellRing)
}

::google::protobuf::uint8* DoorBellRing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Pw.DoorBellRing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Pw.DoorBellRing)
  return target;
}

size_t DoorBellRing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Pw.DoorBellRing)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoorBellRing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Pw.DoorBellRing)
  GOOGLE_DCHECK_NE(&from, this);
  const DoorBellRing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DoorBellRing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Pw.DoorBellRing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Pw.DoorBellRing)
    MergeFrom(*source);
  }
}

void DoorBellRing::MergeFrom(const DoorBellRing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Pw.DoorBellRing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DoorBellRing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Pw.DoorBellRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoorBellRing::CopyFrom(const DoorBellRing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Pw.DoorBellRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoorBellRing::IsInitialized() const {
  return true;
}

void DoorBellRing::Swap(DoorBellRing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoorBellRing::InternalSwap(DoorBellRing* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoorBellRing::GetMetadata() const {
  protobuf_emergency_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emergency_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoorBellRing

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BirdVoice::BirdVoice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_emergency_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Pw.BirdVoice)
}
BirdVoice::BirdVoice(const BirdVoice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetProto.Pw.BirdVoice)
}

void BirdVoice::SharedCtor() {
  _cached_size_ = 0;
}

BirdVoice::~BirdVoice() {
  // @@protoc_insertion_point(destructor:NetProto.Pw.BirdVoice)
  SharedDtor();
}

void BirdVoice::SharedDtor() {
}

void BirdVoice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BirdVoice::descriptor() {
  protobuf_emergency_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emergency_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BirdVoice& BirdVoice::default_instance() {
  protobuf_emergency_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

BirdVoice* BirdVoice::New(::google::protobuf::Arena* arena) const {
  BirdVoice* n = new BirdVoice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BirdVoice::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Pw.BirdVoice)
}

bool BirdVoice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Pw.BirdVoice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Pw.BirdVoice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Pw.BirdVoice)
  return false;
#undef DO_
}

void BirdVoice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Pw.BirdVoice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:NetProto.Pw.BirdVoice)
}

::google::protobuf::uint8* BirdVoice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Pw.BirdVoice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Pw.BirdVoice)
  return target;
}

size_t BirdVoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Pw.BirdVoice)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BirdVoice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Pw.BirdVoice)
  GOOGLE_DCHECK_NE(&from, this);
  const BirdVoice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BirdVoice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Pw.BirdVoice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Pw.BirdVoice)
    MergeFrom(*source);
  }
}

void BirdVoice::MergeFrom(const BirdVoice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Pw.BirdVoice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BirdVoice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Pw.BirdVoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BirdVoice::CopyFrom(const BirdVoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Pw.BirdVoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BirdVoice::IsInitialized() const {
  return true;
}

void BirdVoice::Swap(BirdVoice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BirdVoice::InternalSwap(BirdVoice* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BirdVoice::GetMetadata() const {
  protobuf_emergency_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emergency_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BirdVoice

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BirdVisit::kTakingSeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BirdVisit::BirdVisit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_emergency_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Pw.BirdVisit)
}
BirdVisit::BirdVisit(const BirdVisit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taking_seed_ = from.taking_seed_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Pw.BirdVisit)
}

void BirdVisit::SharedCtor() {
  taking_seed_ = false;
  _cached_size_ = 0;
}

BirdVisit::~BirdVisit() {
  // @@protoc_insertion_point(destructor:NetProto.Pw.BirdVisit)
  SharedDtor();
}

void BirdVisit::SharedDtor() {
}

void BirdVisit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BirdVisit::descriptor() {
  protobuf_emergency_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emergency_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BirdVisit& BirdVisit::default_instance() {
  protobuf_emergency_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

BirdVisit* BirdVisit::New(::google::protobuf::Arena* arena) const {
  BirdVisit* n = new BirdVisit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BirdVisit::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Pw.BirdVisit)
  taking_seed_ = false;
}

bool BirdVisit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Pw.BirdVisit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool taking_seed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &taking_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Pw.BirdVisit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Pw.BirdVisit)
  return false;
#undef DO_
}

void BirdVisit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Pw.BirdVisit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool taking_seed = 1;
  if (this->taking_seed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->taking_seed(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Pw.BirdVisit)
}

::google::protobuf::uint8* BirdVisit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Pw.BirdVisit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool taking_seed = 1;
  if (this->taking_seed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->taking_seed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Pw.BirdVisit)
  return target;
}

size_t BirdVisit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Pw.BirdVisit)
  size_t total_size = 0;

  // bool taking_seed = 1;
  if (this->taking_seed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BirdVisit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Pw.BirdVisit)
  GOOGLE_DCHECK_NE(&from, this);
  const BirdVisit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BirdVisit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Pw.BirdVisit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Pw.BirdVisit)
    MergeFrom(*source);
  }
}

void BirdVisit::MergeFrom(const BirdVisit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Pw.BirdVisit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taking_seed() != 0) {
    set_taking_seed(from.taking_seed());
  }
}

void BirdVisit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Pw.BirdVisit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BirdVisit::CopyFrom(const BirdVisit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Pw.BirdVisit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BirdVisit::IsInitialized() const {
  return true;
}

void BirdVisit::Swap(BirdVisit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BirdVisit::InternalSwap(BirdVisit* other) {
  std::swap(taking_seed_, other->taking_seed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BirdVisit::GetMetadata() const {
  protobuf_emergency_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emergency_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BirdVisit

// bool taking_seed = 1;
void BirdVisit::clear_taking_seed() {
  taking_seed_ = false;
}
bool BirdVisit::taking_seed() const {
  // @@protoc_insertion_point(field_get:NetProto.Pw.BirdVisit.taking_seed)
  return taking_seed_;
}
void BirdVisit::set_taking_seed(bool value) {
  
  taking_seed_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Pw.BirdVisit.taking_seed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BirdLeave::kLeaveFeatherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BirdLeave::BirdLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_emergency_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Pw.BirdLeave)
}
BirdLeave::BirdLeave(const BirdLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leave_feather_ = from.leave_feather_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Pw.BirdLeave)
}

void BirdLeave::SharedCtor() {
  leave_feather_ = false;
  _cached_size_ = 0;
}

BirdLeave::~BirdLeave() {
  // @@protoc_insertion_point(destructor:NetProto.Pw.BirdLeave)
  SharedDtor();
}

void BirdLeave::SharedDtor() {
}

void BirdLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BirdLeave::descriptor() {
  protobuf_emergency_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emergency_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BirdLeave& BirdLeave::default_instance() {
  protobuf_emergency_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

BirdLeave* BirdLeave::New(::google::protobuf::Arena* arena) const {
  BirdLeave* n = new BirdLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BirdLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Pw.BirdLeave)
  leave_feather_ = false;
}

bool BirdLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Pw.BirdLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool leave_feather = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leave_feather_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Pw.BirdLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Pw.BirdLeave)
  return false;
#undef DO_
}

void BirdLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Pw.BirdLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool leave_feather = 1;
  if (this->leave_feather() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->leave_feather(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Pw.BirdLeave)
}

::google::protobuf::uint8* BirdLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Pw.BirdLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool leave_feather = 1;
  if (this->leave_feather() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->leave_feather(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Pw.BirdLeave)
  return target;
}

size_t BirdLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Pw.BirdLeave)
  size_t total_size = 0;

  // bool leave_feather = 1;
  if (this->leave_feather() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BirdLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Pw.BirdLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const BirdLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BirdLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Pw.BirdLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Pw.BirdLeave)
    MergeFrom(*source);
  }
}

void BirdLeave::MergeFrom(const BirdLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Pw.BirdLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leave_feather() != 0) {
    set_leave_feather(from.leave_feather());
  }
}

void BirdLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Pw.BirdLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BirdLeave::CopyFrom(const BirdLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Pw.BirdLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BirdLeave::IsInitialized() const {
  return true;
}

void BirdLeave::Swap(BirdLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BirdLeave::InternalSwap(BirdLeave* other) {
  std::swap(leave_feather_, other->leave_feather_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BirdLeave::GetMetadata() const {
  protobuf_emergency_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emergency_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BirdLeave

// bool leave_feather = 1;
void BirdLeave::clear_leave_feather() {
  leave_feather_ = false;
}
bool BirdLeave::leave_feather() const {
  // @@protoc_insertion_point(field_get:NetProto.Pw.BirdLeave.leave_feather)
  return leave_feather_;
}
void BirdLeave::set_leave_feather(bool value) {
  
  leave_feather_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Pw.BirdLeave.leave_feather)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventData::kDoorBeelFieldNumber;
const int EventData::kBirdVoiceFieldNumber;
const int EventData::kBirdVisitFieldNumber;
const int EventData::kBirdLeaveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventData::EventData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_emergency_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Pw.EventData)
}
EventData::EventData(const EventData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_door_beel()) {
    door_beel_ = new ::NetProto::Pw::DoorBellRing(*from.door_beel_);
  } else {
    door_beel_ = NULL;
  }
  if (from.has_bird_voice()) {
    bird_voice_ = new ::NetProto::Pw::BirdVoice(*from.bird_voice_);
  } else {
    bird_voice_ = NULL;
  }
  if (from.has_bird_visit()) {
    bird_visit_ = new ::NetProto::Pw::BirdVisit(*from.bird_visit_);
  } else {
    bird_visit_ = NULL;
  }
  if (from.has_bird_leave()) {
    bird_leave_ = new ::NetProto::Pw::BirdLeave(*from.bird_leave_);
  } else {
    bird_leave_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NetProto.Pw.EventData)
}

void EventData::SharedCtor() {
  ::memset(&door_beel_, 0, reinterpret_cast<char*>(&bird_leave_) -
    reinterpret_cast<char*>(&door_beel_) + sizeof(bird_leave_));
  _cached_size_ = 0;
}

EventData::~EventData() {
  // @@protoc_insertion_point(destructor:NetProto.Pw.EventData)
  SharedDtor();
}

void EventData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete door_beel_;
  }
  if (this != internal_default_instance()) {
    delete bird_voice_;
  }
  if (this != internal_default_instance()) {
    delete bird_visit_;
  }
  if (this != internal_default_instance()) {
    delete bird_leave_;
  }
}

void EventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventData::descriptor() {
  protobuf_emergency_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emergency_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventData& EventData::default_instance() {
  protobuf_emergency_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventData* EventData::New(::google::protobuf::Arena* arena) const {
  EventData* n = new EventData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventData::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Pw.EventData)
  if (GetArenaNoVirtual() == NULL && door_beel_ != NULL) {
    delete door_beel_;
  }
  door_beel_ = NULL;
  if (GetArenaNoVirtual() == NULL && bird_voice_ != NULL) {
    delete bird_voice_;
  }
  bird_voice_ = NULL;
  if (GetArenaNoVirtual() == NULL && bird_visit_ != NULL) {
    delete bird_visit_;
  }
  bird_visit_ = NULL;
  if (GetArenaNoVirtual() == NULL && bird_leave_ != NULL) {
    delete bird_leave_;
  }
  bird_leave_ = NULL;
}

bool EventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Pw.EventData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.Pw.DoorBellRing door_beel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_door_beel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Pw.BirdVoice bird_voice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bird_voice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Pw.BirdVisit bird_visit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bird_visit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Pw.BirdLeave bird_leave = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bird_leave()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Pw.EventData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Pw.EventData)
  return false;
#undef DO_
}

void EventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Pw.EventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.Pw.DoorBellRing door_beel = 1;
  if (this->has_door_beel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->door_beel_, output);
  }

  // .NetProto.Pw.BirdVoice bird_voice = 2;
  if (this->has_bird_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bird_voice_, output);
  }

  // .NetProto.Pw.BirdVisit bird_visit = 3;
  if (this->has_bird_visit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->bird_visit_, output);
  }

  // .NetProto.Pw.BirdLeave bird_leave = 4;
  if (this->has_bird_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bird_leave_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Pw.EventData)
}

::google::protobuf::uint8* EventData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Pw.EventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.Pw.DoorBellRing door_beel = 1;
  if (this->has_door_beel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->door_beel_, deterministic, target);
  }

  // .NetProto.Pw.BirdVoice bird_voice = 2;
  if (this->has_bird_voice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->bird_voice_, deterministic, target);
  }

  // .NetProto.Pw.BirdVisit bird_visit = 3;
  if (this->has_bird_visit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->bird_visit_, deterministic, target);
  }

  // .NetProto.Pw.BirdLeave bird_leave = 4;
  if (this->has_bird_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bird_leave_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Pw.EventData)
  return target;
}

size_t EventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Pw.EventData)
  size_t total_size = 0;

  // .NetProto.Pw.DoorBellRing door_beel = 1;
  if (this->has_door_beel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->door_beel_);
  }

  // .NetProto.Pw.BirdVoice bird_voice = 2;
  if (this->has_bird_voice()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bird_voice_);
  }

  // .NetProto.Pw.BirdVisit bird_visit = 3;
  if (this->has_bird_visit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bird_visit_);
  }

  // .NetProto.Pw.BirdLeave bird_leave = 4;
  if (this->has_bird_leave()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bird_leave_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Pw.EventData)
  GOOGLE_DCHECK_NE(&from, this);
  const EventData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Pw.EventData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Pw.EventData)
    MergeFrom(*source);
  }
}

void EventData::MergeFrom(const EventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Pw.EventData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_door_beel()) {
    mutable_door_beel()->::NetProto::Pw::DoorBellRing::MergeFrom(from.door_beel());
  }
  if (from.has_bird_voice()) {
    mutable_bird_voice()->::NetProto::Pw::BirdVoice::MergeFrom(from.bird_voice());
  }
  if (from.has_bird_visit()) {
    mutable_bird_visit()->::NetProto::Pw::BirdVisit::MergeFrom(from.bird_visit());
  }
  if (from.has_bird_leave()) {
    mutable_bird_leave()->::NetProto::Pw::BirdLeave::MergeFrom(from.bird_leave());
  }
}

void EventData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Pw.EventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventData::CopyFrom(const EventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Pw.EventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventData::IsInitialized() const {
  return true;
}

void EventData::Swap(EventData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventData::InternalSwap(EventData* other) {
  std::swap(door_beel_, other->door_beel_);
  std::swap(bird_voice_, other->bird_voice_);
  std::swap(bird_visit_, other->bird_visit_);
  std::swap(bird_leave_, other->bird_leave_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventData::GetMetadata() const {
  protobuf_emergency_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emergency_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventData

// .NetProto.Pw.DoorBellRing door_beel = 1;
bool EventData::has_door_beel() const {
  return this != internal_default_instance() && door_beel_ != NULL;
}
void EventData::clear_door_beel() {
  if (GetArenaNoVirtual() == NULL && door_beel_ != NULL) delete door_beel_;
  door_beel_ = NULL;
}
const ::NetProto::Pw::DoorBellRing& EventData::door_beel() const {
  // @@protoc_insertion_point(field_get:NetProto.Pw.EventData.door_beel)
  return door_beel_ != NULL ? *door_beel_
                         : *::NetProto::Pw::DoorBellRing::internal_default_instance();
}
::NetProto::Pw::DoorBellRing* EventData::mutable_door_beel() {
  
  if (door_beel_ == NULL) {
    door_beel_ = new ::NetProto::Pw::DoorBellRing;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Pw.EventData.door_beel)
  return door_beel_;
}
::NetProto::Pw::DoorBellRing* EventData::release_door_beel() {
  // @@protoc_insertion_point(field_release:NetProto.Pw.EventData.door_beel)
  
  ::NetProto::Pw::DoorBellRing* temp = door_beel_;
  door_beel_ = NULL;
  return temp;
}
void EventData::set_allocated_door_beel(::NetProto::Pw::DoorBellRing* door_beel) {
  delete door_beel_;
  door_beel_ = door_beel;
  if (door_beel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Pw.EventData.door_beel)
}

// .NetProto.Pw.BirdVoice bird_voice = 2;
bool EventData::has_bird_voice() const {
  return this != internal_default_instance() && bird_voice_ != NULL;
}
void EventData::clear_bird_voice() {
  if (GetArenaNoVirtual() == NULL && bird_voice_ != NULL) delete bird_voice_;
  bird_voice_ = NULL;
}
const ::NetProto::Pw::BirdVoice& EventData::bird_voice() const {
  // @@protoc_insertion_point(field_get:NetProto.Pw.EventData.bird_voice)
  return bird_voice_ != NULL ? *bird_voice_
                         : *::NetProto::Pw::BirdVoice::internal_default_instance();
}
::NetProto::Pw::BirdVoice* EventData::mutable_bird_voice() {
  
  if (bird_voice_ == NULL) {
    bird_voice_ = new ::NetProto::Pw::BirdVoice;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Pw.EventData.bird_voice)
  return bird_voice_;
}
::NetProto::Pw::BirdVoice* EventData::release_bird_voice() {
  // @@protoc_insertion_point(field_release:NetProto.Pw.EventData.bird_voice)
  
  ::NetProto::Pw::BirdVoice* temp = bird_voice_;
  bird_voice_ = NULL;
  return temp;
}
void EventData::set_allocated_bird_voice(::NetProto::Pw::BirdVoice* bird_voice) {
  delete bird_voice_;
  bird_voice_ = bird_voice;
  if (bird_voice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Pw.EventData.bird_voice)
}

// .NetProto.Pw.BirdVisit bird_visit = 3;
bool EventData::has_bird_visit() const {
  return this != internal_default_instance() && bird_visit_ != NULL;
}
void EventData::clear_bird_visit() {
  if (GetArenaNoVirtual() == NULL && bird_visit_ != NULL) delete bird_visit_;
  bird_visit_ = NULL;
}
const ::NetProto::Pw::BirdVisit& EventData::bird_visit() const {
  // @@protoc_insertion_point(field_get:NetProto.Pw.EventData.bird_visit)
  return bird_visit_ != NULL ? *bird_visit_
                         : *::NetProto::Pw::BirdVisit::internal_default_instance();
}
::NetProto::Pw::BirdVisit* EventData::mutable_bird_visit() {
  
  if (bird_visit_ == NULL) {
    bird_visit_ = new ::NetProto::Pw::BirdVisit;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Pw.EventData.bird_visit)
  return bird_visit_;
}
::NetProto::Pw::BirdVisit* EventData::release_bird_visit() {
  // @@protoc_insertion_point(field_release:NetProto.Pw.EventData.bird_visit)
  
  ::NetProto::Pw::BirdVisit* temp = bird_visit_;
  bird_visit_ = NULL;
  return temp;
}
void EventData::set_allocated_bird_visit(::NetProto::Pw::BirdVisit* bird_visit) {
  delete bird_visit_;
  bird_visit_ = bird_visit;
  if (bird_visit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Pw.EventData.bird_visit)
}

// .NetProto.Pw.BirdLeave bird_leave = 4;
bool EventData::has_bird_leave() const {
  return this != internal_default_instance() && bird_leave_ != NULL;
}
void EventData::clear_bird_leave() {
  if (GetArenaNoVirtual() == NULL && bird_leave_ != NULL) delete bird_leave_;
  bird_leave_ = NULL;
}
const ::NetProto::Pw::BirdLeave& EventData::bird_leave() const {
  // @@protoc_insertion_point(field_get:NetProto.Pw.EventData.bird_leave)
  return bird_leave_ != NULL ? *bird_leave_
                         : *::NetProto::Pw::BirdLeave::internal_default_instance();
}
::NetProto::Pw::BirdLeave* EventData::mutable_bird_leave() {
  
  if (bird_leave_ == NULL) {
    bird_leave_ = new ::NetProto::Pw::BirdLeave;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Pw.EventData.bird_leave)
  return bird_leave_;
}
::NetProto::Pw::BirdLeave* EventData::release_bird_leave() {
  // @@protoc_insertion_point(field_release:NetProto.Pw.EventData.bird_leave)
  
  ::NetProto::Pw::BirdLeave* temp = bird_leave_;
  bird_leave_ = NULL;
  return temp;
}
void EventData::set_allocated_bird_leave(::NetProto::Pw::BirdLeave* bird_leave) {
  delete bird_leave_;
  bird_leave_ = bird_leave;
  if (bird_leave) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Pw.EventData.bird_leave)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmergencyEvent::kTypeFieldNumber;
const int EmergencyEvent::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmergencyEvent::EmergencyEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_emergency_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Pw.EmergencyEvent)
}
EmergencyEvent::EmergencyEvent(const EmergencyEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::NetProto::Pw::EventData(*from.data_);
  } else {
    data_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Pw.EmergencyEvent)
}

void EmergencyEvent::SharedCtor() {
  ::memset(&data_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&data_) + sizeof(type_));
  _cached_size_ = 0;
}

EmergencyEvent::~EmergencyEvent() {
  // @@protoc_insertion_point(destructor:NetProto.Pw.EmergencyEvent)
  SharedDtor();
}

void EmergencyEvent::SharedDtor() {
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void EmergencyEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmergencyEvent::descriptor() {
  protobuf_emergency_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emergency_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmergencyEvent& EmergencyEvent::default_instance() {
  protobuf_emergency_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmergencyEvent* EmergencyEvent::New(::google::protobuf::Arena* arena) const {
  EmergencyEvent* n = new EmergencyEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmergencyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Pw.EmergencyEvent)
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  type_ = 0;
}

bool EmergencyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Pw.EmergencyEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.Pw.EventType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetProto::Pw::EventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Pw.EventData data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Pw.EmergencyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Pw.EmergencyEvent)
  return false;
#undef DO_
}

void EmergencyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Pw.EmergencyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.Pw.EventType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .NetProto.Pw.EventData data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Pw.EmergencyEvent)
}

::google::protobuf::uint8* EmergencyEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Pw.EmergencyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.Pw.EventType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .NetProto.Pw.EventData data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Pw.EmergencyEvent)
  return target;
}

size_t EmergencyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Pw.EmergencyEvent)
  size_t total_size = 0;

  // .NetProto.Pw.EventData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // .NetProto.Pw.EventType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmergencyEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Pw.EmergencyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const EmergencyEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmergencyEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Pw.EmergencyEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Pw.EmergencyEvent)
    MergeFrom(*source);
  }
}

void EmergencyEvent::MergeFrom(const EmergencyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Pw.EmergencyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::NetProto::Pw::EventData::MergeFrom(from.data());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void EmergencyEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Pw.EmergencyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmergencyEvent::CopyFrom(const EmergencyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Pw.EmergencyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmergencyEvent::IsInitialized() const {
  return true;
}

void EmergencyEvent::Swap(EmergencyEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmergencyEvent::InternalSwap(EmergencyEvent* other) {
  std::swap(data_, other->data_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmergencyEvent::GetMetadata() const {
  protobuf_emergency_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emergency_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmergencyEvent

// .NetProto.Pw.EventType type = 1;
void EmergencyEvent::clear_type() {
  type_ = 0;
}
::NetProto::Pw::EventType EmergencyEvent::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Pw.EmergencyEvent.type)
  return static_cast< ::NetProto::Pw::EventType >(type_);
}
void EmergencyEvent::set_type(::NetProto::Pw::EventType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Pw.EmergencyEvent.type)
}

// .NetProto.Pw.EventData data = 2;
bool EmergencyEvent::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void EmergencyEvent::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::NetProto::Pw::EventData& EmergencyEvent::data() const {
  // @@protoc_insertion_point(field_get:NetProto.Pw.EmergencyEvent.data)
  return data_ != NULL ? *data_
                         : *::NetProto::Pw::EventData::internal_default_instance();
}
::NetProto::Pw::EventData* EmergencyEvent::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::NetProto::Pw::EventData;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Pw.EmergencyEvent.data)
  return data_;
}
::NetProto::Pw::EventData* EmergencyEvent::release_data() {
  // @@protoc_insertion_point(field_release:NetProto.Pw.EmergencyEvent.data)
  
  ::NetProto::Pw::EventData* temp = data_;
  data_ = NULL;
  return temp;
}
void EmergencyEvent::set_allocated_data(::NetProto::Pw::EventData* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Pw.EmergencyEvent.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Pw
}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
