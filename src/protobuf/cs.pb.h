// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs.proto

#ifndef PROTOBUF_cs_2eproto__INCLUDED
#define PROTOBUF_cs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "msg_head.pb.h"
#include "key_value_pair.pb.h"
#include "obj_pos_relation.pb.h"
#include "vector3.pb.h"
#include "quaternion.pb.h"
#include "pos_rot.pb.h"
#include "robot_info.pb.h"
#include "role_status_event.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
namespace NetProto {
class KeyValuePair;
class KeyValuePairDefaultTypeInternal;
extern KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
class MsgHead;
class MsgHeadDefaultTypeInternal;
extern MsgHeadDefaultTypeInternal _MsgHead_default_instance_;
class ObjPosRelation;
class ObjPosRelationDefaultTypeInternal;
extern ObjPosRelationDefaultTypeInternal _ObjPosRelation_default_instance_;
class PosRot;
class PosRotDefaultTypeInternal;
extern PosRotDefaultTypeInternal _PosRot_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class RobotInfo;
class RobotInfoDefaultTypeInternal;
extern RobotInfoDefaultTypeInternal _RobotInfo_default_instance_;
class RobotOffline;
class RobotOfflineDefaultTypeInternal;
extern RobotOfflineDefaultTypeInternal _RobotOffline_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
namespace CS {
class C2SActionStatus;
class C2SActionStatusDefaultTypeInternal;
extern C2SActionStatusDefaultTypeInternal _C2SActionStatus_default_instance_;
class C2SAddObject;
class C2SAddObjectDefaultTypeInternal;
extern C2SAddObjectDefaultTypeInternal _C2SAddObject_default_instance_;
class C2SDebugAction;
class C2SDebugActionDefaultTypeInternal;
extern C2SDebugActionDefaultTypeInternal _C2SDebugAction_default_instance_;
class C2SDeleteObject;
class C2SDeleteObjectDefaultTypeInternal;
extern C2SDeleteObjectDefaultTypeInternal _C2SDeleteObject_default_instance_;
class C2SFetchEvent;
class C2SFetchEventDefaultTypeInternal;
extern C2SFetchEventDefaultTypeInternal _C2SFetchEvent_default_instance_;
class C2SLoginReq;
class C2SLoginReqDefaultTypeInternal;
extern C2SLoginReqDefaultTypeInternal _C2SLoginReq_default_instance_;
class C2SObjPosRotEvent;
class C2SObjPosRotEventDefaultTypeInternal;
extern C2SObjPosRotEventDefaultTypeInternal _C2SObjPosRotEvent_default_instance_;
class C2SPlaceEvent;
class C2SPlaceEventDefaultTypeInternal;
extern C2SPlaceEventDefaultTypeInternal _C2SPlaceEvent_default_instance_;
class C2SRegisterReq;
class C2SRegisterReqDefaultTypeInternal;
extern C2SRegisterReqDefaultTypeInternal _C2SRegisterReq_default_instance_;
class C2SReplaceObject;
class C2SReplaceObjectDefaultTypeInternal;
extern C2SReplaceObjectDefaultTypeInternal _C2SReplaceObject_default_instance_;
class C2SSpecialEvent;
class C2SSpecialEventDefaultTypeInternal;
extern C2SSpecialEventDefaultTypeInternal _C2SSpecialEvent_default_instance_;
class C2STouchEvent;
class C2STouchEventDefaultTypeInternal;
extern C2STouchEventDefaultTypeInternal _C2STouchEvent_default_instance_;
class C2SVision;
class C2SVisionDefaultTypeInternal;
extern C2SVisionDefaultTypeInternal _C2SVision_default_instance_;
class C2SVoice;
class C2SVoiceDefaultTypeInternal;
extern C2SVoiceDefaultTypeInternal _C2SVoice_default_instance_;
class C2SVoiceSpeech;
class C2SVoiceSpeechDefaultTypeInternal;
extern C2SVoiceSpeechDefaultTypeInternal _C2SVoiceSpeech_default_instance_;
class C2SWalkFinish;
class C2SWalkFinishDefaultTypeInternal;
extern C2SWalkFinishDefaultTypeInternal _C2SWalkFinish_default_instance_;
class CSCommonMsg;
class CSCommonMsgDefaultTypeInternal;
extern CSCommonMsgDefaultTypeInternal _CSCommonMsg_default_instance_;
class FetchObj;
class FetchObjDefaultTypeInternal;
extern FetchObjDefaultTypeInternal _FetchObj_default_instance_;
class NotifyClientRobotAttrChange;
class NotifyClientRobotAttrChangeDefaultTypeInternal;
extern NotifyClientRobotAttrChangeDefaultTypeInternal _NotifyClientRobotAttrChange_default_instance_;
class NotifyClientRobotAttrChange_Attr;
class NotifyClientRobotAttrChange_AttrDefaultTypeInternal;
extern NotifyClientRobotAttrChange_AttrDefaultTypeInternal _NotifyClientRobotAttrChange_Attr_default_instance_;
class ObjPosRotChange;
class ObjPosRotChangeDefaultTypeInternal;
extern ObjPosRotChangeDefaultTypeInternal _ObjPosRotChange_default_instance_;
class OperateObj;
class OperateObjDefaultTypeInternal;
extern OperateObjDefaultTypeInternal _OperateObj_default_instance_;
class PutObj;
class PutObjDefaultTypeInternal;
extern PutObjDefaultTypeInternal _PutObj_default_instance_;
class S2CLoginResp;
class S2CLoginRespDefaultTypeInternal;
extern S2CLoginRespDefaultTypeInternal _S2CLoginResp_default_instance_;
class S2CRegisterResp;
class S2CRegisterRespDefaultTypeInternal;
extern S2CRegisterRespDefaultTypeInternal _S2CRegisterResp_default_instance_;
class S2CRoleAction;
class S2CRoleActionDefaultTypeInternal;
extern S2CRoleActionDefaultTypeInternal _S2CRoleAction_default_instance_;
class S2CVoiceSpeech;
class S2CVoiceSpeechDefaultTypeInternal;
extern S2CVoiceSpeechDefaultTypeInternal _S2CVoiceSpeech_default_instance_;
class SelfAction;
class SelfActionDefaultTypeInternal;
extern SelfActionDefaultTypeInternal _SelfAction_default_instance_;
}  // namespace CS
}  // namespace NetProto
namespace google {
namespace protobuf {
class Any;
class AnyDefaultTypeInternal;
extern AnyDefaultTypeInternal _Any_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace NetProto {
namespace CS {

namespace protobuf_cs_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cs_2eproto

enum S2CRoleAction_Type {
  S2CRoleAction_Type_FETCH_OBJ = 0,
  S2CRoleAction_Type_PUT_OBJ = 1,
  S2CRoleAction_Type_OPERATE_OBJ = 2,
  S2CRoleAction_Type_SELF_ACTION = 3,
  S2CRoleAction_Type_S2CRoleAction_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  S2CRoleAction_Type_S2CRoleAction_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool S2CRoleAction_Type_IsValid(int value);
const S2CRoleAction_Type S2CRoleAction_Type_Type_MIN = S2CRoleAction_Type_FETCH_OBJ;
const S2CRoleAction_Type S2CRoleAction_Type_Type_MAX = S2CRoleAction_Type_SELF_ACTION;
const int S2CRoleAction_Type_Type_ARRAYSIZE = S2CRoleAction_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2CRoleAction_Type_descriptor();
inline const ::std::string& S2CRoleAction_Type_Name(S2CRoleAction_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2CRoleAction_Type_descriptor(), value);
}
inline bool S2CRoleAction_Type_Parse(
    const ::std::string& name, S2CRoleAction_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2CRoleAction_Type>(
    S2CRoleAction_Type_descriptor(), name, value);
}
enum C2SActionStatus_Type {
  C2SActionStatus_Type_START = 0,
  C2SActionStatus_Type_FINISH = 1,
  C2SActionStatus_Type_C2SActionStatus_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  C2SActionStatus_Type_C2SActionStatus_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool C2SActionStatus_Type_IsValid(int value);
const C2SActionStatus_Type C2SActionStatus_Type_Type_MIN = C2SActionStatus_Type_START;
const C2SActionStatus_Type C2SActionStatus_Type_Type_MAX = C2SActionStatus_Type_FINISH;
const int C2SActionStatus_Type_Type_ARRAYSIZE = C2SActionStatus_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* C2SActionStatus_Type_descriptor();
inline const ::std::string& C2SActionStatus_Type_Name(C2SActionStatus_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    C2SActionStatus_Type_descriptor(), value);
}
inline bool C2SActionStatus_Type_Parse(
    const ::std::string& name, C2SActionStatus_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<C2SActionStatus_Type>(
    C2SActionStatus_Type_descriptor(), name, value);
}
enum C2SVoice_VoiceType {
  C2SVoice_VoiceType_DoorBellRing = 0,
  C2SVoice_VoiceType_C2SVoice_VoiceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  C2SVoice_VoiceType_C2SVoice_VoiceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool C2SVoice_VoiceType_IsValid(int value);
const C2SVoice_VoiceType C2SVoice_VoiceType_VoiceType_MIN = C2SVoice_VoiceType_DoorBellRing;
const C2SVoice_VoiceType C2SVoice_VoiceType_VoiceType_MAX = C2SVoice_VoiceType_DoorBellRing;
const int C2SVoice_VoiceType_VoiceType_ARRAYSIZE = C2SVoice_VoiceType_VoiceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* C2SVoice_VoiceType_descriptor();
inline const ::std::string& C2SVoice_VoiceType_Name(C2SVoice_VoiceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    C2SVoice_VoiceType_descriptor(), value);
}
inline bool C2SVoice_VoiceType_Parse(
    const ::std::string& name, C2SVoice_VoiceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<C2SVoice_VoiceType>(
    C2SVoice_VoiceType_descriptor(), name, value);
}
enum C2SVoice_VolumeLevel {
  C2SVoice_VolumeLevel_LOW = 0,
  C2SVoice_VolumeLevel_NORMAL = 1,
  C2SVoice_VolumeLevel_HIGH = 2,
  C2SVoice_VolumeLevel_C2SVoice_VolumeLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  C2SVoice_VolumeLevel_C2SVoice_VolumeLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool C2SVoice_VolumeLevel_IsValid(int value);
const C2SVoice_VolumeLevel C2SVoice_VolumeLevel_VolumeLevel_MIN = C2SVoice_VolumeLevel_LOW;
const C2SVoice_VolumeLevel C2SVoice_VolumeLevel_VolumeLevel_MAX = C2SVoice_VolumeLevel_HIGH;
const int C2SVoice_VolumeLevel_VolumeLevel_ARRAYSIZE = C2SVoice_VolumeLevel_VolumeLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* C2SVoice_VolumeLevel_descriptor();
inline const ::std::string& C2SVoice_VolumeLevel_Name(C2SVoice_VolumeLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    C2SVoice_VolumeLevel_descriptor(), value);
}
inline bool C2SVoice_VolumeLevel_Parse(
    const ::std::string& name, C2SVoice_VolumeLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<C2SVoice_VolumeLevel>(
    C2SVoice_VolumeLevel_descriptor(), name, value);
}
enum C2SVoice_VoiceStatus {
  C2SVoice_VoiceStatus_START = 0,
  C2SVoice_VoiceStatus_END = 1,
  C2SVoice_VoiceStatus_INSTANT = 2,
  C2SVoice_VoiceStatus_C2SVoice_VoiceStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  C2SVoice_VoiceStatus_C2SVoice_VoiceStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool C2SVoice_VoiceStatus_IsValid(int value);
const C2SVoice_VoiceStatus C2SVoice_VoiceStatus_VoiceStatus_MIN = C2SVoice_VoiceStatus_START;
const C2SVoice_VoiceStatus C2SVoice_VoiceStatus_VoiceStatus_MAX = C2SVoice_VoiceStatus_INSTANT;
const int C2SVoice_VoiceStatus_VoiceStatus_ARRAYSIZE = C2SVoice_VoiceStatus_VoiceStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* C2SVoice_VoiceStatus_descriptor();
inline const ::std::string& C2SVoice_VoiceStatus_Name(C2SVoice_VoiceStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    C2SVoice_VoiceStatus_descriptor(), value);
}
inline bool C2SVoice_VoiceStatus_Parse(
    const ::std::string& name, C2SVoice_VoiceStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<C2SVoice_VoiceStatus>(
    C2SVoice_VoiceStatus_descriptor(), name, value);
}
enum BodyPart {
  LEFT_HAND = 0,
  RIGHT_HAND = 1,
  LIP = 2,
  HIP = 3,
  WHOLE_BODY = 4,
  BodyPart_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BodyPart_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BodyPart_IsValid(int value);
const BodyPart BodyPart_MIN = LEFT_HAND;
const BodyPart BodyPart_MAX = WHOLE_BODY;
const int BodyPart_ARRAYSIZE = BodyPart_MAX + 1;

const ::google::protobuf::EnumDescriptor* BodyPart_descriptor();
inline const ::std::string& BodyPart_Name(BodyPart value) {
  return ::google::protobuf::internal::NameOfEnum(
    BodyPart_descriptor(), value);
}
inline bool BodyPart_Parse(
    const ::std::string& name, BodyPart* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BodyPart>(
    BodyPart_descriptor(), name, value);
}
enum WorldEventType {
  DoorBellRing = 0,
  EmsArrive = 1,
  WorldEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WorldEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WorldEventType_IsValid(int value);
const WorldEventType WorldEventType_MIN = DoorBellRing;
const WorldEventType WorldEventType_MAX = EmsArrive;
const int WorldEventType_ARRAYSIZE = WorldEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WorldEventType_descriptor();
inline const ::std::string& WorldEventType_Name(WorldEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WorldEventType_descriptor(), value);
}
inline bool WorldEventType_Parse(
    const ::std::string& name, WorldEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorldEventType>(
    WorldEventType_descriptor(), name, value);
}
// ===================================================================

class CSCommonMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.CSCommonMsg) */ {
 public:
  CSCommonMsg();
  virtual ~CSCommonMsg();

  CSCommonMsg(const CSCommonMsg& from);

  inline CSCommonMsg& operator=(const CSCommonMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCommonMsg& default_instance();

  static inline const CSCommonMsg* internal_default_instance() {
    return reinterpret_cast<const CSCommonMsg*>(
               &_CSCommonMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CSCommonMsg* other);

  // implements Message ----------------------------------------------

  inline CSCommonMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  CSCommonMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSCommonMsg& from);
  void MergeFrom(const CSCommonMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSCommonMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // @@protoc_insertion_point(class_scope:NetProto.CS.CSCommonMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NetProto::MsgHead* head_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyClientRobotAttrChange_Attr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.NotifyClientRobotAttrChange.Attr) */ {
 public:
  NotifyClientRobotAttrChange_Attr();
  virtual ~NotifyClientRobotAttrChange_Attr();

  NotifyClientRobotAttrChange_Attr(const NotifyClientRobotAttrChange_Attr& from);

  inline NotifyClientRobotAttrChange_Attr& operator=(const NotifyClientRobotAttrChange_Attr& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyClientRobotAttrChange_Attr& default_instance();

  static inline const NotifyClientRobotAttrChange_Attr* internal_default_instance() {
    return reinterpret_cast<const NotifyClientRobotAttrChange_Attr*>(
               &_NotifyClientRobotAttrChange_Attr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(NotifyClientRobotAttrChange_Attr* other);

  // implements Message ----------------------------------------------

  inline NotifyClientRobotAttrChange_Attr* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyClientRobotAttrChange_Attr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyClientRobotAttrChange_Attr& from);
  void MergeFrom(const NotifyClientRobotAttrChange_Attr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyClientRobotAttrChange_Attr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 field = 1;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  ::google::protobuf::uint32 field() const;
  void set_field(::google::protobuf::uint32 value);

  // uint32 value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // uint32 ts = 3;
  void clear_ts();
  static const int kTsFieldNumber = 3;
  ::google::protobuf::uint32 ts() const;
  void set_ts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NetProto.CS.NotifyClientRobotAttrChange.Attr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 field_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 ts_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyClientRobotAttrChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.NotifyClientRobotAttrChange) */ {
 public:
  NotifyClientRobotAttrChange();
  virtual ~NotifyClientRobotAttrChange();

  NotifyClientRobotAttrChange(const NotifyClientRobotAttrChange& from);

  inline NotifyClientRobotAttrChange& operator=(const NotifyClientRobotAttrChange& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyClientRobotAttrChange& default_instance();

  static inline const NotifyClientRobotAttrChange* internal_default_instance() {
    return reinterpret_cast<const NotifyClientRobotAttrChange*>(
               &_NotifyClientRobotAttrChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(NotifyClientRobotAttrChange* other);

  // implements Message ----------------------------------------------

  inline NotifyClientRobotAttrChange* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyClientRobotAttrChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyClientRobotAttrChange& from);
  void MergeFrom(const NotifyClientRobotAttrChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyClientRobotAttrChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NotifyClientRobotAttrChange_Attr Attr;

  // accessors -------------------------------------------------------

  // repeated .NetProto.CS.NotifyClientRobotAttrChange.Attr all_attr = 2;
  int all_attr_size() const;
  void clear_all_attr();
  static const int kAllAttrFieldNumber = 2;
  const ::NetProto::CS::NotifyClientRobotAttrChange_Attr& all_attr(int index) const;
  ::NetProto::CS::NotifyClientRobotAttrChange_Attr* mutable_all_attr(int index);
  ::NetProto::CS::NotifyClientRobotAttrChange_Attr* add_all_attr();
  ::google::protobuf::RepeatedPtrField< ::NetProto::CS::NotifyClientRobotAttrChange_Attr >*
      mutable_all_attr();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::CS::NotifyClientRobotAttrChange_Attr >&
      all_attr() const;

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // @@protoc_insertion_point(class_scope:NetProto.CS.NotifyClientRobotAttrChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::CS::NotifyClientRobotAttrChange_Attr > all_attr_;
  ::NetProto::MsgHead* head_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SRegisterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SRegisterReq) */ {
 public:
  C2SRegisterReq();
  virtual ~C2SRegisterReq();

  C2SRegisterReq(const C2SRegisterReq& from);

  inline C2SRegisterReq& operator=(const C2SRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SRegisterReq& default_instance();

  static inline const C2SRegisterReq* internal_default_instance() {
    return reinterpret_cast<const C2SRegisterReq*>(
               &_C2SRegisterReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(C2SRegisterReq* other);

  // implements Message ----------------------------------------------

  inline C2SRegisterReq* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SRegisterReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SRegisterReq& from);
  void MergeFrom(const C2SRegisterReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SRegisterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account_name = 1;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 1;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SRegisterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2CRegisterResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.S2CRegisterResp) */ {
 public:
  S2CRegisterResp();
  virtual ~S2CRegisterResp();

  S2CRegisterResp(const S2CRegisterResp& from);

  inline S2CRegisterResp& operator=(const S2CRegisterResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2CRegisterResp& default_instance();

  static inline const S2CRegisterResp* internal_default_instance() {
    return reinterpret_cast<const S2CRegisterResp*>(
               &_S2CRegisterResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(S2CRegisterResp* other);

  // implements Message ----------------------------------------------

  inline S2CRegisterResp* New() const PROTOBUF_FINAL { return New(NULL); }

  S2CRegisterResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const S2CRegisterResp& from);
  void MergeFrom(const S2CRegisterResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(S2CRegisterResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:NetProto.CS.S2CRegisterResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  bool success_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SLoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SLoginReq) */ {
 public:
  C2SLoginReq();
  virtual ~C2SLoginReq();

  C2SLoginReq(const C2SLoginReq& from);

  inline C2SLoginReq& operator=(const C2SLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SLoginReq& default_instance();

  static inline const C2SLoginReq* internal_default_instance() {
    return reinterpret_cast<const C2SLoginReq*>(
               &_C2SLoginReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(C2SLoginReq* other);

  // implements Message ----------------------------------------------

  inline C2SLoginReq* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SLoginReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SLoginReq& from);
  void MergeFrom(const C2SLoginReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account_name = 1;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 1;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SLoginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2CLoginResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.S2CLoginResp) */ {
 public:
  S2CLoginResp();
  virtual ~S2CLoginResp();

  S2CLoginResp(const S2CLoginResp& from);

  inline S2CLoginResp& operator=(const S2CLoginResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2CLoginResp& default_instance();

  static inline const S2CLoginResp* internal_default_instance() {
    return reinterpret_cast<const S2CLoginResp*>(
               &_S2CLoginResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(S2CLoginResp* other);

  // implements Message ----------------------------------------------

  inline S2CLoginResp* New() const PROTOBUF_FINAL { return New(NULL); }

  S2CLoginResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const S2CLoginResp& from);
  void MergeFrom(const S2CLoginResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(S2CLoginResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // .NetProto.RobotInfo robotInfo = 3;
  bool has_robotinfo() const;
  void clear_robotinfo();
  static const int kRobotInfoFieldNumber = 3;
  const ::NetProto::RobotInfo& robotinfo() const;
  ::NetProto::RobotInfo* mutable_robotinfo();
  ::NetProto::RobotInfo* release_robotinfo();
  void set_allocated_robotinfo(::NetProto::RobotInfo* robotinfo);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:NetProto.CS.S2CLoginResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::NetProto::RobotInfo* robotinfo_;
  bool success_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2CRoleAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.S2CRoleAction) */ {
 public:
  S2CRoleAction();
  virtual ~S2CRoleAction();

  S2CRoleAction(const S2CRoleAction& from);

  inline S2CRoleAction& operator=(const S2CRoleAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2CRoleAction& default_instance();

  static inline const S2CRoleAction* internal_default_instance() {
    return reinterpret_cast<const S2CRoleAction*>(
               &_S2CRoleAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(S2CRoleAction* other);

  // implements Message ----------------------------------------------

  inline S2CRoleAction* New() const PROTOBUF_FINAL { return New(NULL); }

  S2CRoleAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const S2CRoleAction& from);
  void MergeFrom(const S2CRoleAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(S2CRoleAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef S2CRoleAction_Type Type;
  static const Type FETCH_OBJ =
    S2CRoleAction_Type_FETCH_OBJ;
  static const Type PUT_OBJ =
    S2CRoleAction_Type_PUT_OBJ;
  static const Type OPERATE_OBJ =
    S2CRoleAction_Type_OPERATE_OBJ;
  static const Type SELF_ACTION =
    S2CRoleAction_Type_SELF_ACTION;
  static inline bool Type_IsValid(int value) {
    return S2CRoleAction_Type_IsValid(value);
  }
  static const Type Type_MIN =
    S2CRoleAction_Type_Type_MIN;
  static const Type Type_MAX =
    S2CRoleAction_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    S2CRoleAction_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return S2CRoleAction_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return S2CRoleAction_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return S2CRoleAction_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // .NetProto.CS.FetchObj fetch_obj = 4;
  bool has_fetch_obj() const;
  void clear_fetch_obj();
  static const int kFetchObjFieldNumber = 4;
  const ::NetProto::CS::FetchObj& fetch_obj() const;
  ::NetProto::CS::FetchObj* mutable_fetch_obj();
  ::NetProto::CS::FetchObj* release_fetch_obj();
  void set_allocated_fetch_obj(::NetProto::CS::FetchObj* fetch_obj);

  // .NetProto.CS.PutObj put_obj = 5;
  bool has_put_obj() const;
  void clear_put_obj();
  static const int kPutObjFieldNumber = 5;
  const ::NetProto::CS::PutObj& put_obj() const;
  ::NetProto::CS::PutObj* mutable_put_obj();
  ::NetProto::CS::PutObj* release_put_obj();
  void set_allocated_put_obj(::NetProto::CS::PutObj* put_obj);

  // .NetProto.CS.OperateObj operate_obj = 6;
  bool has_operate_obj() const;
  void clear_operate_obj();
  static const int kOperateObjFieldNumber = 6;
  const ::NetProto::CS::OperateObj& operate_obj() const;
  ::NetProto::CS::OperateObj* mutable_operate_obj();
  ::NetProto::CS::OperateObj* release_operate_obj();
  void set_allocated_operate_obj(::NetProto::CS::OperateObj* operate_obj);

  // .NetProto.CS.SelfAction self_action = 7;
  bool has_self_action() const;
  void clear_self_action();
  static const int kSelfActionFieldNumber = 7;
  const ::NetProto::CS::SelfAction& self_action() const;
  ::NetProto::CS::SelfAction* mutable_self_action();
  ::NetProto::CS::SelfAction* release_self_action();
  void set_allocated_self_action(::NetProto::CS::SelfAction* self_action);

  // .google.protobuf.Any cached_start_data = 8;
  bool has_cached_start_data() const;
  void clear_cached_start_data();
  static const int kCachedStartDataFieldNumber = 8;
  const ::google::protobuf::Any& cached_start_data() const;
  ::google::protobuf::Any* mutable_cached_start_data();
  ::google::protobuf::Any* release_cached_start_data();
  void set_allocated_cached_start_data(::google::protobuf::Any* cached_start_data);

  // .google.protobuf.Any cached_finish_data = 9;
  bool has_cached_finish_data() const;
  void clear_cached_finish_data();
  static const int kCachedFinishDataFieldNumber = 9;
  const ::google::protobuf::Any& cached_finish_data() const;
  ::google::protobuf::Any* mutable_cached_finish_data();
  ::google::protobuf::Any* release_cached_finish_data();
  void set_allocated_cached_finish_data(::google::protobuf::Any* cached_finish_data);

  // uint32 action_id = 2;
  void clear_action_id();
  static const int kActionIdFieldNumber = 2;
  ::google::protobuf::uint32 action_id() const;
  void set_action_id(::google::protobuf::uint32 value);

  // .NetProto.CS.S2CRoleAction.Type type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::NetProto::CS::S2CRoleAction_Type type() const;
  void set_type(::NetProto::CS::S2CRoleAction_Type value);

  // @@protoc_insertion_point(class_scope:NetProto.CS.S2CRoleAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NetProto::MsgHead* msg_head_;
  ::NetProto::CS::FetchObj* fetch_obj_;
  ::NetProto::CS::PutObj* put_obj_;
  ::NetProto::CS::OperateObj* operate_obj_;
  ::NetProto::CS::SelfAction* self_action_;
  ::google::protobuf::Any* cached_start_data_;
  ::google::protobuf::Any* cached_finish_data_;
  ::google::protobuf::uint32 action_id_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2CVoiceSpeech : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.S2CVoiceSpeech) */ {
 public:
  S2CVoiceSpeech();
  virtual ~S2CVoiceSpeech();

  S2CVoiceSpeech(const S2CVoiceSpeech& from);

  inline S2CVoiceSpeech& operator=(const S2CVoiceSpeech& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2CVoiceSpeech& default_instance();

  static inline const S2CVoiceSpeech* internal_default_instance() {
    return reinterpret_cast<const S2CVoiceSpeech*>(
               &_S2CVoiceSpeech_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(S2CVoiceSpeech* other);

  // implements Message ----------------------------------------------

  inline S2CVoiceSpeech* New() const PROTOBUF_FINAL { return New(NULL); }

  S2CVoiceSpeech* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const S2CVoiceSpeech& from);
  void MergeFrom(const S2CVoiceSpeech& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(S2CVoiceSpeech* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // @@protoc_insertion_point(class_scope:NetProto.CS.S2CVoiceSpeech)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::NetProto::MsgHead* msg_head_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SWalkFinish : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SWalkFinish) */ {
 public:
  C2SWalkFinish();
  virtual ~C2SWalkFinish();

  C2SWalkFinish(const C2SWalkFinish& from);

  inline C2SWalkFinish& operator=(const C2SWalkFinish& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SWalkFinish& default_instance();

  static inline const C2SWalkFinish* internal_default_instance() {
    return reinterpret_cast<const C2SWalkFinish*>(
               &_C2SWalkFinish_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(C2SWalkFinish* other);

  // implements Message ----------------------------------------------

  inline C2SWalkFinish* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SWalkFinish* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SWalkFinish& from);
  void MergeFrom(const C2SWalkFinish& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SWalkFinish* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NetProto.ObjPosRelation relation = 5;
  int relation_size() const;
  void clear_relation();
  static const int kRelationFieldNumber = 5;
  const ::NetProto::ObjPosRelation& relation(int index) const;
  ::NetProto::ObjPosRelation* mutable_relation(int index);
  ::NetProto::ObjPosRelation* add_relation();
  ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >*
      mutable_relation();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >&
      relation() const;

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // .NetProto.Vector3 role_pos = 3;
  bool has_role_pos() const;
  void clear_role_pos();
  static const int kRolePosFieldNumber = 3;
  const ::NetProto::Vector3& role_pos() const;
  ::NetProto::Vector3* mutable_role_pos();
  ::NetProto::Vector3* release_role_pos();
  void set_allocated_role_pos(::NetProto::Vector3* role_pos);

  // .NetProto.Quaternion role_rot = 4;
  bool has_role_rot() const;
  void clear_role_rot();
  static const int kRoleRotFieldNumber = 4;
  const ::NetProto::Quaternion& role_rot() const;
  ::NetProto::Quaternion* mutable_role_rot();
  ::NetProto::Quaternion* release_role_rot();
  void set_allocated_role_rot(::NetProto::Quaternion* role_rot);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SWalkFinish)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation > relation_;
  ::NetProto::MsgHead* msg_head_;
  ::NetProto::Vector3* role_pos_;
  ::NetProto::Quaternion* role_rot_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SActionStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SActionStatus) */ {
 public:
  C2SActionStatus();
  virtual ~C2SActionStatus();

  C2SActionStatus(const C2SActionStatus& from);

  inline C2SActionStatus& operator=(const C2SActionStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SActionStatus& default_instance();

  static inline const C2SActionStatus* internal_default_instance() {
    return reinterpret_cast<const C2SActionStatus*>(
               &_C2SActionStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(C2SActionStatus* other);

  // implements Message ----------------------------------------------

  inline C2SActionStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SActionStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SActionStatus& from);
  void MergeFrom(const C2SActionStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SActionStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef C2SActionStatus_Type Type;
  static const Type START =
    C2SActionStatus_Type_START;
  static const Type FINISH =
    C2SActionStatus_Type_FINISH;
  static inline bool Type_IsValid(int value) {
    return C2SActionStatus_Type_IsValid(value);
  }
  static const Type Type_MIN =
    C2SActionStatus_Type_Type_MIN;
  static const Type Type_MAX =
    C2SActionStatus_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    C2SActionStatus_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return C2SActionStatus_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return C2SActionStatus_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return C2SActionStatus_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // .google.protobuf.Any cached_data = 4;
  bool has_cached_data() const;
  void clear_cached_data();
  static const int kCachedDataFieldNumber = 4;
  const ::google::protobuf::Any& cached_data() const;
  ::google::protobuf::Any* mutable_cached_data();
  ::google::protobuf::Any* release_cached_data();
  void set_allocated_cached_data(::google::protobuf::Any* cached_data);

  // .NetProto.CS.C2SActionStatus.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::NetProto::CS::C2SActionStatus_Type type() const;
  void set_type(::NetProto::CS::C2SActionStatus_Type value);

  // uint32 action_id = 3;
  void clear_action_id();
  static const int kActionIdFieldNumber = 3;
  ::google::protobuf::uint32 action_id() const;
  void set_action_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SActionStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NetProto::MsgHead* msg_head_;
  ::google::protobuf::Any* cached_data_;
  int type_;
  ::google::protobuf::uint32 action_id_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2STouchEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2STouchEvent) */ {
 public:
  C2STouchEvent();
  virtual ~C2STouchEvent();

  C2STouchEvent(const C2STouchEvent& from);

  inline C2STouchEvent& operator=(const C2STouchEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2STouchEvent& default_instance();

  static inline const C2STouchEvent* internal_default_instance() {
    return reinterpret_cast<const C2STouchEvent*>(
               &_C2STouchEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(C2STouchEvent* other);

  // implements Message ----------------------------------------------

  inline C2STouchEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  C2STouchEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2STouchEvent& from);
  void MergeFrom(const C2STouchEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2STouchEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string obj_uuid = 3;
  void clear_obj_uuid();
  static const int kObjUuidFieldNumber = 3;
  const ::std::string& obj_uuid() const;
  void set_obj_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_uuid(::std::string&& value);
  #endif
  void set_obj_uuid(const char* value);
  void set_obj_uuid(const char* value, size_t size);
  ::std::string* mutable_obj_uuid();
  ::std::string* release_obj_uuid();
  void set_allocated_obj_uuid(::std::string* obj_uuid);

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // .NetProto.CS.BodyPart body_part = 2;
  void clear_body_part();
  static const int kBodyPartFieldNumber = 2;
  ::NetProto::CS::BodyPart body_part() const;
  void set_body_part(::NetProto::CS::BodyPart value);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2STouchEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr obj_uuid_;
  ::NetProto::MsgHead* msg_head_;
  int body_part_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SPlaceEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SPlaceEvent) */ {
 public:
  C2SPlaceEvent();
  virtual ~C2SPlaceEvent();

  C2SPlaceEvent(const C2SPlaceEvent& from);

  inline C2SPlaceEvent& operator=(const C2SPlaceEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SPlaceEvent& default_instance();

  static inline const C2SPlaceEvent* internal_default_instance() {
    return reinterpret_cast<const C2SPlaceEvent*>(
               &_C2SPlaceEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(C2SPlaceEvent* other);

  // implements Message ----------------------------------------------

  inline C2SPlaceEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SPlaceEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SPlaceEvent& from);
  void MergeFrom(const C2SPlaceEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SPlaceEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NetProto.CS.ObjPosRotChange changed_pos_rot = 5;
  int changed_pos_rot_size() const;
  void clear_changed_pos_rot();
  static const int kChangedPosRotFieldNumber = 5;
  const ::NetProto::CS::ObjPosRotChange& changed_pos_rot(int index) const;
  ::NetProto::CS::ObjPosRotChange* mutable_changed_pos_rot(int index);
  ::NetProto::CS::ObjPosRotChange* add_changed_pos_rot();
  ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange >*
      mutable_changed_pos_rot();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange >&
      changed_pos_rot() const;

  // repeated .NetProto.ObjPosRelation changed_relation = 6;
  int changed_relation_size() const;
  void clear_changed_relation();
  static const int kChangedRelationFieldNumber = 6;
  const ::NetProto::ObjPosRelation& changed_relation(int index) const;
  ::NetProto::ObjPosRelation* mutable_changed_relation(int index);
  ::NetProto::ObjPosRelation* add_changed_relation();
  ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >*
      mutable_changed_relation();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >&
      changed_relation() const;

  // string obj_uuid = 3;
  void clear_obj_uuid();
  static const int kObjUuidFieldNumber = 3;
  const ::std::string& obj_uuid() const;
  void set_obj_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_uuid(::std::string&& value);
  #endif
  void set_obj_uuid(const char* value);
  void set_obj_uuid(const char* value, size_t size);
  ::std::string* mutable_obj_uuid();
  ::std::string* release_obj_uuid();
  void set_allocated_obj_uuid(::std::string* obj_uuid);

  // string location_uuid = 4;
  void clear_location_uuid();
  static const int kLocationUuidFieldNumber = 4;
  const ::std::string& location_uuid() const;
  void set_location_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_location_uuid(::std::string&& value);
  #endif
  void set_location_uuid(const char* value);
  void set_location_uuid(const char* value, size_t size);
  ::std::string* mutable_location_uuid();
  ::std::string* release_location_uuid();
  void set_allocated_location_uuid(::std::string* location_uuid);

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // .NetProto.CS.BodyPart body_part = 7;
  void clear_body_part();
  static const int kBodyPartFieldNumber = 7;
  ::NetProto::CS::BodyPart body_part() const;
  void set_body_part(::NetProto::CS::BodyPart value);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SPlaceEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange > changed_pos_rot_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation > changed_relation_;
  ::google::protobuf::internal::ArenaStringPtr obj_uuid_;
  ::google::protobuf::internal::ArenaStringPtr location_uuid_;
  ::NetProto::MsgHead* msg_head_;
  int body_part_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SFetchEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SFetchEvent) */ {
 public:
  C2SFetchEvent();
  virtual ~C2SFetchEvent();

  C2SFetchEvent(const C2SFetchEvent& from);

  inline C2SFetchEvent& operator=(const C2SFetchEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SFetchEvent& default_instance();

  static inline const C2SFetchEvent* internal_default_instance() {
    return reinterpret_cast<const C2SFetchEvent*>(
               &_C2SFetchEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(C2SFetchEvent* other);

  // implements Message ----------------------------------------------

  inline C2SFetchEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SFetchEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SFetchEvent& from);
  void MergeFrom(const C2SFetchEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SFetchEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NetProto.CS.ObjPosRotChange changed_pos_rot = 5;
  int changed_pos_rot_size() const;
  void clear_changed_pos_rot();
  static const int kChangedPosRotFieldNumber = 5;
  const ::NetProto::CS::ObjPosRotChange& changed_pos_rot(int index) const;
  ::NetProto::CS::ObjPosRotChange* mutable_changed_pos_rot(int index);
  ::NetProto::CS::ObjPosRotChange* add_changed_pos_rot();
  ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange >*
      mutable_changed_pos_rot();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange >&
      changed_pos_rot() const;

  // repeated .NetProto.ObjPosRelation changed_relation = 6;
  int changed_relation_size() const;
  void clear_changed_relation();
  static const int kChangedRelationFieldNumber = 6;
  const ::NetProto::ObjPosRelation& changed_relation(int index) const;
  ::NetProto::ObjPosRelation* mutable_changed_relation(int index);
  ::NetProto::ObjPosRelation* add_changed_relation();
  ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >*
      mutable_changed_relation();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >&
      changed_relation() const;

  // string obj_uuid = 3;
  void clear_obj_uuid();
  static const int kObjUuidFieldNumber = 3;
  const ::std::string& obj_uuid() const;
  void set_obj_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_uuid(::std::string&& value);
  #endif
  void set_obj_uuid(const char* value);
  void set_obj_uuid(const char* value, size_t size);
  ::std::string* mutable_obj_uuid();
  ::std::string* release_obj_uuid();
  void set_allocated_obj_uuid(::std::string* obj_uuid);

  // string location_uuid = 4;
  void clear_location_uuid();
  static const int kLocationUuidFieldNumber = 4;
  const ::std::string& location_uuid() const;
  void set_location_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_location_uuid(::std::string&& value);
  #endif
  void set_location_uuid(const char* value);
  void set_location_uuid(const char* value, size_t size);
  ::std::string* mutable_location_uuid();
  ::std::string* release_location_uuid();
  void set_allocated_location_uuid(::std::string* location_uuid);

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // .NetProto.CS.BodyPart body_part = 7;
  void clear_body_part();
  static const int kBodyPartFieldNumber = 7;
  ::NetProto::CS::BodyPart body_part() const;
  void set_body_part(::NetProto::CS::BodyPart value);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SFetchEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange > changed_pos_rot_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation > changed_relation_;
  ::google::protobuf::internal::ArenaStringPtr obj_uuid_;
  ::google::protobuf::internal::ArenaStringPtr location_uuid_;
  ::NetProto::MsgHead* msg_head_;
  int body_part_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SSpecialEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SSpecialEvent) */ {
 public:
  C2SSpecialEvent();
  virtual ~C2SSpecialEvent();

  C2SSpecialEvent(const C2SSpecialEvent& from);

  inline C2SSpecialEvent& operator=(const C2SSpecialEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SSpecialEvent& default_instance();

  static inline const C2SSpecialEvent* internal_default_instance() {
    return reinterpret_cast<const C2SSpecialEvent*>(
               &_C2SSpecialEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(C2SSpecialEvent* other);

  // implements Message ----------------------------------------------

  inline C2SSpecialEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SSpecialEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SSpecialEvent& from);
  void MergeFrom(const C2SSpecialEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SSpecialEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NetProto.KeyValuePair params = 4;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 4;
  const ::NetProto::KeyValuePair& params(int index) const;
  ::NetProto::KeyValuePair* mutable_params(int index);
  ::NetProto::KeyValuePair* add_params();
  ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair >*
      mutable_params();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair >&
      params() const;

  // string obj_uuid = 3;
  void clear_obj_uuid();
  static const int kObjUuidFieldNumber = 3;
  const ::std::string& obj_uuid() const;
  void set_obj_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_uuid(::std::string&& value);
  #endif
  void set_obj_uuid(const char* value);
  void set_obj_uuid(const char* value, size_t size);
  ::std::string* mutable_obj_uuid();
  ::std::string* release_obj_uuid();
  void set_allocated_obj_uuid(::std::string* obj_uuid);

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // .NetProto.RoleStatusEvent evt_type = 2;
  void clear_evt_type();
  static const int kEvtTypeFieldNumber = 2;
  ::NetProto::RoleStatusEvent evt_type() const;
  void set_evt_type(::NetProto::RoleStatusEvent value);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SSpecialEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair > params_;
  ::google::protobuf::internal::ArenaStringPtr obj_uuid_;
  ::NetProto::MsgHead* msg_head_;
  int evt_type_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SObjPosRotEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SObjPosRotEvent) */ {
 public:
  C2SObjPosRotEvent();
  virtual ~C2SObjPosRotEvent();

  C2SObjPosRotEvent(const C2SObjPosRotEvent& from);

  inline C2SObjPosRotEvent& operator=(const C2SObjPosRotEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SObjPosRotEvent& default_instance();

  static inline const C2SObjPosRotEvent* internal_default_instance() {
    return reinterpret_cast<const C2SObjPosRotEvent*>(
               &_C2SObjPosRotEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(C2SObjPosRotEvent* other);

  // implements Message ----------------------------------------------

  inline C2SObjPosRotEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SObjPosRotEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SObjPosRotEvent& from);
  void MergeFrom(const C2SObjPosRotEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SObjPosRotEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NetProto.CS.ObjPosRotChange obj_pos_rot_change = 3;
  int obj_pos_rot_change_size() const;
  void clear_obj_pos_rot_change();
  static const int kObjPosRotChangeFieldNumber = 3;
  const ::NetProto::CS::ObjPosRotChange& obj_pos_rot_change(int index) const;
  ::NetProto::CS::ObjPosRotChange* mutable_obj_pos_rot_change(int index);
  ::NetProto::CS::ObjPosRotChange* add_obj_pos_rot_change();
  ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange >*
      mutable_obj_pos_rot_change();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange >&
      obj_pos_rot_change() const;

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SObjPosRotEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange > obj_pos_rot_change_;
  ::NetProto::MsgHead* msg_head_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SVision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SVision) */ {
 public:
  C2SVision();
  virtual ~C2SVision();

  C2SVision(const C2SVision& from);

  inline C2SVision& operator=(const C2SVision& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SVision& default_instance();

  static inline const C2SVision* internal_default_instance() {
    return reinterpret_cast<const C2SVision*>(
               &_C2SVision_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(C2SVision* other);

  // implements Message ----------------------------------------------

  inline C2SVision* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SVision* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SVision& from);
  void MergeFrom(const C2SVision& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SVision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string enter_obj_uuid = 2;
  int enter_obj_uuid_size() const;
  void clear_enter_obj_uuid();
  static const int kEnterObjUuidFieldNumber = 2;
  const ::std::string& enter_obj_uuid(int index) const;
  ::std::string* mutable_enter_obj_uuid(int index);
  void set_enter_obj_uuid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_enter_obj_uuid(int index, ::std::string&& value);
  #endif
  void set_enter_obj_uuid(int index, const char* value);
  void set_enter_obj_uuid(int index, const char* value, size_t size);
  ::std::string* add_enter_obj_uuid();
  void add_enter_obj_uuid(const ::std::string& value);
  #if LANG_CXX11
  void add_enter_obj_uuid(::std::string&& value);
  #endif
  void add_enter_obj_uuid(const char* value);
  void add_enter_obj_uuid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& enter_obj_uuid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_enter_obj_uuid();

  // repeated .NetProto.ObjPosRelation enter_obj_relation = 3;
  int enter_obj_relation_size() const;
  void clear_enter_obj_relation();
  static const int kEnterObjRelationFieldNumber = 3;
  const ::NetProto::ObjPosRelation& enter_obj_relation(int index) const;
  ::NetProto::ObjPosRelation* mutable_enter_obj_relation(int index);
  ::NetProto::ObjPosRelation* add_enter_obj_relation();
  ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >*
      mutable_enter_obj_relation();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >&
      enter_obj_relation() const;

  // repeated string leave_obj_uuid = 4;
  int leave_obj_uuid_size() const;
  void clear_leave_obj_uuid();
  static const int kLeaveObjUuidFieldNumber = 4;
  const ::std::string& leave_obj_uuid(int index) const;
  ::std::string* mutable_leave_obj_uuid(int index);
  void set_leave_obj_uuid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_leave_obj_uuid(int index, ::std::string&& value);
  #endif
  void set_leave_obj_uuid(int index, const char* value);
  void set_leave_obj_uuid(int index, const char* value, size_t size);
  ::std::string* add_leave_obj_uuid();
  void add_leave_obj_uuid(const ::std::string& value);
  #if LANG_CXX11
  void add_leave_obj_uuid(::std::string&& value);
  #endif
  void add_leave_obj_uuid(const char* value);
  void add_leave_obj_uuid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& leave_obj_uuid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_leave_obj_uuid();

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SVision)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> enter_obj_uuid_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation > enter_obj_relation_;
  ::google::protobuf::RepeatedPtrField< ::std::string> leave_obj_uuid_;
  ::NetProto::MsgHead* msg_head_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SVoice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SVoice) */ {
 public:
  C2SVoice();
  virtual ~C2SVoice();

  C2SVoice(const C2SVoice& from);

  inline C2SVoice& operator=(const C2SVoice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SVoice& default_instance();

  static inline const C2SVoice* internal_default_instance() {
    return reinterpret_cast<const C2SVoice*>(
               &_C2SVoice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(C2SVoice* other);

  // implements Message ----------------------------------------------

  inline C2SVoice* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SVoice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SVoice& from);
  void MergeFrom(const C2SVoice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SVoice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef C2SVoice_VoiceType VoiceType;
  static const VoiceType DoorBellRing =
    C2SVoice_VoiceType_DoorBellRing;
  static inline bool VoiceType_IsValid(int value) {
    return C2SVoice_VoiceType_IsValid(value);
  }
  static const VoiceType VoiceType_MIN =
    C2SVoice_VoiceType_VoiceType_MIN;
  static const VoiceType VoiceType_MAX =
    C2SVoice_VoiceType_VoiceType_MAX;
  static const int VoiceType_ARRAYSIZE =
    C2SVoice_VoiceType_VoiceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VoiceType_descriptor() {
    return C2SVoice_VoiceType_descriptor();
  }
  static inline const ::std::string& VoiceType_Name(VoiceType value) {
    return C2SVoice_VoiceType_Name(value);
  }
  static inline bool VoiceType_Parse(const ::std::string& name,
      VoiceType* value) {
    return C2SVoice_VoiceType_Parse(name, value);
  }

  typedef C2SVoice_VolumeLevel VolumeLevel;
  static const VolumeLevel LOW =
    C2SVoice_VolumeLevel_LOW;
  static const VolumeLevel NORMAL =
    C2SVoice_VolumeLevel_NORMAL;
  static const VolumeLevel HIGH =
    C2SVoice_VolumeLevel_HIGH;
  static inline bool VolumeLevel_IsValid(int value) {
    return C2SVoice_VolumeLevel_IsValid(value);
  }
  static const VolumeLevel VolumeLevel_MIN =
    C2SVoice_VolumeLevel_VolumeLevel_MIN;
  static const VolumeLevel VolumeLevel_MAX =
    C2SVoice_VolumeLevel_VolumeLevel_MAX;
  static const int VolumeLevel_ARRAYSIZE =
    C2SVoice_VolumeLevel_VolumeLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VolumeLevel_descriptor() {
    return C2SVoice_VolumeLevel_descriptor();
  }
  static inline const ::std::string& VolumeLevel_Name(VolumeLevel value) {
    return C2SVoice_VolumeLevel_Name(value);
  }
  static inline bool VolumeLevel_Parse(const ::std::string& name,
      VolumeLevel* value) {
    return C2SVoice_VolumeLevel_Parse(name, value);
  }

  typedef C2SVoice_VoiceStatus VoiceStatus;
  static const VoiceStatus START =
    C2SVoice_VoiceStatus_START;
  static const VoiceStatus END =
    C2SVoice_VoiceStatus_END;
  static const VoiceStatus INSTANT =
    C2SVoice_VoiceStatus_INSTANT;
  static inline bool VoiceStatus_IsValid(int value) {
    return C2SVoice_VoiceStatus_IsValid(value);
  }
  static const VoiceStatus VoiceStatus_MIN =
    C2SVoice_VoiceStatus_VoiceStatus_MIN;
  static const VoiceStatus VoiceStatus_MAX =
    C2SVoice_VoiceStatus_VoiceStatus_MAX;
  static const int VoiceStatus_ARRAYSIZE =
    C2SVoice_VoiceStatus_VoiceStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VoiceStatus_descriptor() {
    return C2SVoice_VoiceStatus_descriptor();
  }
  static inline const ::std::string& VoiceStatus_Name(VoiceStatus value) {
    return C2SVoice_VoiceStatus_Name(value);
  }
  static inline bool VoiceStatus_Parse(const ::std::string& name,
      VoiceStatus* value) {
    return C2SVoice_VoiceStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string params = 4;
  void clear_params();
  static const int kParamsFieldNumber = 4;
  const ::std::string& params() const;
  void set_params(const ::std::string& value);
  #if LANG_CXX11
  void set_params(::std::string&& value);
  #endif
  void set_params(const char* value);
  void set_params(const char* value, size_t size);
  ::std::string* mutable_params();
  ::std::string* release_params();
  void set_allocated_params(::std::string* params);

  // .NetProto.CS.C2SVoice.VoiceType voice_type = 1;
  void clear_voice_type();
  static const int kVoiceTypeFieldNumber = 1;
  ::NetProto::CS::C2SVoice_VoiceType voice_type() const;
  void set_voice_type(::NetProto::CS::C2SVoice_VoiceType value);

  // .NetProto.CS.C2SVoice.VoiceStatus voice_status = 2;
  void clear_voice_status();
  static const int kVoiceStatusFieldNumber = 2;
  ::NetProto::CS::C2SVoice_VoiceStatus voice_status() const;
  void set_voice_status(::NetProto::CS::C2SVoice_VoiceStatus value);

  // .NetProto.CS.C2SVoice.VolumeLevel volume_level = 3;
  void clear_volume_level();
  static const int kVolumeLevelFieldNumber = 3;
  ::NetProto::CS::C2SVoice_VolumeLevel volume_level() const;
  void set_volume_level(::NetProto::CS::C2SVoice_VolumeLevel value);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SVoice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr params_;
  int voice_type_;
  int voice_status_;
  int volume_level_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SVoiceSpeech : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SVoiceSpeech) */ {
 public:
  C2SVoiceSpeech();
  virtual ~C2SVoiceSpeech();

  C2SVoiceSpeech(const C2SVoiceSpeech& from);

  inline C2SVoiceSpeech& operator=(const C2SVoiceSpeech& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SVoiceSpeech& default_instance();

  static inline const C2SVoiceSpeech* internal_default_instance() {
    return reinterpret_cast<const C2SVoiceSpeech*>(
               &_C2SVoiceSpeech_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(C2SVoiceSpeech* other);

  // implements Message ----------------------------------------------

  inline C2SVoiceSpeech* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SVoiceSpeech* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SVoiceSpeech& from);
  void MergeFrom(const C2SVoiceSpeech& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SVoiceSpeech* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SVoiceSpeech)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::NetProto::MsgHead* msg_head_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SAddObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SAddObject) */ {
 public:
  C2SAddObject();
  virtual ~C2SAddObject();

  C2SAddObject(const C2SAddObject& from);

  inline C2SAddObject& operator=(const C2SAddObject& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SAddObject& default_instance();

  static inline const C2SAddObject* internal_default_instance() {
    return reinterpret_cast<const C2SAddObject*>(
               &_C2SAddObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(C2SAddObject* other);

  // implements Message ----------------------------------------------

  inline C2SAddObject* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SAddObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SAddObject& from);
  void MergeFrom(const C2SAddObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SAddObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string obj_uuid = 3;
  void clear_obj_uuid();
  static const int kObjUuidFieldNumber = 3;
  const ::std::string& obj_uuid() const;
  void set_obj_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_uuid(::std::string&& value);
  #endif
  void set_obj_uuid(const char* value);
  void set_obj_uuid(const char* value, size_t size);
  ::std::string* mutable_obj_uuid();
  ::std::string* release_obj_uuid();
  void set_allocated_obj_uuid(::std::string* obj_uuid);

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // .NetProto.PosRot pos_rot = 6;
  bool has_pos_rot() const;
  void clear_pos_rot();
  static const int kPosRotFieldNumber = 6;
  const ::NetProto::PosRot& pos_rot() const;
  ::NetProto::PosRot* mutable_pos_rot();
  ::NetProto::PosRot* release_pos_rot();
  void set_allocated_pos_rot(::NetProto::PosRot* pos_rot);

  // uint32 config_id = 2;
  void clear_config_id();
  static const int kConfigIdFieldNumber = 2;
  ::google::protobuf::uint32 config_id() const;
  void set_config_id(::google::protobuf::uint32 value);

  // uint32 class_id = 4;
  void clear_class_id();
  static const int kClassIdFieldNumber = 4;
  ::google::protobuf::uint32 class_id() const;
  void set_class_id(::google::protobuf::uint32 value);

  // uint32 item_id = 5;
  void clear_item_id();
  static const int kItemIdFieldNumber = 5;
  ::google::protobuf::uint32 item_id() const;
  void set_item_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SAddObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr obj_uuid_;
  ::NetProto::MsgHead* msg_head_;
  ::NetProto::PosRot* pos_rot_;
  ::google::protobuf::uint32 config_id_;
  ::google::protobuf::uint32 class_id_;
  ::google::protobuf::uint32 item_id_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SReplaceObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SReplaceObject) */ {
 public:
  C2SReplaceObject();
  virtual ~C2SReplaceObject();

  C2SReplaceObject(const C2SReplaceObject& from);

  inline C2SReplaceObject& operator=(const C2SReplaceObject& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SReplaceObject& default_instance();

  static inline const C2SReplaceObject* internal_default_instance() {
    return reinterpret_cast<const C2SReplaceObject*>(
               &_C2SReplaceObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(C2SReplaceObject* other);

  // implements Message ----------------------------------------------

  inline C2SReplaceObject* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SReplaceObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SReplaceObject& from);
  void MergeFrom(const C2SReplaceObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SReplaceObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string old_obj_uuid = 2;
  void clear_old_obj_uuid();
  static const int kOldObjUuidFieldNumber = 2;
  const ::std::string& old_obj_uuid() const;
  void set_old_obj_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_old_obj_uuid(::std::string&& value);
  #endif
  void set_old_obj_uuid(const char* value);
  void set_old_obj_uuid(const char* value, size_t size);
  ::std::string* mutable_old_obj_uuid();
  ::std::string* release_old_obj_uuid();
  void set_allocated_old_obj_uuid(::std::string* old_obj_uuid);

  // string new_obj_uuid = 3;
  void clear_new_obj_uuid();
  static const int kNewObjUuidFieldNumber = 3;
  const ::std::string& new_obj_uuid() const;
  void set_new_obj_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_new_obj_uuid(::std::string&& value);
  #endif
  void set_new_obj_uuid(const char* value);
  void set_new_obj_uuid(const char* value, size_t size);
  ::std::string* mutable_new_obj_uuid();
  ::std::string* release_new_obj_uuid();
  void set_allocated_new_obj_uuid(::std::string* new_obj_uuid);

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SReplaceObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr old_obj_uuid_;
  ::google::protobuf::internal::ArenaStringPtr new_obj_uuid_;
  ::NetProto::MsgHead* msg_head_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SDeleteObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SDeleteObject) */ {
 public:
  C2SDeleteObject();
  virtual ~C2SDeleteObject();

  C2SDeleteObject(const C2SDeleteObject& from);

  inline C2SDeleteObject& operator=(const C2SDeleteObject& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SDeleteObject& default_instance();

  static inline const C2SDeleteObject* internal_default_instance() {
    return reinterpret_cast<const C2SDeleteObject*>(
               &_C2SDeleteObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(C2SDeleteObject* other);

  // implements Message ----------------------------------------------

  inline C2SDeleteObject* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SDeleteObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SDeleteObject& from);
  void MergeFrom(const C2SDeleteObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SDeleteObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string obj_uuid = 2;
  void clear_obj_uuid();
  static const int kObjUuidFieldNumber = 2;
  const ::std::string& obj_uuid() const;
  void set_obj_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_uuid(::std::string&& value);
  #endif
  void set_obj_uuid(const char* value);
  void set_obj_uuid(const char* value, size_t size);
  ::std::string* mutable_obj_uuid();
  ::std::string* release_obj_uuid();
  void set_allocated_obj_uuid(::std::string* obj_uuid);

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SDeleteObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr obj_uuid_;
  ::NetProto::MsgHead* msg_head_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SDebugAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.C2SDebugAction) */ {
 public:
  C2SDebugAction();
  virtual ~C2SDebugAction();

  C2SDebugAction(const C2SDebugAction& from);

  inline C2SDebugAction& operator=(const C2SDebugAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SDebugAction& default_instance();

  static inline const C2SDebugAction* internal_default_instance() {
    return reinterpret_cast<const C2SDebugAction*>(
               &_C2SDebugAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(C2SDebugAction* other);

  // implements Message ----------------------------------------------

  inline C2SDebugAction* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SDebugAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SDebugAction& from);
  void MergeFrom(const C2SDebugAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SDebugAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // .NetProto.MsgHead msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  static const int kMsgHeadFieldNumber = 1;
  const ::NetProto::MsgHead& msg_head() const;
  ::NetProto::MsgHead* mutable_msg_head();
  ::NetProto::MsgHead* release_msg_head();
  void set_allocated_msg_head(::NetProto::MsgHead* msg_head);

  // @@protoc_insertion_point(class_scope:NetProto.CS.C2SDebugAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  ::NetProto::MsgHead* msg_head_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObjPosRotChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.ObjPosRotChange) */ {
 public:
  ObjPosRotChange();
  virtual ~ObjPosRotChange();

  ObjPosRotChange(const ObjPosRotChange& from);

  inline ObjPosRotChange& operator=(const ObjPosRotChange& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjPosRotChange& default_instance();

  static inline const ObjPosRotChange* internal_default_instance() {
    return reinterpret_cast<const ObjPosRotChange*>(
               &_ObjPosRotChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(ObjPosRotChange* other);

  // implements Message ----------------------------------------------

  inline ObjPosRotChange* New() const PROTOBUF_FINAL { return New(NULL); }

  ObjPosRotChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ObjPosRotChange& from);
  void MergeFrom(const ObjPosRotChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ObjPosRotChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string obj_uuid = 3;
  void clear_obj_uuid();
  static const int kObjUuidFieldNumber = 3;
  const ::std::string& obj_uuid() const;
  void set_obj_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_uuid(::std::string&& value);
  #endif
  void set_obj_uuid(const char* value);
  void set_obj_uuid(const char* value, size_t size);
  ::std::string* mutable_obj_uuid();
  ::std::string* release_obj_uuid();
  void set_allocated_obj_uuid(::std::string* obj_uuid);

  // .NetProto.PosRot obj_pos_rot = 5;
  bool has_obj_pos_rot() const;
  void clear_obj_pos_rot();
  static const int kObjPosRotFieldNumber = 5;
  const ::NetProto::PosRot& obj_pos_rot() const;
  ::NetProto::PosRot* mutable_obj_pos_rot();
  ::NetProto::PosRot* release_obj_pos_rot();
  void set_allocated_obj_pos_rot(::NetProto::PosRot* obj_pos_rot);

  // bool become_moving = 4;
  void clear_become_moving();
  static const int kBecomeMovingFieldNumber = 4;
  bool become_moving() const;
  void set_become_moving(bool value);

  // @@protoc_insertion_point(class_scope:NetProto.CS.ObjPosRotChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr obj_uuid_;
  ::NetProto::PosRot* obj_pos_rot_;
  bool become_moving_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FetchObj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.FetchObj) */ {
 public:
  FetchObj();
  virtual ~FetchObj();

  FetchObj(const FetchObj& from);

  inline FetchObj& operator=(const FetchObj& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchObj& default_instance();

  static inline const FetchObj* internal_default_instance() {
    return reinterpret_cast<const FetchObj*>(
               &_FetchObj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(FetchObj* other);

  // implements Message ----------------------------------------------

  inline FetchObj* New() const PROTOBUF_FINAL { return New(NULL); }

  FetchObj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FetchObj& from);
  void MergeFrom(const FetchObj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FetchObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string obj_uuid = 1;
  void clear_obj_uuid();
  static const int kObjUuidFieldNumber = 1;
  const ::std::string& obj_uuid() const;
  void set_obj_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_uuid(::std::string&& value);
  #endif
  void set_obj_uuid(const char* value);
  void set_obj_uuid(const char* value, size_t size);
  ::std::string* mutable_obj_uuid();
  ::std::string* release_obj_uuid();
  void set_allocated_obj_uuid(::std::string* obj_uuid);

  // string location_uuid = 2;
  void clear_location_uuid();
  static const int kLocationUuidFieldNumber = 2;
  const ::std::string& location_uuid() const;
  void set_location_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_location_uuid(::std::string&& value);
  #endif
  void set_location_uuid(const char* value);
  void set_location_uuid(const char* value, size_t size);
  ::std::string* mutable_location_uuid();
  ::std::string* release_location_uuid();
  void set_allocated_location_uuid(::std::string* location_uuid);

  // @@protoc_insertion_point(class_scope:NetProto.CS.FetchObj)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr obj_uuid_;
  ::google::protobuf::internal::ArenaStringPtr location_uuid_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutObj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.PutObj) */ {
 public:
  PutObj();
  virtual ~PutObj();

  PutObj(const PutObj& from);

  inline PutObj& operator=(const PutObj& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutObj& default_instance();

  static inline const PutObj* internal_default_instance() {
    return reinterpret_cast<const PutObj*>(
               &_PutObj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(PutObj* other);

  // implements Message ----------------------------------------------

  inline PutObj* New() const PROTOBUF_FINAL { return New(NULL); }

  PutObj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PutObj& from);
  void MergeFrom(const PutObj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PutObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string obj_uuid = 1;
  void clear_obj_uuid();
  static const int kObjUuidFieldNumber = 1;
  const ::std::string& obj_uuid() const;
  void set_obj_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_uuid(::std::string&& value);
  #endif
  void set_obj_uuid(const char* value);
  void set_obj_uuid(const char* value, size_t size);
  ::std::string* mutable_obj_uuid();
  ::std::string* release_obj_uuid();
  void set_allocated_obj_uuid(::std::string* obj_uuid);

  // string location_uuid = 2;
  void clear_location_uuid();
  static const int kLocationUuidFieldNumber = 2;
  const ::std::string& location_uuid() const;
  void set_location_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_location_uuid(::std::string&& value);
  #endif
  void set_location_uuid(const char* value);
  void set_location_uuid(const char* value, size_t size);
  ::std::string* mutable_location_uuid();
  ::std::string* release_location_uuid();
  void set_allocated_location_uuid(::std::string* location_uuid);

  // @@protoc_insertion_point(class_scope:NetProto.CS.PutObj)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr obj_uuid_;
  ::google::protobuf::internal::ArenaStringPtr location_uuid_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OperateObj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.OperateObj) */ {
 public:
  OperateObj();
  virtual ~OperateObj();

  OperateObj(const OperateObj& from);

  inline OperateObj& operator=(const OperateObj& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperateObj& default_instance();

  static inline const OperateObj* internal_default_instance() {
    return reinterpret_cast<const OperateObj*>(
               &_OperateObj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(OperateObj* other);

  // implements Message ----------------------------------------------

  inline OperateObj* New() const PROTOBUF_FINAL { return New(NULL); }

  OperateObj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OperateObj& from);
  void MergeFrom(const OperateObj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OperateObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NetProto.KeyValuePair params = 3;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::NetProto::KeyValuePair& params(int index) const;
  ::NetProto::KeyValuePair* mutable_params(int index);
  ::NetProto::KeyValuePair* add_params();
  ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair >*
      mutable_params();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair >&
      params() const;

  // string oper_type = 1;
  void clear_oper_type();
  static const int kOperTypeFieldNumber = 1;
  const ::std::string& oper_type() const;
  void set_oper_type(const ::std::string& value);
  #if LANG_CXX11
  void set_oper_type(::std::string&& value);
  #endif
  void set_oper_type(const char* value);
  void set_oper_type(const char* value, size_t size);
  ::std::string* mutable_oper_type();
  ::std::string* release_oper_type();
  void set_allocated_oper_type(::std::string* oper_type);

  // string obj_uuid = 2;
  void clear_obj_uuid();
  static const int kObjUuidFieldNumber = 2;
  const ::std::string& obj_uuid() const;
  void set_obj_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_uuid(::std::string&& value);
  #endif
  void set_obj_uuid(const char* value);
  void set_obj_uuid(const char* value, size_t size);
  ::std::string* mutable_obj_uuid();
  ::std::string* release_obj_uuid();
  void set_allocated_obj_uuid(::std::string* obj_uuid);

  // @@protoc_insertion_point(class_scope:NetProto.CS.OperateObj)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair > params_;
  ::google::protobuf::internal::ArenaStringPtr oper_type_;
  ::google::protobuf::internal::ArenaStringPtr obj_uuid_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelfAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CS.SelfAction) */ {
 public:
  SelfAction();
  virtual ~SelfAction();

  SelfAction(const SelfAction& from);

  inline SelfAction& operator=(const SelfAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelfAction& default_instance();

  static inline const SelfAction* internal_default_instance() {
    return reinterpret_cast<const SelfAction*>(
               &_SelfAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(SelfAction* other);

  // implements Message ----------------------------------------------

  inline SelfAction* New() const PROTOBUF_FINAL { return New(NULL); }

  SelfAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelfAction& from);
  void MergeFrom(const SelfAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelfAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NetProto.KeyValuePair params = 2;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::NetProto::KeyValuePair& params(int index) const;
  ::NetProto::KeyValuePair* mutable_params(int index);
  ::NetProto::KeyValuePair* add_params();
  ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair >*
      mutable_params();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair >&
      params() const;

  // string action = 1;
  void clear_action();
  static const int kActionFieldNumber = 1;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // @@protoc_insertion_point(class_scope:NetProto.CS.SelfAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair > params_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  mutable int _cached_size_;
  friend struct protobuf_cs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CSCommonMsg

// .NetProto.MsgHead head = 1;
inline bool CSCommonMsg::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void CSCommonMsg::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& CSCommonMsg::head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.CSCommonMsg.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* CSCommonMsg::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.CSCommonMsg.head)
  return head_;
}
inline ::NetProto::MsgHead* CSCommonMsg::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.CSCommonMsg.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void CSCommonMsg::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.CSCommonMsg.head)
}

// -------------------------------------------------------------------

// NotifyClientRobotAttrChange_Attr

// uint32 field = 1;
inline void NotifyClientRobotAttrChange_Attr::clear_field() {
  field_ = 0u;
}
inline ::google::protobuf::uint32 NotifyClientRobotAttrChange_Attr::field() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.NotifyClientRobotAttrChange.Attr.field)
  return field_;
}
inline void NotifyClientRobotAttrChange_Attr::set_field(::google::protobuf::uint32 value) {
  
  field_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.NotifyClientRobotAttrChange.Attr.field)
}

// uint32 value = 2;
inline void NotifyClientRobotAttrChange_Attr::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 NotifyClientRobotAttrChange_Attr::value() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.NotifyClientRobotAttrChange.Attr.value)
  return value_;
}
inline void NotifyClientRobotAttrChange_Attr::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.NotifyClientRobotAttrChange.Attr.value)
}

// uint32 ts = 3;
inline void NotifyClientRobotAttrChange_Attr::clear_ts() {
  ts_ = 0u;
}
inline ::google::protobuf::uint32 NotifyClientRobotAttrChange_Attr::ts() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.NotifyClientRobotAttrChange.Attr.ts)
  return ts_;
}
inline void NotifyClientRobotAttrChange_Attr::set_ts(::google::protobuf::uint32 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.NotifyClientRobotAttrChange.Attr.ts)
}

// -------------------------------------------------------------------

// NotifyClientRobotAttrChange

// .NetProto.MsgHead head = 1;
inline bool NotifyClientRobotAttrChange::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void NotifyClientRobotAttrChange::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& NotifyClientRobotAttrChange::head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.NotifyClientRobotAttrChange.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* NotifyClientRobotAttrChange::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.NotifyClientRobotAttrChange.head)
  return head_;
}
inline ::NetProto::MsgHead* NotifyClientRobotAttrChange::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.NotifyClientRobotAttrChange.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void NotifyClientRobotAttrChange::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.NotifyClientRobotAttrChange.head)
}

// repeated .NetProto.CS.NotifyClientRobotAttrChange.Attr all_attr = 2;
inline int NotifyClientRobotAttrChange::all_attr_size() const {
  return all_attr_.size();
}
inline void NotifyClientRobotAttrChange::clear_all_attr() {
  all_attr_.Clear();
}
inline const ::NetProto::CS::NotifyClientRobotAttrChange_Attr& NotifyClientRobotAttrChange::all_attr(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.CS.NotifyClientRobotAttrChange.all_attr)
  return all_attr_.Get(index);
}
inline ::NetProto::CS::NotifyClientRobotAttrChange_Attr* NotifyClientRobotAttrChange::mutable_all_attr(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.CS.NotifyClientRobotAttrChange.all_attr)
  return all_attr_.Mutable(index);
}
inline ::NetProto::CS::NotifyClientRobotAttrChange_Attr* NotifyClientRobotAttrChange::add_all_attr() {
  // @@protoc_insertion_point(field_add:NetProto.CS.NotifyClientRobotAttrChange.all_attr)
  return all_attr_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::CS::NotifyClientRobotAttrChange_Attr >*
NotifyClientRobotAttrChange::mutable_all_attr() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.CS.NotifyClientRobotAttrChange.all_attr)
  return &all_attr_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::CS::NotifyClientRobotAttrChange_Attr >&
NotifyClientRobotAttrChange::all_attr() const {
  // @@protoc_insertion_point(field_list:NetProto.CS.NotifyClientRobotAttrChange.all_attr)
  return all_attr_;
}

// -------------------------------------------------------------------

// C2SRegisterReq

// string account_name = 1;
inline void C2SRegisterReq::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SRegisterReq::account_name() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SRegisterReq.account_name)
  return account_name_.GetNoArena();
}
inline void C2SRegisterReq::set_account_name(const ::std::string& value) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SRegisterReq.account_name)
}
#if LANG_CXX11
inline void C2SRegisterReq::set_account_name(::std::string&& value) {
  
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SRegisterReq.account_name)
}
#endif
inline void C2SRegisterReq::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SRegisterReq.account_name)
}
inline void C2SRegisterReq::set_account_name(const char* value, size_t size) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SRegisterReq.account_name)
}
inline ::std::string* C2SRegisterReq::mutable_account_name() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SRegisterReq.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SRegisterReq::release_account_name() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SRegisterReq.account_name)
  
  return account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SRegisterReq::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    
  } else {
    
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SRegisterReq.account_name)
}

// string password = 2;
inline void C2SRegisterReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SRegisterReq::password() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SRegisterReq.password)
  return password_.GetNoArena();
}
inline void C2SRegisterReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SRegisterReq.password)
}
#if LANG_CXX11
inline void C2SRegisterReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SRegisterReq.password)
}
#endif
inline void C2SRegisterReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SRegisterReq.password)
}
inline void C2SRegisterReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SRegisterReq.password)
}
inline ::std::string* C2SRegisterReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SRegisterReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SRegisterReq::release_password() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SRegisterReq.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SRegisterReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SRegisterReq.password)
}

// -------------------------------------------------------------------

// S2CRegisterResp

// bool success = 1;
inline void S2CRegisterResp::clear_success() {
  success_ = false;
}
inline bool S2CRegisterResp::success() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CRegisterResp.success)
  return success_;
}
inline void S2CRegisterResp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.S2CRegisterResp.success)
}

// string error = 2;
inline void S2CRegisterResp::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2CRegisterResp::error() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CRegisterResp.error)
  return error_.GetNoArena();
}
inline void S2CRegisterResp::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.S2CRegisterResp.error)
}
#if LANG_CXX11
inline void S2CRegisterResp::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.S2CRegisterResp.error)
}
#endif
inline void S2CRegisterResp::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.S2CRegisterResp.error)
}
inline void S2CRegisterResp::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.S2CRegisterResp.error)
}
inline ::std::string* S2CRegisterResp::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.S2CRegisterResp.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2CRegisterResp::release_error() {
  // @@protoc_insertion_point(field_release:NetProto.CS.S2CRegisterResp.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2CRegisterResp::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.S2CRegisterResp.error)
}

// -------------------------------------------------------------------

// C2SLoginReq

// string account_name = 1;
inline void C2SLoginReq::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SLoginReq::account_name() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SLoginReq.account_name)
  return account_name_.GetNoArena();
}
inline void C2SLoginReq::set_account_name(const ::std::string& value) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SLoginReq.account_name)
}
#if LANG_CXX11
inline void C2SLoginReq::set_account_name(::std::string&& value) {
  
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SLoginReq.account_name)
}
#endif
inline void C2SLoginReq::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SLoginReq.account_name)
}
inline void C2SLoginReq::set_account_name(const char* value, size_t size) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SLoginReq.account_name)
}
inline ::std::string* C2SLoginReq::mutable_account_name() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SLoginReq.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SLoginReq::release_account_name() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SLoginReq.account_name)
  
  return account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SLoginReq::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    
  } else {
    
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SLoginReq.account_name)
}

// string password = 2;
inline void C2SLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SLoginReq::password() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SLoginReq.password)
  return password_.GetNoArena();
}
inline void C2SLoginReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SLoginReq.password)
}
#if LANG_CXX11
inline void C2SLoginReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SLoginReq.password)
}
#endif
inline void C2SLoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SLoginReq.password)
}
inline void C2SLoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SLoginReq.password)
}
inline ::std::string* C2SLoginReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SLoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SLoginReq.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SLoginReq.password)
}

// -------------------------------------------------------------------

// S2CLoginResp

// bool success = 1;
inline void S2CLoginResp::clear_success() {
  success_ = false;
}
inline bool S2CLoginResp::success() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CLoginResp.success)
  return success_;
}
inline void S2CLoginResp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.S2CLoginResp.success)
}

// string error = 2;
inline void S2CLoginResp::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2CLoginResp::error() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CLoginResp.error)
  return error_.GetNoArena();
}
inline void S2CLoginResp::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.S2CLoginResp.error)
}
#if LANG_CXX11
inline void S2CLoginResp::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.S2CLoginResp.error)
}
#endif
inline void S2CLoginResp::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.S2CLoginResp.error)
}
inline void S2CLoginResp::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.S2CLoginResp.error)
}
inline ::std::string* S2CLoginResp::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.S2CLoginResp.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2CLoginResp::release_error() {
  // @@protoc_insertion_point(field_release:NetProto.CS.S2CLoginResp.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2CLoginResp::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.S2CLoginResp.error)
}

// .NetProto.RobotInfo robotInfo = 3;
inline bool S2CLoginResp::has_robotinfo() const {
  return this != internal_default_instance() && robotinfo_ != NULL;
}
inline void S2CLoginResp::clear_robotinfo() {
  if (GetArenaNoVirtual() == NULL && robotinfo_ != NULL) delete robotinfo_;
  robotinfo_ = NULL;
}
inline const ::NetProto::RobotInfo& S2CLoginResp::robotinfo() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CLoginResp.robotInfo)
  return robotinfo_ != NULL ? *robotinfo_
                         : *::NetProto::RobotInfo::internal_default_instance();
}
inline ::NetProto::RobotInfo* S2CLoginResp::mutable_robotinfo() {
  
  if (robotinfo_ == NULL) {
    robotinfo_ = new ::NetProto::RobotInfo;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.S2CLoginResp.robotInfo)
  return robotinfo_;
}
inline ::NetProto::RobotInfo* S2CLoginResp::release_robotinfo() {
  // @@protoc_insertion_point(field_release:NetProto.CS.S2CLoginResp.robotInfo)
  
  ::NetProto::RobotInfo* temp = robotinfo_;
  robotinfo_ = NULL;
  return temp;
}
inline void S2CLoginResp::set_allocated_robotinfo(::NetProto::RobotInfo* robotinfo) {
  delete robotinfo_;
  robotinfo_ = robotinfo;
  if (robotinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.S2CLoginResp.robotInfo)
}

// -------------------------------------------------------------------

// S2CRoleAction

// .NetProto.MsgHead msg_head = 1;
inline bool S2CRoleAction::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void S2CRoleAction::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& S2CRoleAction::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CRoleAction.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* S2CRoleAction::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.S2CRoleAction.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* S2CRoleAction::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.S2CRoleAction.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void S2CRoleAction::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.S2CRoleAction.msg_head)
}

// uint32 action_id = 2;
inline void S2CRoleAction::clear_action_id() {
  action_id_ = 0u;
}
inline ::google::protobuf::uint32 S2CRoleAction::action_id() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CRoleAction.action_id)
  return action_id_;
}
inline void S2CRoleAction::set_action_id(::google::protobuf::uint32 value) {
  
  action_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.S2CRoleAction.action_id)
}

// .NetProto.CS.S2CRoleAction.Type type = 3;
inline void S2CRoleAction::clear_type() {
  type_ = 0;
}
inline ::NetProto::CS::S2CRoleAction_Type S2CRoleAction::type() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CRoleAction.type)
  return static_cast< ::NetProto::CS::S2CRoleAction_Type >(type_);
}
inline void S2CRoleAction::set_type(::NetProto::CS::S2CRoleAction_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.S2CRoleAction.type)
}

// .NetProto.CS.FetchObj fetch_obj = 4;
inline bool S2CRoleAction::has_fetch_obj() const {
  return this != internal_default_instance() && fetch_obj_ != NULL;
}
inline void S2CRoleAction::clear_fetch_obj() {
  if (GetArenaNoVirtual() == NULL && fetch_obj_ != NULL) delete fetch_obj_;
  fetch_obj_ = NULL;
}
inline const ::NetProto::CS::FetchObj& S2CRoleAction::fetch_obj() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CRoleAction.fetch_obj)
  return fetch_obj_ != NULL ? *fetch_obj_
                         : *::NetProto::CS::FetchObj::internal_default_instance();
}
inline ::NetProto::CS::FetchObj* S2CRoleAction::mutable_fetch_obj() {
  
  if (fetch_obj_ == NULL) {
    fetch_obj_ = new ::NetProto::CS::FetchObj;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.S2CRoleAction.fetch_obj)
  return fetch_obj_;
}
inline ::NetProto::CS::FetchObj* S2CRoleAction::release_fetch_obj() {
  // @@protoc_insertion_point(field_release:NetProto.CS.S2CRoleAction.fetch_obj)
  
  ::NetProto::CS::FetchObj* temp = fetch_obj_;
  fetch_obj_ = NULL;
  return temp;
}
inline void S2CRoleAction::set_allocated_fetch_obj(::NetProto::CS::FetchObj* fetch_obj) {
  delete fetch_obj_;
  fetch_obj_ = fetch_obj;
  if (fetch_obj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.S2CRoleAction.fetch_obj)
}

// .NetProto.CS.PutObj put_obj = 5;
inline bool S2CRoleAction::has_put_obj() const {
  return this != internal_default_instance() && put_obj_ != NULL;
}
inline void S2CRoleAction::clear_put_obj() {
  if (GetArenaNoVirtual() == NULL && put_obj_ != NULL) delete put_obj_;
  put_obj_ = NULL;
}
inline const ::NetProto::CS::PutObj& S2CRoleAction::put_obj() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CRoleAction.put_obj)
  return put_obj_ != NULL ? *put_obj_
                         : *::NetProto::CS::PutObj::internal_default_instance();
}
inline ::NetProto::CS::PutObj* S2CRoleAction::mutable_put_obj() {
  
  if (put_obj_ == NULL) {
    put_obj_ = new ::NetProto::CS::PutObj;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.S2CRoleAction.put_obj)
  return put_obj_;
}
inline ::NetProto::CS::PutObj* S2CRoleAction::release_put_obj() {
  // @@protoc_insertion_point(field_release:NetProto.CS.S2CRoleAction.put_obj)
  
  ::NetProto::CS::PutObj* temp = put_obj_;
  put_obj_ = NULL;
  return temp;
}
inline void S2CRoleAction::set_allocated_put_obj(::NetProto::CS::PutObj* put_obj) {
  delete put_obj_;
  put_obj_ = put_obj;
  if (put_obj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.S2CRoleAction.put_obj)
}

// .NetProto.CS.OperateObj operate_obj = 6;
inline bool S2CRoleAction::has_operate_obj() const {
  return this != internal_default_instance() && operate_obj_ != NULL;
}
inline void S2CRoleAction::clear_operate_obj() {
  if (GetArenaNoVirtual() == NULL && operate_obj_ != NULL) delete operate_obj_;
  operate_obj_ = NULL;
}
inline const ::NetProto::CS::OperateObj& S2CRoleAction::operate_obj() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CRoleAction.operate_obj)
  return operate_obj_ != NULL ? *operate_obj_
                         : *::NetProto::CS::OperateObj::internal_default_instance();
}
inline ::NetProto::CS::OperateObj* S2CRoleAction::mutable_operate_obj() {
  
  if (operate_obj_ == NULL) {
    operate_obj_ = new ::NetProto::CS::OperateObj;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.S2CRoleAction.operate_obj)
  return operate_obj_;
}
inline ::NetProto::CS::OperateObj* S2CRoleAction::release_operate_obj() {
  // @@protoc_insertion_point(field_release:NetProto.CS.S2CRoleAction.operate_obj)
  
  ::NetProto::CS::OperateObj* temp = operate_obj_;
  operate_obj_ = NULL;
  return temp;
}
inline void S2CRoleAction::set_allocated_operate_obj(::NetProto::CS::OperateObj* operate_obj) {
  delete operate_obj_;
  operate_obj_ = operate_obj;
  if (operate_obj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.S2CRoleAction.operate_obj)
}

// .NetProto.CS.SelfAction self_action = 7;
inline bool S2CRoleAction::has_self_action() const {
  return this != internal_default_instance() && self_action_ != NULL;
}
inline void S2CRoleAction::clear_self_action() {
  if (GetArenaNoVirtual() == NULL && self_action_ != NULL) delete self_action_;
  self_action_ = NULL;
}
inline const ::NetProto::CS::SelfAction& S2CRoleAction::self_action() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CRoleAction.self_action)
  return self_action_ != NULL ? *self_action_
                         : *::NetProto::CS::SelfAction::internal_default_instance();
}
inline ::NetProto::CS::SelfAction* S2CRoleAction::mutable_self_action() {
  
  if (self_action_ == NULL) {
    self_action_ = new ::NetProto::CS::SelfAction;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.S2CRoleAction.self_action)
  return self_action_;
}
inline ::NetProto::CS::SelfAction* S2CRoleAction::release_self_action() {
  // @@protoc_insertion_point(field_release:NetProto.CS.S2CRoleAction.self_action)
  
  ::NetProto::CS::SelfAction* temp = self_action_;
  self_action_ = NULL;
  return temp;
}
inline void S2CRoleAction::set_allocated_self_action(::NetProto::CS::SelfAction* self_action) {
  delete self_action_;
  self_action_ = self_action;
  if (self_action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.S2CRoleAction.self_action)
}

// .google.protobuf.Any cached_start_data = 8;
inline bool S2CRoleAction::has_cached_start_data() const {
  return this != internal_default_instance() && cached_start_data_ != NULL;
}
inline void S2CRoleAction::clear_cached_start_data() {
  if (GetArenaNoVirtual() == NULL && cached_start_data_ != NULL) delete cached_start_data_;
  cached_start_data_ = NULL;
}
inline const ::google::protobuf::Any& S2CRoleAction::cached_start_data() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CRoleAction.cached_start_data)
  return cached_start_data_ != NULL ? *cached_start_data_
                         : *::google::protobuf::Any::internal_default_instance();
}
inline ::google::protobuf::Any* S2CRoleAction::mutable_cached_start_data() {
  
  if (cached_start_data_ == NULL) {
    cached_start_data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.S2CRoleAction.cached_start_data)
  return cached_start_data_;
}
inline ::google::protobuf::Any* S2CRoleAction::release_cached_start_data() {
  // @@protoc_insertion_point(field_release:NetProto.CS.S2CRoleAction.cached_start_data)
  
  ::google::protobuf::Any* temp = cached_start_data_;
  cached_start_data_ = NULL;
  return temp;
}
inline void S2CRoleAction::set_allocated_cached_start_data(::google::protobuf::Any* cached_start_data) {
  delete cached_start_data_;
  cached_start_data_ = cached_start_data;
  if (cached_start_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.S2CRoleAction.cached_start_data)
}

// .google.protobuf.Any cached_finish_data = 9;
inline bool S2CRoleAction::has_cached_finish_data() const {
  return this != internal_default_instance() && cached_finish_data_ != NULL;
}
inline void S2CRoleAction::clear_cached_finish_data() {
  if (GetArenaNoVirtual() == NULL && cached_finish_data_ != NULL) delete cached_finish_data_;
  cached_finish_data_ = NULL;
}
inline const ::google::protobuf::Any& S2CRoleAction::cached_finish_data() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CRoleAction.cached_finish_data)
  return cached_finish_data_ != NULL ? *cached_finish_data_
                         : *::google::protobuf::Any::internal_default_instance();
}
inline ::google::protobuf::Any* S2CRoleAction::mutable_cached_finish_data() {
  
  if (cached_finish_data_ == NULL) {
    cached_finish_data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.S2CRoleAction.cached_finish_data)
  return cached_finish_data_;
}
inline ::google::protobuf::Any* S2CRoleAction::release_cached_finish_data() {
  // @@protoc_insertion_point(field_release:NetProto.CS.S2CRoleAction.cached_finish_data)
  
  ::google::protobuf::Any* temp = cached_finish_data_;
  cached_finish_data_ = NULL;
  return temp;
}
inline void S2CRoleAction::set_allocated_cached_finish_data(::google::protobuf::Any* cached_finish_data) {
  delete cached_finish_data_;
  cached_finish_data_ = cached_finish_data;
  if (cached_finish_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.S2CRoleAction.cached_finish_data)
}

// -------------------------------------------------------------------

// S2CVoiceSpeech

// .NetProto.MsgHead msg_head = 1;
inline bool S2CVoiceSpeech::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void S2CVoiceSpeech::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& S2CVoiceSpeech::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CVoiceSpeech.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* S2CVoiceSpeech::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.S2CVoiceSpeech.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* S2CVoiceSpeech::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.S2CVoiceSpeech.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void S2CVoiceSpeech::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.S2CVoiceSpeech.msg_head)
}

// string id = 2;
inline void S2CVoiceSpeech::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2CVoiceSpeech::id() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CVoiceSpeech.id)
  return id_.GetNoArena();
}
inline void S2CVoiceSpeech::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.S2CVoiceSpeech.id)
}
#if LANG_CXX11
inline void S2CVoiceSpeech::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.S2CVoiceSpeech.id)
}
#endif
inline void S2CVoiceSpeech::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.S2CVoiceSpeech.id)
}
inline void S2CVoiceSpeech::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.S2CVoiceSpeech.id)
}
inline ::std::string* S2CVoiceSpeech::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.S2CVoiceSpeech.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2CVoiceSpeech::release_id() {
  // @@protoc_insertion_point(field_release:NetProto.CS.S2CVoiceSpeech.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2CVoiceSpeech::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.S2CVoiceSpeech.id)
}

// string text = 3;
inline void S2CVoiceSpeech::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2CVoiceSpeech::text() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.S2CVoiceSpeech.text)
  return text_.GetNoArena();
}
inline void S2CVoiceSpeech::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.S2CVoiceSpeech.text)
}
#if LANG_CXX11
inline void S2CVoiceSpeech::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.S2CVoiceSpeech.text)
}
#endif
inline void S2CVoiceSpeech::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.S2CVoiceSpeech.text)
}
inline void S2CVoiceSpeech::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.S2CVoiceSpeech.text)
}
inline ::std::string* S2CVoiceSpeech::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.S2CVoiceSpeech.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2CVoiceSpeech::release_text() {
  // @@protoc_insertion_point(field_release:NetProto.CS.S2CVoiceSpeech.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2CVoiceSpeech::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.S2CVoiceSpeech.text)
}

// -------------------------------------------------------------------

// C2SWalkFinish

// .NetProto.MsgHead msg_head = 1;
inline bool C2SWalkFinish::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void C2SWalkFinish::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& C2SWalkFinish::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SWalkFinish.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* C2SWalkFinish::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SWalkFinish.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* C2SWalkFinish::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SWalkFinish.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void C2SWalkFinish::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SWalkFinish.msg_head)
}

// .NetProto.Vector3 role_pos = 3;
inline bool C2SWalkFinish::has_role_pos() const {
  return this != internal_default_instance() && role_pos_ != NULL;
}
inline void C2SWalkFinish::clear_role_pos() {
  if (GetArenaNoVirtual() == NULL && role_pos_ != NULL) delete role_pos_;
  role_pos_ = NULL;
}
inline const ::NetProto::Vector3& C2SWalkFinish::role_pos() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SWalkFinish.role_pos)
  return role_pos_ != NULL ? *role_pos_
                         : *::NetProto::Vector3::internal_default_instance();
}
inline ::NetProto::Vector3* C2SWalkFinish::mutable_role_pos() {
  
  if (role_pos_ == NULL) {
    role_pos_ = new ::NetProto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SWalkFinish.role_pos)
  return role_pos_;
}
inline ::NetProto::Vector3* C2SWalkFinish::release_role_pos() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SWalkFinish.role_pos)
  
  ::NetProto::Vector3* temp = role_pos_;
  role_pos_ = NULL;
  return temp;
}
inline void C2SWalkFinish::set_allocated_role_pos(::NetProto::Vector3* role_pos) {
  delete role_pos_;
  role_pos_ = role_pos;
  if (role_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SWalkFinish.role_pos)
}

// .NetProto.Quaternion role_rot = 4;
inline bool C2SWalkFinish::has_role_rot() const {
  return this != internal_default_instance() && role_rot_ != NULL;
}
inline void C2SWalkFinish::clear_role_rot() {
  if (GetArenaNoVirtual() == NULL && role_rot_ != NULL) delete role_rot_;
  role_rot_ = NULL;
}
inline const ::NetProto::Quaternion& C2SWalkFinish::role_rot() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SWalkFinish.role_rot)
  return role_rot_ != NULL ? *role_rot_
                         : *::NetProto::Quaternion::internal_default_instance();
}
inline ::NetProto::Quaternion* C2SWalkFinish::mutable_role_rot() {
  
  if (role_rot_ == NULL) {
    role_rot_ = new ::NetProto::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SWalkFinish.role_rot)
  return role_rot_;
}
inline ::NetProto::Quaternion* C2SWalkFinish::release_role_rot() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SWalkFinish.role_rot)
  
  ::NetProto::Quaternion* temp = role_rot_;
  role_rot_ = NULL;
  return temp;
}
inline void C2SWalkFinish::set_allocated_role_rot(::NetProto::Quaternion* role_rot) {
  delete role_rot_;
  role_rot_ = role_rot;
  if (role_rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SWalkFinish.role_rot)
}

// repeated .NetProto.ObjPosRelation relation = 5;
inline int C2SWalkFinish::relation_size() const {
  return relation_.size();
}
inline void C2SWalkFinish::clear_relation() {
  relation_.Clear();
}
inline const ::NetProto::ObjPosRelation& C2SWalkFinish::relation(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SWalkFinish.relation)
  return relation_.Get(index);
}
inline ::NetProto::ObjPosRelation* C2SWalkFinish::mutable_relation(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SWalkFinish.relation)
  return relation_.Mutable(index);
}
inline ::NetProto::ObjPosRelation* C2SWalkFinish::add_relation() {
  // @@protoc_insertion_point(field_add:NetProto.CS.C2SWalkFinish.relation)
  return relation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >*
C2SWalkFinish::mutable_relation() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.CS.C2SWalkFinish.relation)
  return &relation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >&
C2SWalkFinish::relation() const {
  // @@protoc_insertion_point(field_list:NetProto.CS.C2SWalkFinish.relation)
  return relation_;
}

// -------------------------------------------------------------------

// C2SActionStatus

// .NetProto.MsgHead msg_head = 1;
inline bool C2SActionStatus::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void C2SActionStatus::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& C2SActionStatus::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SActionStatus.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* C2SActionStatus::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SActionStatus.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* C2SActionStatus::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SActionStatus.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void C2SActionStatus::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SActionStatus.msg_head)
}

// .NetProto.CS.C2SActionStatus.Type type = 2;
inline void C2SActionStatus::clear_type() {
  type_ = 0;
}
inline ::NetProto::CS::C2SActionStatus_Type C2SActionStatus::type() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SActionStatus.type)
  return static_cast< ::NetProto::CS::C2SActionStatus_Type >(type_);
}
inline void C2SActionStatus::set_type(::NetProto::CS::C2SActionStatus_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SActionStatus.type)
}

// uint32 action_id = 3;
inline void C2SActionStatus::clear_action_id() {
  action_id_ = 0u;
}
inline ::google::protobuf::uint32 C2SActionStatus::action_id() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SActionStatus.action_id)
  return action_id_;
}
inline void C2SActionStatus::set_action_id(::google::protobuf::uint32 value) {
  
  action_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SActionStatus.action_id)
}

// .google.protobuf.Any cached_data = 4;
inline bool C2SActionStatus::has_cached_data() const {
  return this != internal_default_instance() && cached_data_ != NULL;
}
inline void C2SActionStatus::clear_cached_data() {
  if (GetArenaNoVirtual() == NULL && cached_data_ != NULL) delete cached_data_;
  cached_data_ = NULL;
}
inline const ::google::protobuf::Any& C2SActionStatus::cached_data() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SActionStatus.cached_data)
  return cached_data_ != NULL ? *cached_data_
                         : *::google::protobuf::Any::internal_default_instance();
}
inline ::google::protobuf::Any* C2SActionStatus::mutable_cached_data() {
  
  if (cached_data_ == NULL) {
    cached_data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SActionStatus.cached_data)
  return cached_data_;
}
inline ::google::protobuf::Any* C2SActionStatus::release_cached_data() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SActionStatus.cached_data)
  
  ::google::protobuf::Any* temp = cached_data_;
  cached_data_ = NULL;
  return temp;
}
inline void C2SActionStatus::set_allocated_cached_data(::google::protobuf::Any* cached_data) {
  delete cached_data_;
  cached_data_ = cached_data;
  if (cached_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SActionStatus.cached_data)
}

// -------------------------------------------------------------------

// C2STouchEvent

// .NetProto.MsgHead msg_head = 1;
inline bool C2STouchEvent::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void C2STouchEvent::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& C2STouchEvent::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2STouchEvent.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* C2STouchEvent::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2STouchEvent.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* C2STouchEvent::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2STouchEvent.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void C2STouchEvent::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2STouchEvent.msg_head)
}

// .NetProto.CS.BodyPart body_part = 2;
inline void C2STouchEvent::clear_body_part() {
  body_part_ = 0;
}
inline ::NetProto::CS::BodyPart C2STouchEvent::body_part() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2STouchEvent.body_part)
  return static_cast< ::NetProto::CS::BodyPart >(body_part_);
}
inline void C2STouchEvent::set_body_part(::NetProto::CS::BodyPart value) {
  
  body_part_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.C2STouchEvent.body_part)
}

// string obj_uuid = 3;
inline void C2STouchEvent::clear_obj_uuid() {
  obj_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2STouchEvent::obj_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2STouchEvent.obj_uuid)
  return obj_uuid_.GetNoArena();
}
inline void C2STouchEvent::set_obj_uuid(const ::std::string& value) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2STouchEvent.obj_uuid)
}
#if LANG_CXX11
inline void C2STouchEvent::set_obj_uuid(::std::string&& value) {
  
  obj_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2STouchEvent.obj_uuid)
}
#endif
inline void C2STouchEvent::set_obj_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2STouchEvent.obj_uuid)
}
inline void C2STouchEvent::set_obj_uuid(const char* value, size_t size) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2STouchEvent.obj_uuid)
}
inline ::std::string* C2STouchEvent::mutable_obj_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2STouchEvent.obj_uuid)
  return obj_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2STouchEvent::release_obj_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2STouchEvent.obj_uuid)
  
  return obj_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2STouchEvent::set_allocated_obj_uuid(::std::string* obj_uuid) {
  if (obj_uuid != NULL) {
    
  } else {
    
  }
  obj_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2STouchEvent.obj_uuid)
}

// -------------------------------------------------------------------

// C2SPlaceEvent

// .NetProto.MsgHead msg_head = 1;
inline bool C2SPlaceEvent::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void C2SPlaceEvent::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& C2SPlaceEvent::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SPlaceEvent.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* C2SPlaceEvent::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SPlaceEvent.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* C2SPlaceEvent::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SPlaceEvent.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void C2SPlaceEvent::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SPlaceEvent.msg_head)
}

// string obj_uuid = 3;
inline void C2SPlaceEvent::clear_obj_uuid() {
  obj_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SPlaceEvent::obj_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SPlaceEvent.obj_uuid)
  return obj_uuid_.GetNoArena();
}
inline void C2SPlaceEvent::set_obj_uuid(const ::std::string& value) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SPlaceEvent.obj_uuid)
}
#if LANG_CXX11
inline void C2SPlaceEvent::set_obj_uuid(::std::string&& value) {
  
  obj_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SPlaceEvent.obj_uuid)
}
#endif
inline void C2SPlaceEvent::set_obj_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SPlaceEvent.obj_uuid)
}
inline void C2SPlaceEvent::set_obj_uuid(const char* value, size_t size) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SPlaceEvent.obj_uuid)
}
inline ::std::string* C2SPlaceEvent::mutable_obj_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SPlaceEvent.obj_uuid)
  return obj_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SPlaceEvent::release_obj_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SPlaceEvent.obj_uuid)
  
  return obj_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SPlaceEvent::set_allocated_obj_uuid(::std::string* obj_uuid) {
  if (obj_uuid != NULL) {
    
  } else {
    
  }
  obj_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SPlaceEvent.obj_uuid)
}

// string location_uuid = 4;
inline void C2SPlaceEvent::clear_location_uuid() {
  location_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SPlaceEvent::location_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SPlaceEvent.location_uuid)
  return location_uuid_.GetNoArena();
}
inline void C2SPlaceEvent::set_location_uuid(const ::std::string& value) {
  
  location_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SPlaceEvent.location_uuid)
}
#if LANG_CXX11
inline void C2SPlaceEvent::set_location_uuid(::std::string&& value) {
  
  location_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SPlaceEvent.location_uuid)
}
#endif
inline void C2SPlaceEvent::set_location_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SPlaceEvent.location_uuid)
}
inline void C2SPlaceEvent::set_location_uuid(const char* value, size_t size) {
  
  location_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SPlaceEvent.location_uuid)
}
inline ::std::string* C2SPlaceEvent::mutable_location_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SPlaceEvent.location_uuid)
  return location_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SPlaceEvent::release_location_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SPlaceEvent.location_uuid)
  
  return location_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SPlaceEvent::set_allocated_location_uuid(::std::string* location_uuid) {
  if (location_uuid != NULL) {
    
  } else {
    
  }
  location_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SPlaceEvent.location_uuid)
}

// repeated .NetProto.CS.ObjPosRotChange changed_pos_rot = 5;
inline int C2SPlaceEvent::changed_pos_rot_size() const {
  return changed_pos_rot_.size();
}
inline void C2SPlaceEvent::clear_changed_pos_rot() {
  changed_pos_rot_.Clear();
}
inline const ::NetProto::CS::ObjPosRotChange& C2SPlaceEvent::changed_pos_rot(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SPlaceEvent.changed_pos_rot)
  return changed_pos_rot_.Get(index);
}
inline ::NetProto::CS::ObjPosRotChange* C2SPlaceEvent::mutable_changed_pos_rot(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SPlaceEvent.changed_pos_rot)
  return changed_pos_rot_.Mutable(index);
}
inline ::NetProto::CS::ObjPosRotChange* C2SPlaceEvent::add_changed_pos_rot() {
  // @@protoc_insertion_point(field_add:NetProto.CS.C2SPlaceEvent.changed_pos_rot)
  return changed_pos_rot_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange >*
C2SPlaceEvent::mutable_changed_pos_rot() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.CS.C2SPlaceEvent.changed_pos_rot)
  return &changed_pos_rot_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange >&
C2SPlaceEvent::changed_pos_rot() const {
  // @@protoc_insertion_point(field_list:NetProto.CS.C2SPlaceEvent.changed_pos_rot)
  return changed_pos_rot_;
}

// repeated .NetProto.ObjPosRelation changed_relation = 6;
inline int C2SPlaceEvent::changed_relation_size() const {
  return changed_relation_.size();
}
inline void C2SPlaceEvent::clear_changed_relation() {
  changed_relation_.Clear();
}
inline const ::NetProto::ObjPosRelation& C2SPlaceEvent::changed_relation(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SPlaceEvent.changed_relation)
  return changed_relation_.Get(index);
}
inline ::NetProto::ObjPosRelation* C2SPlaceEvent::mutable_changed_relation(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SPlaceEvent.changed_relation)
  return changed_relation_.Mutable(index);
}
inline ::NetProto::ObjPosRelation* C2SPlaceEvent::add_changed_relation() {
  // @@protoc_insertion_point(field_add:NetProto.CS.C2SPlaceEvent.changed_relation)
  return changed_relation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >*
C2SPlaceEvent::mutable_changed_relation() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.CS.C2SPlaceEvent.changed_relation)
  return &changed_relation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >&
C2SPlaceEvent::changed_relation() const {
  // @@protoc_insertion_point(field_list:NetProto.CS.C2SPlaceEvent.changed_relation)
  return changed_relation_;
}

// .NetProto.CS.BodyPart body_part = 7;
inline void C2SPlaceEvent::clear_body_part() {
  body_part_ = 0;
}
inline ::NetProto::CS::BodyPart C2SPlaceEvent::body_part() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SPlaceEvent.body_part)
  return static_cast< ::NetProto::CS::BodyPart >(body_part_);
}
inline void C2SPlaceEvent::set_body_part(::NetProto::CS::BodyPart value) {
  
  body_part_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SPlaceEvent.body_part)
}

// -------------------------------------------------------------------

// C2SFetchEvent

// .NetProto.MsgHead msg_head = 1;
inline bool C2SFetchEvent::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void C2SFetchEvent::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& C2SFetchEvent::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SFetchEvent.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* C2SFetchEvent::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SFetchEvent.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* C2SFetchEvent::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SFetchEvent.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void C2SFetchEvent::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SFetchEvent.msg_head)
}

// string obj_uuid = 3;
inline void C2SFetchEvent::clear_obj_uuid() {
  obj_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SFetchEvent::obj_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SFetchEvent.obj_uuid)
  return obj_uuid_.GetNoArena();
}
inline void C2SFetchEvent::set_obj_uuid(const ::std::string& value) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SFetchEvent.obj_uuid)
}
#if LANG_CXX11
inline void C2SFetchEvent::set_obj_uuid(::std::string&& value) {
  
  obj_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SFetchEvent.obj_uuid)
}
#endif
inline void C2SFetchEvent::set_obj_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SFetchEvent.obj_uuid)
}
inline void C2SFetchEvent::set_obj_uuid(const char* value, size_t size) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SFetchEvent.obj_uuid)
}
inline ::std::string* C2SFetchEvent::mutable_obj_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SFetchEvent.obj_uuid)
  return obj_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SFetchEvent::release_obj_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SFetchEvent.obj_uuid)
  
  return obj_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SFetchEvent::set_allocated_obj_uuid(::std::string* obj_uuid) {
  if (obj_uuid != NULL) {
    
  } else {
    
  }
  obj_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SFetchEvent.obj_uuid)
}

// string location_uuid = 4;
inline void C2SFetchEvent::clear_location_uuid() {
  location_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SFetchEvent::location_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SFetchEvent.location_uuid)
  return location_uuid_.GetNoArena();
}
inline void C2SFetchEvent::set_location_uuid(const ::std::string& value) {
  
  location_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SFetchEvent.location_uuid)
}
#if LANG_CXX11
inline void C2SFetchEvent::set_location_uuid(::std::string&& value) {
  
  location_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SFetchEvent.location_uuid)
}
#endif
inline void C2SFetchEvent::set_location_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SFetchEvent.location_uuid)
}
inline void C2SFetchEvent::set_location_uuid(const char* value, size_t size) {
  
  location_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SFetchEvent.location_uuid)
}
inline ::std::string* C2SFetchEvent::mutable_location_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SFetchEvent.location_uuid)
  return location_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SFetchEvent::release_location_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SFetchEvent.location_uuid)
  
  return location_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SFetchEvent::set_allocated_location_uuid(::std::string* location_uuid) {
  if (location_uuid != NULL) {
    
  } else {
    
  }
  location_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SFetchEvent.location_uuid)
}

// repeated .NetProto.CS.ObjPosRotChange changed_pos_rot = 5;
inline int C2SFetchEvent::changed_pos_rot_size() const {
  return changed_pos_rot_.size();
}
inline void C2SFetchEvent::clear_changed_pos_rot() {
  changed_pos_rot_.Clear();
}
inline const ::NetProto::CS::ObjPosRotChange& C2SFetchEvent::changed_pos_rot(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SFetchEvent.changed_pos_rot)
  return changed_pos_rot_.Get(index);
}
inline ::NetProto::CS::ObjPosRotChange* C2SFetchEvent::mutable_changed_pos_rot(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SFetchEvent.changed_pos_rot)
  return changed_pos_rot_.Mutable(index);
}
inline ::NetProto::CS::ObjPosRotChange* C2SFetchEvent::add_changed_pos_rot() {
  // @@protoc_insertion_point(field_add:NetProto.CS.C2SFetchEvent.changed_pos_rot)
  return changed_pos_rot_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange >*
C2SFetchEvent::mutable_changed_pos_rot() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.CS.C2SFetchEvent.changed_pos_rot)
  return &changed_pos_rot_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange >&
C2SFetchEvent::changed_pos_rot() const {
  // @@protoc_insertion_point(field_list:NetProto.CS.C2SFetchEvent.changed_pos_rot)
  return changed_pos_rot_;
}

// repeated .NetProto.ObjPosRelation changed_relation = 6;
inline int C2SFetchEvent::changed_relation_size() const {
  return changed_relation_.size();
}
inline void C2SFetchEvent::clear_changed_relation() {
  changed_relation_.Clear();
}
inline const ::NetProto::ObjPosRelation& C2SFetchEvent::changed_relation(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SFetchEvent.changed_relation)
  return changed_relation_.Get(index);
}
inline ::NetProto::ObjPosRelation* C2SFetchEvent::mutable_changed_relation(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SFetchEvent.changed_relation)
  return changed_relation_.Mutable(index);
}
inline ::NetProto::ObjPosRelation* C2SFetchEvent::add_changed_relation() {
  // @@protoc_insertion_point(field_add:NetProto.CS.C2SFetchEvent.changed_relation)
  return changed_relation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >*
C2SFetchEvent::mutable_changed_relation() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.CS.C2SFetchEvent.changed_relation)
  return &changed_relation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >&
C2SFetchEvent::changed_relation() const {
  // @@protoc_insertion_point(field_list:NetProto.CS.C2SFetchEvent.changed_relation)
  return changed_relation_;
}

// .NetProto.CS.BodyPart body_part = 7;
inline void C2SFetchEvent::clear_body_part() {
  body_part_ = 0;
}
inline ::NetProto::CS::BodyPart C2SFetchEvent::body_part() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SFetchEvent.body_part)
  return static_cast< ::NetProto::CS::BodyPart >(body_part_);
}
inline void C2SFetchEvent::set_body_part(::NetProto::CS::BodyPart value) {
  
  body_part_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SFetchEvent.body_part)
}

// -------------------------------------------------------------------

// C2SSpecialEvent

// .NetProto.MsgHead msg_head = 1;
inline bool C2SSpecialEvent::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void C2SSpecialEvent::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& C2SSpecialEvent::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SSpecialEvent.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* C2SSpecialEvent::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SSpecialEvent.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* C2SSpecialEvent::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SSpecialEvent.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void C2SSpecialEvent::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SSpecialEvent.msg_head)
}

// .NetProto.RoleStatusEvent evt_type = 2;
inline void C2SSpecialEvent::clear_evt_type() {
  evt_type_ = 0;
}
inline ::NetProto::RoleStatusEvent C2SSpecialEvent::evt_type() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SSpecialEvent.evt_type)
  return static_cast< ::NetProto::RoleStatusEvent >(evt_type_);
}
inline void C2SSpecialEvent::set_evt_type(::NetProto::RoleStatusEvent value) {
  
  evt_type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SSpecialEvent.evt_type)
}

// string obj_uuid = 3;
inline void C2SSpecialEvent::clear_obj_uuid() {
  obj_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SSpecialEvent::obj_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SSpecialEvent.obj_uuid)
  return obj_uuid_.GetNoArena();
}
inline void C2SSpecialEvent::set_obj_uuid(const ::std::string& value) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SSpecialEvent.obj_uuid)
}
#if LANG_CXX11
inline void C2SSpecialEvent::set_obj_uuid(::std::string&& value) {
  
  obj_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SSpecialEvent.obj_uuid)
}
#endif
inline void C2SSpecialEvent::set_obj_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SSpecialEvent.obj_uuid)
}
inline void C2SSpecialEvent::set_obj_uuid(const char* value, size_t size) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SSpecialEvent.obj_uuid)
}
inline ::std::string* C2SSpecialEvent::mutable_obj_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SSpecialEvent.obj_uuid)
  return obj_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SSpecialEvent::release_obj_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SSpecialEvent.obj_uuid)
  
  return obj_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SSpecialEvent::set_allocated_obj_uuid(::std::string* obj_uuid) {
  if (obj_uuid != NULL) {
    
  } else {
    
  }
  obj_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SSpecialEvent.obj_uuid)
}

// repeated .NetProto.KeyValuePair params = 4;
inline int C2SSpecialEvent::params_size() const {
  return params_.size();
}
inline void C2SSpecialEvent::clear_params() {
  params_.Clear();
}
inline const ::NetProto::KeyValuePair& C2SSpecialEvent::params(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SSpecialEvent.params)
  return params_.Get(index);
}
inline ::NetProto::KeyValuePair* C2SSpecialEvent::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SSpecialEvent.params)
  return params_.Mutable(index);
}
inline ::NetProto::KeyValuePair* C2SSpecialEvent::add_params() {
  // @@protoc_insertion_point(field_add:NetProto.CS.C2SSpecialEvent.params)
  return params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair >*
C2SSpecialEvent::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.CS.C2SSpecialEvent.params)
  return &params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair >&
C2SSpecialEvent::params() const {
  // @@protoc_insertion_point(field_list:NetProto.CS.C2SSpecialEvent.params)
  return params_;
}

// -------------------------------------------------------------------

// C2SObjPosRotEvent

// .NetProto.MsgHead msg_head = 1;
inline bool C2SObjPosRotEvent::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void C2SObjPosRotEvent::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& C2SObjPosRotEvent::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SObjPosRotEvent.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* C2SObjPosRotEvent::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SObjPosRotEvent.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* C2SObjPosRotEvent::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SObjPosRotEvent.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void C2SObjPosRotEvent::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SObjPosRotEvent.msg_head)
}

// repeated .NetProto.CS.ObjPosRotChange obj_pos_rot_change = 3;
inline int C2SObjPosRotEvent::obj_pos_rot_change_size() const {
  return obj_pos_rot_change_.size();
}
inline void C2SObjPosRotEvent::clear_obj_pos_rot_change() {
  obj_pos_rot_change_.Clear();
}
inline const ::NetProto::CS::ObjPosRotChange& C2SObjPosRotEvent::obj_pos_rot_change(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SObjPosRotEvent.obj_pos_rot_change)
  return obj_pos_rot_change_.Get(index);
}
inline ::NetProto::CS::ObjPosRotChange* C2SObjPosRotEvent::mutable_obj_pos_rot_change(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SObjPosRotEvent.obj_pos_rot_change)
  return obj_pos_rot_change_.Mutable(index);
}
inline ::NetProto::CS::ObjPosRotChange* C2SObjPosRotEvent::add_obj_pos_rot_change() {
  // @@protoc_insertion_point(field_add:NetProto.CS.C2SObjPosRotEvent.obj_pos_rot_change)
  return obj_pos_rot_change_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange >*
C2SObjPosRotEvent::mutable_obj_pos_rot_change() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.CS.C2SObjPosRotEvent.obj_pos_rot_change)
  return &obj_pos_rot_change_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::CS::ObjPosRotChange >&
C2SObjPosRotEvent::obj_pos_rot_change() const {
  // @@protoc_insertion_point(field_list:NetProto.CS.C2SObjPosRotEvent.obj_pos_rot_change)
  return obj_pos_rot_change_;
}

// -------------------------------------------------------------------

// C2SVision

// .NetProto.MsgHead msg_head = 1;
inline bool C2SVision::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void C2SVision::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& C2SVision::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SVision.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* C2SVision::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SVision.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* C2SVision::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SVision.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void C2SVision::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SVision.msg_head)
}

// repeated string enter_obj_uuid = 2;
inline int C2SVision::enter_obj_uuid_size() const {
  return enter_obj_uuid_.size();
}
inline void C2SVision::clear_enter_obj_uuid() {
  enter_obj_uuid_.Clear();
}
inline const ::std::string& C2SVision::enter_obj_uuid(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SVision.enter_obj_uuid)
  return enter_obj_uuid_.Get(index);
}
inline ::std::string* C2SVision::mutable_enter_obj_uuid(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SVision.enter_obj_uuid)
  return enter_obj_uuid_.Mutable(index);
}
inline void C2SVision::set_enter_obj_uuid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SVision.enter_obj_uuid)
  enter_obj_uuid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void C2SVision::set_enter_obj_uuid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SVision.enter_obj_uuid)
  enter_obj_uuid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void C2SVision::set_enter_obj_uuid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  enter_obj_uuid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SVision.enter_obj_uuid)
}
inline void C2SVision::set_enter_obj_uuid(int index, const char* value, size_t size) {
  enter_obj_uuid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SVision.enter_obj_uuid)
}
inline ::std::string* C2SVision::add_enter_obj_uuid() {
  // @@protoc_insertion_point(field_add_mutable:NetProto.CS.C2SVision.enter_obj_uuid)
  return enter_obj_uuid_.Add();
}
inline void C2SVision::add_enter_obj_uuid(const ::std::string& value) {
  enter_obj_uuid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetProto.CS.C2SVision.enter_obj_uuid)
}
#if LANG_CXX11
inline void C2SVision::add_enter_obj_uuid(::std::string&& value) {
  enter_obj_uuid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NetProto.CS.C2SVision.enter_obj_uuid)
}
#endif
inline void C2SVision::add_enter_obj_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  enter_obj_uuid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetProto.CS.C2SVision.enter_obj_uuid)
}
inline void C2SVision::add_enter_obj_uuid(const char* value, size_t size) {
  enter_obj_uuid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetProto.CS.C2SVision.enter_obj_uuid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
C2SVision::enter_obj_uuid() const {
  // @@protoc_insertion_point(field_list:NetProto.CS.C2SVision.enter_obj_uuid)
  return enter_obj_uuid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
C2SVision::mutable_enter_obj_uuid() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.CS.C2SVision.enter_obj_uuid)
  return &enter_obj_uuid_;
}

// repeated .NetProto.ObjPosRelation enter_obj_relation = 3;
inline int C2SVision::enter_obj_relation_size() const {
  return enter_obj_relation_.size();
}
inline void C2SVision::clear_enter_obj_relation() {
  enter_obj_relation_.Clear();
}
inline const ::NetProto::ObjPosRelation& C2SVision::enter_obj_relation(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SVision.enter_obj_relation)
  return enter_obj_relation_.Get(index);
}
inline ::NetProto::ObjPosRelation* C2SVision::mutable_enter_obj_relation(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SVision.enter_obj_relation)
  return enter_obj_relation_.Mutable(index);
}
inline ::NetProto::ObjPosRelation* C2SVision::add_enter_obj_relation() {
  // @@protoc_insertion_point(field_add:NetProto.CS.C2SVision.enter_obj_relation)
  return enter_obj_relation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >*
C2SVision::mutable_enter_obj_relation() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.CS.C2SVision.enter_obj_relation)
  return &enter_obj_relation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::ObjPosRelation >&
C2SVision::enter_obj_relation() const {
  // @@protoc_insertion_point(field_list:NetProto.CS.C2SVision.enter_obj_relation)
  return enter_obj_relation_;
}

// repeated string leave_obj_uuid = 4;
inline int C2SVision::leave_obj_uuid_size() const {
  return leave_obj_uuid_.size();
}
inline void C2SVision::clear_leave_obj_uuid() {
  leave_obj_uuid_.Clear();
}
inline const ::std::string& C2SVision::leave_obj_uuid(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SVision.leave_obj_uuid)
  return leave_obj_uuid_.Get(index);
}
inline ::std::string* C2SVision::mutable_leave_obj_uuid(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SVision.leave_obj_uuid)
  return leave_obj_uuid_.Mutable(index);
}
inline void C2SVision::set_leave_obj_uuid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SVision.leave_obj_uuid)
  leave_obj_uuid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void C2SVision::set_leave_obj_uuid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SVision.leave_obj_uuid)
  leave_obj_uuid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void C2SVision::set_leave_obj_uuid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  leave_obj_uuid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SVision.leave_obj_uuid)
}
inline void C2SVision::set_leave_obj_uuid(int index, const char* value, size_t size) {
  leave_obj_uuid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SVision.leave_obj_uuid)
}
inline ::std::string* C2SVision::add_leave_obj_uuid() {
  // @@protoc_insertion_point(field_add_mutable:NetProto.CS.C2SVision.leave_obj_uuid)
  return leave_obj_uuid_.Add();
}
inline void C2SVision::add_leave_obj_uuid(const ::std::string& value) {
  leave_obj_uuid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetProto.CS.C2SVision.leave_obj_uuid)
}
#if LANG_CXX11
inline void C2SVision::add_leave_obj_uuid(::std::string&& value) {
  leave_obj_uuid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NetProto.CS.C2SVision.leave_obj_uuid)
}
#endif
inline void C2SVision::add_leave_obj_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  leave_obj_uuid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetProto.CS.C2SVision.leave_obj_uuid)
}
inline void C2SVision::add_leave_obj_uuid(const char* value, size_t size) {
  leave_obj_uuid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetProto.CS.C2SVision.leave_obj_uuid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
C2SVision::leave_obj_uuid() const {
  // @@protoc_insertion_point(field_list:NetProto.CS.C2SVision.leave_obj_uuid)
  return leave_obj_uuid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
C2SVision::mutable_leave_obj_uuid() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.CS.C2SVision.leave_obj_uuid)
  return &leave_obj_uuid_;
}

// -------------------------------------------------------------------

// C2SVoice

// .NetProto.CS.C2SVoice.VoiceType voice_type = 1;
inline void C2SVoice::clear_voice_type() {
  voice_type_ = 0;
}
inline ::NetProto::CS::C2SVoice_VoiceType C2SVoice::voice_type() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SVoice.voice_type)
  return static_cast< ::NetProto::CS::C2SVoice_VoiceType >(voice_type_);
}
inline void C2SVoice::set_voice_type(::NetProto::CS::C2SVoice_VoiceType value) {
  
  voice_type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SVoice.voice_type)
}

// .NetProto.CS.C2SVoice.VoiceStatus voice_status = 2;
inline void C2SVoice::clear_voice_status() {
  voice_status_ = 0;
}
inline ::NetProto::CS::C2SVoice_VoiceStatus C2SVoice::voice_status() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SVoice.voice_status)
  return static_cast< ::NetProto::CS::C2SVoice_VoiceStatus >(voice_status_);
}
inline void C2SVoice::set_voice_status(::NetProto::CS::C2SVoice_VoiceStatus value) {
  
  voice_status_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SVoice.voice_status)
}

// .NetProto.CS.C2SVoice.VolumeLevel volume_level = 3;
inline void C2SVoice::clear_volume_level() {
  volume_level_ = 0;
}
inline ::NetProto::CS::C2SVoice_VolumeLevel C2SVoice::volume_level() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SVoice.volume_level)
  return static_cast< ::NetProto::CS::C2SVoice_VolumeLevel >(volume_level_);
}
inline void C2SVoice::set_volume_level(::NetProto::CS::C2SVoice_VolumeLevel value) {
  
  volume_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SVoice.volume_level)
}

// string params = 4;
inline void C2SVoice::clear_params() {
  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SVoice::params() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SVoice.params)
  return params_.GetNoArena();
}
inline void C2SVoice::set_params(const ::std::string& value) {
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SVoice.params)
}
#if LANG_CXX11
inline void C2SVoice::set_params(::std::string&& value) {
  
  params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SVoice.params)
}
#endif
inline void C2SVoice::set_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SVoice.params)
}
inline void C2SVoice::set_params(const char* value, size_t size) {
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SVoice.params)
}
inline ::std::string* C2SVoice::mutable_params() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SVoice.params)
  return params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SVoice::release_params() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SVoice.params)
  
  return params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SVoice::set_allocated_params(::std::string* params) {
  if (params != NULL) {
    
  } else {
    
  }
  params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), params);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SVoice.params)
}

// -------------------------------------------------------------------

// C2SVoiceSpeech

// .NetProto.MsgHead msg_head = 1;
inline bool C2SVoiceSpeech::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void C2SVoiceSpeech::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& C2SVoiceSpeech::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SVoiceSpeech.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* C2SVoiceSpeech::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SVoiceSpeech.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* C2SVoiceSpeech::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SVoiceSpeech.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void C2SVoiceSpeech::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SVoiceSpeech.msg_head)
}

// string text = 3;
inline void C2SVoiceSpeech::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SVoiceSpeech::text() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SVoiceSpeech.text)
  return text_.GetNoArena();
}
inline void C2SVoiceSpeech::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SVoiceSpeech.text)
}
#if LANG_CXX11
inline void C2SVoiceSpeech::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SVoiceSpeech.text)
}
#endif
inline void C2SVoiceSpeech::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SVoiceSpeech.text)
}
inline void C2SVoiceSpeech::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SVoiceSpeech.text)
}
inline ::std::string* C2SVoiceSpeech::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SVoiceSpeech.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SVoiceSpeech::release_text() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SVoiceSpeech.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SVoiceSpeech::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SVoiceSpeech.text)
}

// -------------------------------------------------------------------

// C2SAddObject

// .NetProto.MsgHead msg_head = 1;
inline bool C2SAddObject::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void C2SAddObject::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& C2SAddObject::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SAddObject.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* C2SAddObject::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SAddObject.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* C2SAddObject::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SAddObject.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void C2SAddObject::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SAddObject.msg_head)
}

// uint32 config_id = 2;
inline void C2SAddObject::clear_config_id() {
  config_id_ = 0u;
}
inline ::google::protobuf::uint32 C2SAddObject::config_id() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SAddObject.config_id)
  return config_id_;
}
inline void C2SAddObject::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SAddObject.config_id)
}

// string obj_uuid = 3;
inline void C2SAddObject::clear_obj_uuid() {
  obj_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SAddObject::obj_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SAddObject.obj_uuid)
  return obj_uuid_.GetNoArena();
}
inline void C2SAddObject::set_obj_uuid(const ::std::string& value) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SAddObject.obj_uuid)
}
#if LANG_CXX11
inline void C2SAddObject::set_obj_uuid(::std::string&& value) {
  
  obj_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SAddObject.obj_uuid)
}
#endif
inline void C2SAddObject::set_obj_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SAddObject.obj_uuid)
}
inline void C2SAddObject::set_obj_uuid(const char* value, size_t size) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SAddObject.obj_uuid)
}
inline ::std::string* C2SAddObject::mutable_obj_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SAddObject.obj_uuid)
  return obj_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SAddObject::release_obj_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SAddObject.obj_uuid)
  
  return obj_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SAddObject::set_allocated_obj_uuid(::std::string* obj_uuid) {
  if (obj_uuid != NULL) {
    
  } else {
    
  }
  obj_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SAddObject.obj_uuid)
}

// uint32 class_id = 4;
inline void C2SAddObject::clear_class_id() {
  class_id_ = 0u;
}
inline ::google::protobuf::uint32 C2SAddObject::class_id() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SAddObject.class_id)
  return class_id_;
}
inline void C2SAddObject::set_class_id(::google::protobuf::uint32 value) {
  
  class_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SAddObject.class_id)
}

// uint32 item_id = 5;
inline void C2SAddObject::clear_item_id() {
  item_id_ = 0u;
}
inline ::google::protobuf::uint32 C2SAddObject::item_id() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SAddObject.item_id)
  return item_id_;
}
inline void C2SAddObject::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SAddObject.item_id)
}

// .NetProto.PosRot pos_rot = 6;
inline bool C2SAddObject::has_pos_rot() const {
  return this != internal_default_instance() && pos_rot_ != NULL;
}
inline void C2SAddObject::clear_pos_rot() {
  if (GetArenaNoVirtual() == NULL && pos_rot_ != NULL) delete pos_rot_;
  pos_rot_ = NULL;
}
inline const ::NetProto::PosRot& C2SAddObject::pos_rot() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SAddObject.pos_rot)
  return pos_rot_ != NULL ? *pos_rot_
                         : *::NetProto::PosRot::internal_default_instance();
}
inline ::NetProto::PosRot* C2SAddObject::mutable_pos_rot() {
  
  if (pos_rot_ == NULL) {
    pos_rot_ = new ::NetProto::PosRot;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SAddObject.pos_rot)
  return pos_rot_;
}
inline ::NetProto::PosRot* C2SAddObject::release_pos_rot() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SAddObject.pos_rot)
  
  ::NetProto::PosRot* temp = pos_rot_;
  pos_rot_ = NULL;
  return temp;
}
inline void C2SAddObject::set_allocated_pos_rot(::NetProto::PosRot* pos_rot) {
  delete pos_rot_;
  pos_rot_ = pos_rot;
  if (pos_rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SAddObject.pos_rot)
}

// -------------------------------------------------------------------

// C2SReplaceObject

// .NetProto.MsgHead msg_head = 1;
inline bool C2SReplaceObject::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void C2SReplaceObject::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& C2SReplaceObject::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SReplaceObject.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* C2SReplaceObject::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SReplaceObject.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* C2SReplaceObject::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SReplaceObject.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void C2SReplaceObject::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SReplaceObject.msg_head)
}

// string old_obj_uuid = 2;
inline void C2SReplaceObject::clear_old_obj_uuid() {
  old_obj_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SReplaceObject::old_obj_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SReplaceObject.old_obj_uuid)
  return old_obj_uuid_.GetNoArena();
}
inline void C2SReplaceObject::set_old_obj_uuid(const ::std::string& value) {
  
  old_obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SReplaceObject.old_obj_uuid)
}
#if LANG_CXX11
inline void C2SReplaceObject::set_old_obj_uuid(::std::string&& value) {
  
  old_obj_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SReplaceObject.old_obj_uuid)
}
#endif
inline void C2SReplaceObject::set_old_obj_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  old_obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SReplaceObject.old_obj_uuid)
}
inline void C2SReplaceObject::set_old_obj_uuid(const char* value, size_t size) {
  
  old_obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SReplaceObject.old_obj_uuid)
}
inline ::std::string* C2SReplaceObject::mutable_old_obj_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SReplaceObject.old_obj_uuid)
  return old_obj_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SReplaceObject::release_old_obj_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SReplaceObject.old_obj_uuid)
  
  return old_obj_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SReplaceObject::set_allocated_old_obj_uuid(::std::string* old_obj_uuid) {
  if (old_obj_uuid != NULL) {
    
  } else {
    
  }
  old_obj_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_obj_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SReplaceObject.old_obj_uuid)
}

// string new_obj_uuid = 3;
inline void C2SReplaceObject::clear_new_obj_uuid() {
  new_obj_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SReplaceObject::new_obj_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SReplaceObject.new_obj_uuid)
  return new_obj_uuid_.GetNoArena();
}
inline void C2SReplaceObject::set_new_obj_uuid(const ::std::string& value) {
  
  new_obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SReplaceObject.new_obj_uuid)
}
#if LANG_CXX11
inline void C2SReplaceObject::set_new_obj_uuid(::std::string&& value) {
  
  new_obj_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SReplaceObject.new_obj_uuid)
}
#endif
inline void C2SReplaceObject::set_new_obj_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  new_obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SReplaceObject.new_obj_uuid)
}
inline void C2SReplaceObject::set_new_obj_uuid(const char* value, size_t size) {
  
  new_obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SReplaceObject.new_obj_uuid)
}
inline ::std::string* C2SReplaceObject::mutable_new_obj_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SReplaceObject.new_obj_uuid)
  return new_obj_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SReplaceObject::release_new_obj_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SReplaceObject.new_obj_uuid)
  
  return new_obj_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SReplaceObject::set_allocated_new_obj_uuid(::std::string* new_obj_uuid) {
  if (new_obj_uuid != NULL) {
    
  } else {
    
  }
  new_obj_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_obj_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SReplaceObject.new_obj_uuid)
}

// -------------------------------------------------------------------

// C2SDeleteObject

// .NetProto.MsgHead msg_head = 1;
inline bool C2SDeleteObject::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void C2SDeleteObject::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& C2SDeleteObject::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SDeleteObject.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* C2SDeleteObject::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SDeleteObject.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* C2SDeleteObject::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SDeleteObject.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void C2SDeleteObject::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SDeleteObject.msg_head)
}

// string obj_uuid = 2;
inline void C2SDeleteObject::clear_obj_uuid() {
  obj_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SDeleteObject::obj_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SDeleteObject.obj_uuid)
  return obj_uuid_.GetNoArena();
}
inline void C2SDeleteObject::set_obj_uuid(const ::std::string& value) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SDeleteObject.obj_uuid)
}
#if LANG_CXX11
inline void C2SDeleteObject::set_obj_uuid(::std::string&& value) {
  
  obj_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SDeleteObject.obj_uuid)
}
#endif
inline void C2SDeleteObject::set_obj_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SDeleteObject.obj_uuid)
}
inline void C2SDeleteObject::set_obj_uuid(const char* value, size_t size) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SDeleteObject.obj_uuid)
}
inline ::std::string* C2SDeleteObject::mutable_obj_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SDeleteObject.obj_uuid)
  return obj_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SDeleteObject::release_obj_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SDeleteObject.obj_uuid)
  
  return obj_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SDeleteObject::set_allocated_obj_uuid(::std::string* obj_uuid) {
  if (obj_uuid != NULL) {
    
  } else {
    
  }
  obj_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SDeleteObject.obj_uuid)
}

// -------------------------------------------------------------------

// C2SDebugAction

// .NetProto.MsgHead msg_head = 1;
inline bool C2SDebugAction::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != NULL;
}
inline void C2SDebugAction::clear_msg_head() {
  if (GetArenaNoVirtual() == NULL && msg_head_ != NULL) delete msg_head_;
  msg_head_ = NULL;
}
inline const ::NetProto::MsgHead& C2SDebugAction::msg_head() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SDebugAction.msg_head)
  return msg_head_ != NULL ? *msg_head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* C2SDebugAction::mutable_msg_head() {
  
  if (msg_head_ == NULL) {
    msg_head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SDebugAction.msg_head)
  return msg_head_;
}
inline ::NetProto::MsgHead* C2SDebugAction::release_msg_head() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SDebugAction.msg_head)
  
  ::NetProto::MsgHead* temp = msg_head_;
  msg_head_ = NULL;
  return temp;
}
inline void C2SDebugAction::set_allocated_msg_head(::NetProto::MsgHead* msg_head) {
  delete msg_head_;
  msg_head_ = msg_head;
  if (msg_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SDebugAction.msg_head)
}

// string action = 2;
inline void C2SDebugAction::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SDebugAction::action() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.C2SDebugAction.action)
  return action_.GetNoArena();
}
inline void C2SDebugAction::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.C2SDebugAction.action)
}
#if LANG_CXX11
inline void C2SDebugAction::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.C2SDebugAction.action)
}
#endif
inline void C2SDebugAction::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.C2SDebugAction.action)
}
inline void C2SDebugAction::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.C2SDebugAction.action)
}
inline ::std::string* C2SDebugAction::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.C2SDebugAction.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SDebugAction::release_action() {
  // @@protoc_insertion_point(field_release:NetProto.CS.C2SDebugAction.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SDebugAction::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.C2SDebugAction.action)
}

// -------------------------------------------------------------------

// ObjPosRotChange

// string obj_uuid = 3;
inline void ObjPosRotChange::clear_obj_uuid() {
  obj_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjPosRotChange::obj_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.ObjPosRotChange.obj_uuid)
  return obj_uuid_.GetNoArena();
}
inline void ObjPosRotChange::set_obj_uuid(const ::std::string& value) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.ObjPosRotChange.obj_uuid)
}
#if LANG_CXX11
inline void ObjPosRotChange::set_obj_uuid(::std::string&& value) {
  
  obj_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.ObjPosRotChange.obj_uuid)
}
#endif
inline void ObjPosRotChange::set_obj_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.ObjPosRotChange.obj_uuid)
}
inline void ObjPosRotChange::set_obj_uuid(const char* value, size_t size) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.ObjPosRotChange.obj_uuid)
}
inline ::std::string* ObjPosRotChange::mutable_obj_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.ObjPosRotChange.obj_uuid)
  return obj_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjPosRotChange::release_obj_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.ObjPosRotChange.obj_uuid)
  
  return obj_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjPosRotChange::set_allocated_obj_uuid(::std::string* obj_uuid) {
  if (obj_uuid != NULL) {
    
  } else {
    
  }
  obj_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.ObjPosRotChange.obj_uuid)
}

// bool become_moving = 4;
inline void ObjPosRotChange::clear_become_moving() {
  become_moving_ = false;
}
inline bool ObjPosRotChange::become_moving() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.ObjPosRotChange.become_moving)
  return become_moving_;
}
inline void ObjPosRotChange::set_become_moving(bool value) {
  
  become_moving_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CS.ObjPosRotChange.become_moving)
}

// .NetProto.PosRot obj_pos_rot = 5;
inline bool ObjPosRotChange::has_obj_pos_rot() const {
  return this != internal_default_instance() && obj_pos_rot_ != NULL;
}
inline void ObjPosRotChange::clear_obj_pos_rot() {
  if (GetArenaNoVirtual() == NULL && obj_pos_rot_ != NULL) delete obj_pos_rot_;
  obj_pos_rot_ = NULL;
}
inline const ::NetProto::PosRot& ObjPosRotChange::obj_pos_rot() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.ObjPosRotChange.obj_pos_rot)
  return obj_pos_rot_ != NULL ? *obj_pos_rot_
                         : *::NetProto::PosRot::internal_default_instance();
}
inline ::NetProto::PosRot* ObjPosRotChange::mutable_obj_pos_rot() {
  
  if (obj_pos_rot_ == NULL) {
    obj_pos_rot_ = new ::NetProto::PosRot;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CS.ObjPosRotChange.obj_pos_rot)
  return obj_pos_rot_;
}
inline ::NetProto::PosRot* ObjPosRotChange::release_obj_pos_rot() {
  // @@protoc_insertion_point(field_release:NetProto.CS.ObjPosRotChange.obj_pos_rot)
  
  ::NetProto::PosRot* temp = obj_pos_rot_;
  obj_pos_rot_ = NULL;
  return temp;
}
inline void ObjPosRotChange::set_allocated_obj_pos_rot(::NetProto::PosRot* obj_pos_rot) {
  delete obj_pos_rot_;
  obj_pos_rot_ = obj_pos_rot;
  if (obj_pos_rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.ObjPosRotChange.obj_pos_rot)
}

// -------------------------------------------------------------------

// FetchObj

// string obj_uuid = 1;
inline void FetchObj::clear_obj_uuid() {
  obj_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FetchObj::obj_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.FetchObj.obj_uuid)
  return obj_uuid_.GetNoArena();
}
inline void FetchObj::set_obj_uuid(const ::std::string& value) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.FetchObj.obj_uuid)
}
#if LANG_CXX11
inline void FetchObj::set_obj_uuid(::std::string&& value) {
  
  obj_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.FetchObj.obj_uuid)
}
#endif
inline void FetchObj::set_obj_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.FetchObj.obj_uuid)
}
inline void FetchObj::set_obj_uuid(const char* value, size_t size) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.FetchObj.obj_uuid)
}
inline ::std::string* FetchObj::mutable_obj_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.FetchObj.obj_uuid)
  return obj_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchObj::release_obj_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.FetchObj.obj_uuid)
  
  return obj_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchObj::set_allocated_obj_uuid(::std::string* obj_uuid) {
  if (obj_uuid != NULL) {
    
  } else {
    
  }
  obj_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.FetchObj.obj_uuid)
}

// string location_uuid = 2;
inline void FetchObj::clear_location_uuid() {
  location_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FetchObj::location_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.FetchObj.location_uuid)
  return location_uuid_.GetNoArena();
}
inline void FetchObj::set_location_uuid(const ::std::string& value) {
  
  location_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.FetchObj.location_uuid)
}
#if LANG_CXX11
inline void FetchObj::set_location_uuid(::std::string&& value) {
  
  location_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.FetchObj.location_uuid)
}
#endif
inline void FetchObj::set_location_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.FetchObj.location_uuid)
}
inline void FetchObj::set_location_uuid(const char* value, size_t size) {
  
  location_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.FetchObj.location_uuid)
}
inline ::std::string* FetchObj::mutable_location_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.FetchObj.location_uuid)
  return location_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchObj::release_location_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.FetchObj.location_uuid)
  
  return location_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchObj::set_allocated_location_uuid(::std::string* location_uuid) {
  if (location_uuid != NULL) {
    
  } else {
    
  }
  location_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.FetchObj.location_uuid)
}

// -------------------------------------------------------------------

// PutObj

// string obj_uuid = 1;
inline void PutObj::clear_obj_uuid() {
  obj_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutObj::obj_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.PutObj.obj_uuid)
  return obj_uuid_.GetNoArena();
}
inline void PutObj::set_obj_uuid(const ::std::string& value) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.PutObj.obj_uuid)
}
#if LANG_CXX11
inline void PutObj::set_obj_uuid(::std::string&& value) {
  
  obj_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.PutObj.obj_uuid)
}
#endif
inline void PutObj::set_obj_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.PutObj.obj_uuid)
}
inline void PutObj::set_obj_uuid(const char* value, size_t size) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.PutObj.obj_uuid)
}
inline ::std::string* PutObj::mutable_obj_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.PutObj.obj_uuid)
  return obj_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutObj::release_obj_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.PutObj.obj_uuid)
  
  return obj_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutObj::set_allocated_obj_uuid(::std::string* obj_uuid) {
  if (obj_uuid != NULL) {
    
  } else {
    
  }
  obj_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.PutObj.obj_uuid)
}

// string location_uuid = 2;
inline void PutObj::clear_location_uuid() {
  location_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutObj::location_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.PutObj.location_uuid)
  return location_uuid_.GetNoArena();
}
inline void PutObj::set_location_uuid(const ::std::string& value) {
  
  location_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.PutObj.location_uuid)
}
#if LANG_CXX11
inline void PutObj::set_location_uuid(::std::string&& value) {
  
  location_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.PutObj.location_uuid)
}
#endif
inline void PutObj::set_location_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.PutObj.location_uuid)
}
inline void PutObj::set_location_uuid(const char* value, size_t size) {
  
  location_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.PutObj.location_uuid)
}
inline ::std::string* PutObj::mutable_location_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.PutObj.location_uuid)
  return location_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutObj::release_location_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.PutObj.location_uuid)
  
  return location_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutObj::set_allocated_location_uuid(::std::string* location_uuid) {
  if (location_uuid != NULL) {
    
  } else {
    
  }
  location_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.PutObj.location_uuid)
}

// -------------------------------------------------------------------

// OperateObj

// string oper_type = 1;
inline void OperateObj::clear_oper_type() {
  oper_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperateObj::oper_type() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.OperateObj.oper_type)
  return oper_type_.GetNoArena();
}
inline void OperateObj::set_oper_type(const ::std::string& value) {
  
  oper_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.OperateObj.oper_type)
}
#if LANG_CXX11
inline void OperateObj::set_oper_type(::std::string&& value) {
  
  oper_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.OperateObj.oper_type)
}
#endif
inline void OperateObj::set_oper_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  oper_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.OperateObj.oper_type)
}
inline void OperateObj::set_oper_type(const char* value, size_t size) {
  
  oper_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.OperateObj.oper_type)
}
inline ::std::string* OperateObj::mutable_oper_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.OperateObj.oper_type)
  return oper_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperateObj::release_oper_type() {
  // @@protoc_insertion_point(field_release:NetProto.CS.OperateObj.oper_type)
  
  return oper_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperateObj::set_allocated_oper_type(::std::string* oper_type) {
  if (oper_type != NULL) {
    
  } else {
    
  }
  oper_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oper_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.OperateObj.oper_type)
}

// string obj_uuid = 2;
inline void OperateObj::clear_obj_uuid() {
  obj_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperateObj::obj_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.OperateObj.obj_uuid)
  return obj_uuid_.GetNoArena();
}
inline void OperateObj::set_obj_uuid(const ::std::string& value) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.OperateObj.obj_uuid)
}
#if LANG_CXX11
inline void OperateObj::set_obj_uuid(::std::string&& value) {
  
  obj_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.OperateObj.obj_uuid)
}
#endif
inline void OperateObj::set_obj_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.OperateObj.obj_uuid)
}
inline void OperateObj::set_obj_uuid(const char* value, size_t size) {
  
  obj_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.OperateObj.obj_uuid)
}
inline ::std::string* OperateObj::mutable_obj_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.OperateObj.obj_uuid)
  return obj_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperateObj::release_obj_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.CS.OperateObj.obj_uuid)
  
  return obj_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperateObj::set_allocated_obj_uuid(::std::string* obj_uuid) {
  if (obj_uuid != NULL) {
    
  } else {
    
  }
  obj_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.OperateObj.obj_uuid)
}

// repeated .NetProto.KeyValuePair params = 3;
inline int OperateObj::params_size() const {
  return params_.size();
}
inline void OperateObj::clear_params() {
  params_.Clear();
}
inline const ::NetProto::KeyValuePair& OperateObj::params(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.CS.OperateObj.params)
  return params_.Get(index);
}
inline ::NetProto::KeyValuePair* OperateObj::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.CS.OperateObj.params)
  return params_.Mutable(index);
}
inline ::NetProto::KeyValuePair* OperateObj::add_params() {
  // @@protoc_insertion_point(field_add:NetProto.CS.OperateObj.params)
  return params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair >*
OperateObj::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.CS.OperateObj.params)
  return &params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair >&
OperateObj::params() const {
  // @@protoc_insertion_point(field_list:NetProto.CS.OperateObj.params)
  return params_;
}

// -------------------------------------------------------------------

// SelfAction

// string action = 1;
inline void SelfAction::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SelfAction::action() const {
  // @@protoc_insertion_point(field_get:NetProto.CS.SelfAction.action)
  return action_.GetNoArena();
}
inline void SelfAction::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CS.SelfAction.action)
}
#if LANG_CXX11
inline void SelfAction::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CS.SelfAction.action)
}
#endif
inline void SelfAction::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CS.SelfAction.action)
}
inline void SelfAction::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CS.SelfAction.action)
}
inline ::std::string* SelfAction::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CS.SelfAction.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfAction::release_action() {
  // @@protoc_insertion_point(field_release:NetProto.CS.SelfAction.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfAction::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CS.SelfAction.action)
}

// repeated .NetProto.KeyValuePair params = 2;
inline int SelfAction::params_size() const {
  return params_.size();
}
inline void SelfAction::clear_params() {
  params_.Clear();
}
inline const ::NetProto::KeyValuePair& SelfAction::params(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.CS.SelfAction.params)
  return params_.Get(index);
}
inline ::NetProto::KeyValuePair* SelfAction::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.CS.SelfAction.params)
  return params_.Mutable(index);
}
inline ::NetProto::KeyValuePair* SelfAction::add_params() {
  // @@protoc_insertion_point(field_add:NetProto.CS.SelfAction.params)
  return params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair >*
SelfAction::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.CS.SelfAction.params)
  return &params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::KeyValuePair >&
SelfAction::params() const {
  // @@protoc_insertion_point(field_list:NetProto.CS.SelfAction.params)
  return params_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace CS
}  // namespace NetProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NetProto::CS::S2CRoleAction_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::CS::S2CRoleAction_Type>() {
  return ::NetProto::CS::S2CRoleAction_Type_descriptor();
}
template <> struct is_proto_enum< ::NetProto::CS::C2SActionStatus_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::CS::C2SActionStatus_Type>() {
  return ::NetProto::CS::C2SActionStatus_Type_descriptor();
}
template <> struct is_proto_enum< ::NetProto::CS::C2SVoice_VoiceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::CS::C2SVoice_VoiceType>() {
  return ::NetProto::CS::C2SVoice_VoiceType_descriptor();
}
template <> struct is_proto_enum< ::NetProto::CS::C2SVoice_VolumeLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::CS::C2SVoice_VolumeLevel>() {
  return ::NetProto::CS::C2SVoice_VolumeLevel_descriptor();
}
template <> struct is_proto_enum< ::NetProto::CS::C2SVoice_VoiceStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::CS::C2SVoice_VoiceStatus>() {
  return ::NetProto::CS::C2SVoice_VoiceStatus_descriptor();
}
template <> struct is_proto_enum< ::NetProto::CS::BodyPart> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::CS::BodyPart>() {
  return ::NetProto::CS::BodyPart_descriptor();
}
template <> struct is_proto_enum< ::NetProto::CS::WorldEventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::CS::WorldEventType>() {
  return ::NetProto::CS::WorldEventType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_2eproto__INCLUDED
