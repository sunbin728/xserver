// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pw_link.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pw_link.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
class LinkReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkReq> {
} _LinkReq_default_instance_;

namespace protobuf_pw_5flink_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkReq, src_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LinkReq)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkReq_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "pw_link.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _LinkReq_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LinkReq_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rpw_link.proto\022\010NetProto\")\n\007LinkReq\022\036\n\003"
      "src\030\001 \001(\0162\021.NetProto.LinkSrc*\225\001\n\007LinkSrc"
      "\022\017\n\013SRC_WEATHER\020\000\022\r\n\tSRC_TIMER\020\001\022\014\n\010SRC_"
      "MAIN\020\002\022\021\n\rSRC_EMERGENCY\020\003\022\r\n\tSRC_SPACE\020\004"
      "\022\r\n\tSRC_ROBOT\020\005\022\016\n\nSRC_RECORD\020\006\022\r\n\tSRC_P"
      "LANT\020\007\022\014\n\010SRC_TEST\020\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 228);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pw_link.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_pw_5flink_2eproto

const ::google::protobuf::EnumDescriptor* LinkSrc_descriptor() {
  protobuf_pw_5flink_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pw_5flink_2eproto::file_level_enum_descriptors[0];
}
bool LinkSrc_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkReq::kSrcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkReq::LinkReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pw_5flink_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.LinkReq)
}
LinkReq::LinkReq(const LinkReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_ = from.src_;
  // @@protoc_insertion_point(copy_constructor:NetProto.LinkReq)
}

void LinkReq::SharedCtor() {
  src_ = 0;
  _cached_size_ = 0;
}

LinkReq::~LinkReq() {
  // @@protoc_insertion_point(destructor:NetProto.LinkReq)
  SharedDtor();
}

void LinkReq::SharedDtor() {
}

void LinkReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkReq::descriptor() {
  protobuf_pw_5flink_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pw_5flink_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LinkReq& LinkReq::default_instance() {
  protobuf_pw_5flink_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkReq* LinkReq::New(::google::protobuf::Arena* arena) const {
  LinkReq* n = new LinkReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkReq::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.LinkReq)
  src_ = 0;
}

bool LinkReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.LinkReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.LinkSrc src = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_src(static_cast< ::NetProto::LinkSrc >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.LinkReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.LinkReq)
  return false;
#undef DO_
}

void LinkReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.LinkReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.LinkSrc src = 1;
  if (this->src() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->src(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.LinkReq)
}

::google::protobuf::uint8* LinkReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.LinkReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.LinkSrc src = 1;
  if (this->src() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->src(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.LinkReq)
  return target;
}

size_t LinkReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.LinkReq)
  size_t total_size = 0;

  // .NetProto.LinkSrc src = 1;
  if (this->src() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->src());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.LinkReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.LinkReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.LinkReq)
    MergeFrom(*source);
  }
}

void LinkReq::MergeFrom(const LinkReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.LinkReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src() != 0) {
    set_src(from.src());
  }
}

void LinkReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.LinkReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkReq::CopyFrom(const LinkReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.LinkReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkReq::IsInitialized() const {
  return true;
}

void LinkReq::Swap(LinkReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkReq::InternalSwap(LinkReq* other) {
  std::swap(src_, other->src_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkReq::GetMetadata() const {
  protobuf_pw_5flink_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pw_5flink_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkReq

// .NetProto.LinkSrc src = 1;
void LinkReq::clear_src() {
  src_ = 0;
}
::NetProto::LinkSrc LinkReq::src() const {
  // @@protoc_insertion_point(field_get:NetProto.LinkReq.src)
  return static_cast< ::NetProto::LinkSrc >(src_);
}
void LinkReq::set_src(::NetProto::LinkSrc value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:NetProto.LinkReq.src)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
