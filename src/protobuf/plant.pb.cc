// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plant.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "plant.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
class Plant_CreateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Plant_Create> {
} _Plant_Create_default_instance_;
class Plant_WaterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Plant_Water> {
} _Plant_Water_default_instance_;
class Plant_WeatherDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Plant_Weather> {
} _Plant_Weather_default_instance_;
class Plant_PickFruit_ReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Plant_PickFruit_Req> {
} _Plant_PickFruit_Req_default_instance_;
class Plant_PickFruit_RespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Plant_PickFruit_Resp> {
} _Plant_PickFruit_Resp_default_instance_;
class Plant_Delete_ReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Plant_Delete_Req> {
} _Plant_Delete_Req_default_instance_;
class Plant_Delete_RespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Plant_Delete_Resp> {
} _Plant_Delete_Resp_default_instance_;
class Plant_StateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Plant_State> {
} _Plant_State_default_instance_;
class Plant_InfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Plant_Info> {
} _Plant_Info_default_instance_;

namespace protobuf_plant_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Create, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Create, plant_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Create, plant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Create, space_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Create, fruit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Create, energe_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Create, live_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Create, life_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Create, reproduct_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Create, denger_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Water, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Water, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Water, plant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Water, space_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Water, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Weather, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Weather, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Weather, space_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Weather, weather_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_PickFruit_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_PickFruit_Req, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_PickFruit_Req, plant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_PickFruit_Req, space_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_PickFruit_Resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_PickFruit_Resp, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_PickFruit_Resp, plant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_PickFruit_Resp, space_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_PickFruit_Resp, fruit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Delete_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Delete_Req, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Delete_Req, plant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Delete_Req, space_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Delete_Resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Delete_Resp, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Delete_Resp, plant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Delete_Resp, space_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Delete_Resp, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_State, plant_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_State, plant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_State, space_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_State, fruit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_State, live_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_State, life_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_State, reproduct_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_State, leaf_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_State, live_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_State, is_adult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_State, is_fruit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Info, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Info, plant_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Plant_Create)},
  { 15, -1, sizeof(Plant_Water)},
  { 24, -1, sizeof(Plant_Weather)},
  { 32, -1, sizeof(Plant_PickFruit_Req)},
  { 40, -1, sizeof(Plant_PickFruit_Resp)},
  { 49, -1, sizeof(Plant_Delete_Req)},
  { 57, -1, sizeof(Plant_Delete_Resp)},
  { 66, -1, sizeof(Plant_State)},
  { 82, -1, sizeof(Plant_Info)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Plant_Create_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Plant_Water_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Plant_Weather_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Plant_PickFruit_Req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Plant_PickFruit_Resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Plant_Delete_Req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Plant_Delete_Resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Plant_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Plant_Info_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "plant.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _Plant_Create_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Plant_Water_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Plant_Weather_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Plant_PickFruit_Req_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Plant_PickFruit_Resp_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Plant_Delete_Req_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Plant_Delete_Resp_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Plant_State_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Plant_Info_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::NetProto::protobuf_msg_5fhead_2eproto::InitDefaults();
  ::NetProto::protobuf_weather_5fraw_5fdata_2eproto::InitDefaults();
  _Plant_Create_default_instance_.DefaultConstruct();
  _Plant_Water_default_instance_.DefaultConstruct();
  _Plant_Weather_default_instance_.DefaultConstruct();
  _Plant_PickFruit_Req_default_instance_.DefaultConstruct();
  _Plant_PickFruit_Resp_default_instance_.DefaultConstruct();
  _Plant_Delete_Req_default_instance_.DefaultConstruct();
  _Plant_Delete_Resp_default_instance_.DefaultConstruct();
  _Plant_State_default_instance_.DefaultConstruct();
  _Plant_Info_default_instance_.DefaultConstruct();
  _Plant_Create_default_instance_.get_mutable()->head_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _Plant_Water_default_instance_.get_mutable()->head_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _Plant_Weather_default_instance_.get_mutable()->head_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _Plant_Weather_default_instance_.get_mutable()->weather_ = const_cast< ::NetProto::WeatherRawData*>(
      ::NetProto::WeatherRawData::internal_default_instance());
  _Plant_PickFruit_Req_default_instance_.get_mutable()->head_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _Plant_PickFruit_Resp_default_instance_.get_mutable()->head_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _Plant_Delete_Req_default_instance_.get_mutable()->head_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _Plant_Delete_Resp_default_instance_.get_mutable()->head_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _Plant_Info_default_instance_.get_mutable()->head_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013plant.proto\022\010NetProto\032\016msg_head.proto\032"
      "\026weather_raw_data.proto\"\343\001\n\014Plant_Create"
      "\022\037\n\004head\030\001 \001(\0132\021.NetProto.MsgHead\022\022\n\npla"
      "nt_type\030\002 \001(\t\022\020\n\010plant_id\030\003 \001(\t\022\020\n\010space"
      "_id\030\004 \001(\r\022\022\n\nfruit_type\030\005 \001(\t\022\023\n\013energe_"
      "type\030\006 \001(\t\022\021\n\tlive_type\030\007 \001(\t\022\021\n\tlife_ty"
      "pe\030\010 \001(\t\022\026\n\016reproduct_type\030\t \001(\t\022\023\n\013deng"
      "er_type\030\n \001(\t\"a\n\013Plant_Water\022\037\n\004head\030\001 \001"
      "(\0132\021.NetProto.MsgHead\022\020\n\010plant_id\030\002 \001(\t\022"
      "\020\n\010space_id\030\003 \001(\r\022\r\n\005value\030\004 \001(\002\"m\n\rPlan"
      "t_Weather\022\037\n\004head\030\001 \001(\0132\021.NetProto.MsgHe"
      "ad\022\020\n\010space_id\030\002 \001(\r\022)\n\007weather\030\003 \001(\0132\030."
      "NetProto.WeatherRawData\"Z\n\023Plant_PickFru"
      "it_Req\022\037\n\004head\030\001 \001(\0132\021.NetProto.MsgHead\022"
      "\020\n\010plant_id\030\002 \001(\t\022\020\n\010space_id\030\003 \001(\r\"j\n\024P"
      "lant_PickFruit_Resp\022\037\n\004head\030\001 \001(\0132\021.NetP"
      "roto.MsgHead\022\020\n\010plant_id\030\002 \001(\t\022\020\n\010space_"
      "id\030\003 \001(\r\022\r\n\005fruit\030\004 \001(\t\"W\n\020Plant_Delete_"
      "Req\022\037\n\004head\030\001 \001(\0132\021.NetProto.MsgHead\022\020\n\010"
      "plant_id\030\002 \001(\t\022\020\n\010space_id\030\003 \001(\r\"h\n\021Plan"
      "t_Delete_Resp\022\037\n\004head\030\001 \001(\0132\021.NetProto.M"
      "sgHead\022\020\n\010plant_id\030\002 \001(\t\022\020\n\010space_id\030\003 \001"
      "(\r\022\016\n\006result\030\004 \001(\010\"\346\001\n\013Plant_State\022\022\n\npl"
      "ant_type\030\001 \001(\t\022\020\n\010plant_id\030\002 \001(\t\022\020\n\010spac"
      "e_id\030\003 \001(\r\022\022\n\nfruit_type\030\004 \001(\t\022\022\n\nlive_s"
      "tate\030\005 \001(\t\022\022\n\nlife_stage\030\006 \001(\t\022\027\n\017reprod"
      "uct_state\030\007 \001(\t\022\022\n\nleaf_level\030\010 \001(\002\022\022\n\nl"
      "ive_level\030\t \001(\002\022\020\n\010is_adult\030\n \001(\010\022\020\n\010is_"
      "fruit\030\013 \001(\010\"S\n\nPlant_Info\022\037\n\004head\030\001 \001(\0132"
      "\021.NetProto.MsgHead\022$\n\005plant\030\002 \003(\0132\025.NetP"
      "roto.Plant_Stateb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plant.proto", &protobuf_RegisterTypes);
  ::NetProto::protobuf_msg_5fhead_2eproto::AddDescriptors();
  ::NetProto::protobuf_weather_5fraw_5fdata_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_plant_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Plant_Create::kHeadFieldNumber;
const int Plant_Create::kPlantTypeFieldNumber;
const int Plant_Create::kPlantIdFieldNumber;
const int Plant_Create::kSpaceIdFieldNumber;
const int Plant_Create::kFruitTypeFieldNumber;
const int Plant_Create::kEnergeTypeFieldNumber;
const int Plant_Create::kLiveTypeFieldNumber;
const int Plant_Create::kLifeTypeFieldNumber;
const int Plant_Create::kReproductTypeFieldNumber;
const int Plant_Create::kDengerTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Plant_Create::Plant_Create()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Plant_Create)
}
Plant_Create::Plant_Create(const Plant_Create& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plant_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.plant_type().size() > 0) {
    plant_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_type_);
  }
  plant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.plant_id().size() > 0) {
    plant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_id_);
  }
  fruit_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fruit_type().size() > 0) {
    fruit_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fruit_type_);
  }
  energe_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.energe_type().size() > 0) {
    energe_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.energe_type_);
  }
  live_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.live_type().size() > 0) {
    live_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.live_type_);
  }
  life_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.life_type().size() > 0) {
    life_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.life_type_);
  }
  reproduct_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reproduct_type().size() > 0) {
    reproduct_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reproduct_type_);
  }
  denger_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.denger_type().size() > 0) {
    denger_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denger_type_);
  }
  if (from.has_head()) {
    head_ = new ::NetProto::MsgHead(*from.head_);
  } else {
    head_ = NULL;
  }
  space_id_ = from.space_id_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Plant_Create)
}

void Plant_Create::SharedCtor() {
  plant_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fruit_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  energe_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  live_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  life_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reproduct_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  denger_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&head_, 0, reinterpret_cast<char*>(&space_id_) -
    reinterpret_cast<char*>(&head_) + sizeof(space_id_));
  _cached_size_ = 0;
}

Plant_Create::~Plant_Create() {
  // @@protoc_insertion_point(destructor:NetProto.Plant_Create)
  SharedDtor();
}

void Plant_Create::SharedDtor() {
  plant_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plant_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fruit_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  energe_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  live_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  life_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reproduct_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  denger_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void Plant_Create::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plant_Create::descriptor() {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Plant_Create& Plant_Create::default_instance() {
  protobuf_plant_2eproto::InitDefaults();
  return *internal_default_instance();
}

Plant_Create* Plant_Create::New(::google::protobuf::Arena* arena) const {
  Plant_Create* n = new Plant_Create;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Plant_Create::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Plant_Create)
  plant_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fruit_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  energe_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  live_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  life_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reproduct_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  denger_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  space_id_ = 0u;
}

bool Plant_Create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Plant_Create)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string plant_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plant_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plant_type().data(), this->plant_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_Create.plant_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string plant_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plant_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plant_id().data(), this->plant_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_Create.plant_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 space_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &space_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fruit_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fruit_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fruit_type().data(), this->fruit_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_Create.fruit_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string energe_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_energe_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->energe_type().data(), this->energe_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_Create.energe_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string live_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_live_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->live_type().data(), this->live_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_Create.live_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string life_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_life_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->life_type().data(), this->life_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_Create.life_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reproduct_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reproduct_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reproduct_type().data(), this->reproduct_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_Create.reproduct_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string denger_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_denger_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->denger_type().data(), this->denger_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_Create.denger_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Plant_Create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Plant_Create)
  return false;
#undef DO_
}

void Plant_Create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Plant_Create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // string plant_type = 2;
  if (this->plant_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_type().data(), this->plant_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.plant_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->plant_type(), output);
  }

  // string plant_id = 3;
  if (this->plant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_id().data(), this->plant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.plant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->plant_id(), output);
  }

  // uint32 space_id = 4;
  if (this->space_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->space_id(), output);
  }

  // string fruit_type = 5;
  if (this->fruit_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fruit_type().data(), this->fruit_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.fruit_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fruit_type(), output);
  }

  // string energe_type = 6;
  if (this->energe_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->energe_type().data(), this->energe_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.energe_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->energe_type(), output);
  }

  // string live_type = 7;
  if (this->live_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->live_type().data(), this->live_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.live_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->live_type(), output);
  }

  // string life_type = 8;
  if (this->life_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->life_type().data(), this->life_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.life_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->life_type(), output);
  }

  // string reproduct_type = 9;
  if (this->reproduct_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reproduct_type().data(), this->reproduct_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.reproduct_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->reproduct_type(), output);
  }

  // string denger_type = 10;
  if (this->denger_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->denger_type().data(), this->denger_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.denger_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->denger_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Plant_Create)
}

::google::protobuf::uint8* Plant_Create::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Plant_Create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // string plant_type = 2;
  if (this->plant_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_type().data(), this->plant_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.plant_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->plant_type(), target);
  }

  // string plant_id = 3;
  if (this->plant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_id().data(), this->plant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.plant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->plant_id(), target);
  }

  // uint32 space_id = 4;
  if (this->space_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->space_id(), target);
  }

  // string fruit_type = 5;
  if (this->fruit_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fruit_type().data(), this->fruit_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.fruit_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fruit_type(), target);
  }

  // string energe_type = 6;
  if (this->energe_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->energe_type().data(), this->energe_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.energe_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->energe_type(), target);
  }

  // string live_type = 7;
  if (this->live_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->live_type().data(), this->live_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.live_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->live_type(), target);
  }

  // string life_type = 8;
  if (this->life_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->life_type().data(), this->life_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.life_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->life_type(), target);
  }

  // string reproduct_type = 9;
  if (this->reproduct_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reproduct_type().data(), this->reproduct_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.reproduct_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->reproduct_type(), target);
  }

  // string denger_type = 10;
  if (this->denger_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->denger_type().data(), this->denger_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Create.denger_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->denger_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Plant_Create)
  return target;
}

size_t Plant_Create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Plant_Create)
  size_t total_size = 0;

  // string plant_type = 2;
  if (this->plant_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plant_type());
  }

  // string plant_id = 3;
  if (this->plant_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plant_id());
  }

  // string fruit_type = 5;
  if (this->fruit_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fruit_type());
  }

  // string energe_type = 6;
  if (this->energe_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->energe_type());
  }

  // string live_type = 7;
  if (this->live_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->live_type());
  }

  // string life_type = 8;
  if (this->life_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->life_type());
  }

  // string reproduct_type = 9;
  if (this->reproduct_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reproduct_type());
  }

  // string denger_type = 10;
  if (this->denger_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->denger_type());
  }

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // uint32 space_id = 4;
  if (this->space_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->space_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plant_Create::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Plant_Create)
  GOOGLE_DCHECK_NE(&from, this);
  const Plant_Create* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Plant_Create>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Plant_Create)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Plant_Create)
    MergeFrom(*source);
  }
}

void Plant_Create::MergeFrom(const Plant_Create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Plant_Create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plant_type().size() > 0) {

    plant_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_type_);
  }
  if (from.plant_id().size() > 0) {

    plant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_id_);
  }
  if (from.fruit_type().size() > 0) {

    fruit_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fruit_type_);
  }
  if (from.energe_type().size() > 0) {

    energe_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.energe_type_);
  }
  if (from.live_type().size() > 0) {

    live_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.live_type_);
  }
  if (from.life_type().size() > 0) {

    life_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.life_type_);
  }
  if (from.reproduct_type().size() > 0) {

    reproduct_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reproduct_type_);
  }
  if (from.denger_type().size() > 0) {

    denger_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denger_type_);
  }
  if (from.has_head()) {
    mutable_head()->::NetProto::MsgHead::MergeFrom(from.head());
  }
  if (from.space_id() != 0) {
    set_space_id(from.space_id());
  }
}

void Plant_Create::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Plant_Create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plant_Create::CopyFrom(const Plant_Create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Plant_Create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plant_Create::IsInitialized() const {
  return true;
}

void Plant_Create::Swap(Plant_Create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Plant_Create::InternalSwap(Plant_Create* other) {
  plant_type_.Swap(&other->plant_type_);
  plant_id_.Swap(&other->plant_id_);
  fruit_type_.Swap(&other->fruit_type_);
  energe_type_.Swap(&other->energe_type_);
  live_type_.Swap(&other->live_type_);
  life_type_.Swap(&other->life_type_);
  reproduct_type_.Swap(&other->reproduct_type_);
  denger_type_.Swap(&other->denger_type_);
  std::swap(head_, other->head_);
  std::swap(space_id_, other->space_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Plant_Create::GetMetadata() const {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Plant_Create

// .NetProto.MsgHead head = 1;
bool Plant_Create::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void Plant_Create::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::NetProto::MsgHead& Plant_Create::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* Plant_Create::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.head)
  return head_;
}
::NetProto::MsgHead* Plant_Create::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
void Plant_Create::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.head)
}

// string plant_type = 2;
void Plant_Create::clear_plant_type() {
  plant_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_Create::plant_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.plant_type)
  return plant_type_.GetNoArena();
}
void Plant_Create::set_plant_type(const ::std::string& value) {
  
  plant_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.plant_type)
}
#if LANG_CXX11
void Plant_Create::set_plant_type(::std::string&& value) {
  
  plant_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.plant_type)
}
#endif
void Plant_Create::set_plant_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.plant_type)
}
void Plant_Create::set_plant_type(const char* value, size_t size) {
  
  plant_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.plant_type)
}
::std::string* Plant_Create::mutable_plant_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.plant_type)
  return plant_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_Create::release_plant_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.plant_type)
  
  return plant_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_Create::set_allocated_plant_type(::std::string* plant_type) {
  if (plant_type != NULL) {
    
  } else {
    
  }
  plant_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.plant_type)
}

// string plant_id = 3;
void Plant_Create::clear_plant_id() {
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_Create::plant_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.plant_id)
  return plant_id_.GetNoArena();
}
void Plant_Create::set_plant_id(const ::std::string& value) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.plant_id)
}
#if LANG_CXX11
void Plant_Create::set_plant_id(::std::string&& value) {
  
  plant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.plant_id)
}
#endif
void Plant_Create::set_plant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.plant_id)
}
void Plant_Create::set_plant_id(const char* value, size_t size) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.plant_id)
}
::std::string* Plant_Create::mutable_plant_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.plant_id)
  return plant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_Create::release_plant_id() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.plant_id)
  
  return plant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_Create::set_allocated_plant_id(::std::string* plant_id) {
  if (plant_id != NULL) {
    
  } else {
    
  }
  plant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.plant_id)
}

// uint32 space_id = 4;
void Plant_Create::clear_space_id() {
  space_id_ = 0u;
}
::google::protobuf::uint32 Plant_Create::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.space_id)
  return space_id_;
}
void Plant_Create::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.space_id)
}

// string fruit_type = 5;
void Plant_Create::clear_fruit_type() {
  fruit_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_Create::fruit_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.fruit_type)
  return fruit_type_.GetNoArena();
}
void Plant_Create::set_fruit_type(const ::std::string& value) {
  
  fruit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.fruit_type)
}
#if LANG_CXX11
void Plant_Create::set_fruit_type(::std::string&& value) {
  
  fruit_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.fruit_type)
}
#endif
void Plant_Create::set_fruit_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fruit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.fruit_type)
}
void Plant_Create::set_fruit_type(const char* value, size_t size) {
  
  fruit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.fruit_type)
}
::std::string* Plant_Create::mutable_fruit_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.fruit_type)
  return fruit_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_Create::release_fruit_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.fruit_type)
  
  return fruit_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_Create::set_allocated_fruit_type(::std::string* fruit_type) {
  if (fruit_type != NULL) {
    
  } else {
    
  }
  fruit_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fruit_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.fruit_type)
}

// string energe_type = 6;
void Plant_Create::clear_energe_type() {
  energe_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_Create::energe_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.energe_type)
  return energe_type_.GetNoArena();
}
void Plant_Create::set_energe_type(const ::std::string& value) {
  
  energe_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.energe_type)
}
#if LANG_CXX11
void Plant_Create::set_energe_type(::std::string&& value) {
  
  energe_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.energe_type)
}
#endif
void Plant_Create::set_energe_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  energe_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.energe_type)
}
void Plant_Create::set_energe_type(const char* value, size_t size) {
  
  energe_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.energe_type)
}
::std::string* Plant_Create::mutable_energe_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.energe_type)
  return energe_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_Create::release_energe_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.energe_type)
  
  return energe_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_Create::set_allocated_energe_type(::std::string* energe_type) {
  if (energe_type != NULL) {
    
  } else {
    
  }
  energe_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), energe_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.energe_type)
}

// string live_type = 7;
void Plant_Create::clear_live_type() {
  live_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_Create::live_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.live_type)
  return live_type_.GetNoArena();
}
void Plant_Create::set_live_type(const ::std::string& value) {
  
  live_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.live_type)
}
#if LANG_CXX11
void Plant_Create::set_live_type(::std::string&& value) {
  
  live_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.live_type)
}
#endif
void Plant_Create::set_live_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  live_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.live_type)
}
void Plant_Create::set_live_type(const char* value, size_t size) {
  
  live_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.live_type)
}
::std::string* Plant_Create::mutable_live_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.live_type)
  return live_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_Create::release_live_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.live_type)
  
  return live_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_Create::set_allocated_live_type(::std::string* live_type) {
  if (live_type != NULL) {
    
  } else {
    
  }
  live_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), live_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.live_type)
}

// string life_type = 8;
void Plant_Create::clear_life_type() {
  life_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_Create::life_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.life_type)
  return life_type_.GetNoArena();
}
void Plant_Create::set_life_type(const ::std::string& value) {
  
  life_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.life_type)
}
#if LANG_CXX11
void Plant_Create::set_life_type(::std::string&& value) {
  
  life_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.life_type)
}
#endif
void Plant_Create::set_life_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  life_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.life_type)
}
void Plant_Create::set_life_type(const char* value, size_t size) {
  
  life_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.life_type)
}
::std::string* Plant_Create::mutable_life_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.life_type)
  return life_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_Create::release_life_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.life_type)
  
  return life_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_Create::set_allocated_life_type(::std::string* life_type) {
  if (life_type != NULL) {
    
  } else {
    
  }
  life_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), life_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.life_type)
}

// string reproduct_type = 9;
void Plant_Create::clear_reproduct_type() {
  reproduct_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_Create::reproduct_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.reproduct_type)
  return reproduct_type_.GetNoArena();
}
void Plant_Create::set_reproduct_type(const ::std::string& value) {
  
  reproduct_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.reproduct_type)
}
#if LANG_CXX11
void Plant_Create::set_reproduct_type(::std::string&& value) {
  
  reproduct_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.reproduct_type)
}
#endif
void Plant_Create::set_reproduct_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reproduct_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.reproduct_type)
}
void Plant_Create::set_reproduct_type(const char* value, size_t size) {
  
  reproduct_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.reproduct_type)
}
::std::string* Plant_Create::mutable_reproduct_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.reproduct_type)
  return reproduct_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_Create::release_reproduct_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.reproduct_type)
  
  return reproduct_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_Create::set_allocated_reproduct_type(::std::string* reproduct_type) {
  if (reproduct_type != NULL) {
    
  } else {
    
  }
  reproduct_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reproduct_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.reproduct_type)
}

// string denger_type = 10;
void Plant_Create::clear_denger_type() {
  denger_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_Create::denger_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.denger_type)
  return denger_type_.GetNoArena();
}
void Plant_Create::set_denger_type(const ::std::string& value) {
  
  denger_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.denger_type)
}
#if LANG_CXX11
void Plant_Create::set_denger_type(::std::string&& value) {
  
  denger_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.denger_type)
}
#endif
void Plant_Create::set_denger_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  denger_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.denger_type)
}
void Plant_Create::set_denger_type(const char* value, size_t size) {
  
  denger_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.denger_type)
}
::std::string* Plant_Create::mutable_denger_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.denger_type)
  return denger_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_Create::release_denger_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.denger_type)
  
  return denger_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_Create::set_allocated_denger_type(::std::string* denger_type) {
  if (denger_type != NULL) {
    
  } else {
    
  }
  denger_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), denger_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.denger_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Plant_Water::kHeadFieldNumber;
const int Plant_Water::kPlantIdFieldNumber;
const int Plant_Water::kSpaceIdFieldNumber;
const int Plant_Water::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Plant_Water::Plant_Water()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Plant_Water)
}
Plant_Water::Plant_Water(const Plant_Water& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.plant_id().size() > 0) {
    plant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_id_);
  }
  if (from.has_head()) {
    head_ = new ::NetProto::MsgHead(*from.head_);
  } else {
    head_ = NULL;
  }
  ::memcpy(&space_id_, &from.space_id_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&space_id_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:NetProto.Plant_Water)
}

void Plant_Water::SharedCtor() {
  plant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&head_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&head_) + sizeof(value_));
  _cached_size_ = 0;
}

Plant_Water::~Plant_Water() {
  // @@protoc_insertion_point(destructor:NetProto.Plant_Water)
  SharedDtor();
}

void Plant_Water::SharedDtor() {
  plant_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void Plant_Water::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plant_Water::descriptor() {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Plant_Water& Plant_Water::default_instance() {
  protobuf_plant_2eproto::InitDefaults();
  return *internal_default_instance();
}

Plant_Water* Plant_Water::New(::google::protobuf::Arena* arena) const {
  Plant_Water* n = new Plant_Water;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Plant_Water::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Plant_Water)
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  ::memset(&space_id_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&space_id_) + sizeof(value_));
}

bool Plant_Water::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Plant_Water)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string plant_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plant_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plant_id().data(), this->plant_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_Water.plant_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 space_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &space_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Plant_Water)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Plant_Water)
  return false;
#undef DO_
}

void Plant_Water::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Plant_Water)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_id().data(), this->plant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Water.plant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->plant_id(), output);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->space_id(), output);
  }

  // float value = 4;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Plant_Water)
}

::google::protobuf::uint8* Plant_Water::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Plant_Water)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_id().data(), this->plant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Water.plant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->plant_id(), target);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->space_id(), target);
  }

  // float value = 4;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Plant_Water)
  return target;
}

size_t Plant_Water::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Plant_Water)
  size_t total_size = 0;

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plant_id());
  }

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->space_id());
  }

  // float value = 4;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plant_Water::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Plant_Water)
  GOOGLE_DCHECK_NE(&from, this);
  const Plant_Water* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Plant_Water>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Plant_Water)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Plant_Water)
    MergeFrom(*source);
  }
}

void Plant_Water::MergeFrom(const Plant_Water& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Plant_Water)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plant_id().size() > 0) {

    plant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_id_);
  }
  if (from.has_head()) {
    mutable_head()->::NetProto::MsgHead::MergeFrom(from.head());
  }
  if (from.space_id() != 0) {
    set_space_id(from.space_id());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Plant_Water::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Plant_Water)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plant_Water::CopyFrom(const Plant_Water& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Plant_Water)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plant_Water::IsInitialized() const {
  return true;
}

void Plant_Water::Swap(Plant_Water* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Plant_Water::InternalSwap(Plant_Water* other) {
  plant_id_.Swap(&other->plant_id_);
  std::swap(head_, other->head_);
  std::swap(space_id_, other->space_id_);
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Plant_Water::GetMetadata() const {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Plant_Water

// .NetProto.MsgHead head = 1;
bool Plant_Water::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void Plant_Water::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::NetProto::MsgHead& Plant_Water::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Water.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* Plant_Water::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Water.head)
  return head_;
}
::NetProto::MsgHead* Plant_Water::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Water.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
void Plant_Water::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Water.head)
}

// string plant_id = 2;
void Plant_Water::clear_plant_id() {
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_Water::plant_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Water.plant_id)
  return plant_id_.GetNoArena();
}
void Plant_Water::set_plant_id(const ::std::string& value) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Water.plant_id)
}
#if LANG_CXX11
void Plant_Water::set_plant_id(::std::string&& value) {
  
  plant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Water.plant_id)
}
#endif
void Plant_Water::set_plant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Water.plant_id)
}
void Plant_Water::set_plant_id(const char* value, size_t size) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Water.plant_id)
}
::std::string* Plant_Water::mutable_plant_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Water.plant_id)
  return plant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_Water::release_plant_id() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Water.plant_id)
  
  return plant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_Water::set_allocated_plant_id(::std::string* plant_id) {
  if (plant_id != NULL) {
    
  } else {
    
  }
  plant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Water.plant_id)
}

// uint32 space_id = 3;
void Plant_Water::clear_space_id() {
  space_id_ = 0u;
}
::google::protobuf::uint32 Plant_Water::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Water.space_id)
  return space_id_;
}
void Plant_Water::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_Water.space_id)
}

// float value = 4;
void Plant_Water::clear_value() {
  value_ = 0;
}
float Plant_Water::value() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Water.value)
  return value_;
}
void Plant_Water::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_Water.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Plant_Weather::kHeadFieldNumber;
const int Plant_Weather::kSpaceIdFieldNumber;
const int Plant_Weather::kWeatherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Plant_Weather::Plant_Weather()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Plant_Weather)
}
Plant_Weather::Plant_Weather(const Plant_Weather& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::NetProto::MsgHead(*from.head_);
  } else {
    head_ = NULL;
  }
  if (from.has_weather()) {
    weather_ = new ::NetProto::WeatherRawData(*from.weather_);
  } else {
    weather_ = NULL;
  }
  space_id_ = from.space_id_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Plant_Weather)
}

void Plant_Weather::SharedCtor() {
  ::memset(&head_, 0, reinterpret_cast<char*>(&space_id_) -
    reinterpret_cast<char*>(&head_) + sizeof(space_id_));
  _cached_size_ = 0;
}

Plant_Weather::~Plant_Weather() {
  // @@protoc_insertion_point(destructor:NetProto.Plant_Weather)
  SharedDtor();
}

void Plant_Weather::SharedDtor() {
  if (this != internal_default_instance()) {
    delete head_;
  }
  if (this != internal_default_instance()) {
    delete weather_;
  }
}

void Plant_Weather::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plant_Weather::descriptor() {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Plant_Weather& Plant_Weather::default_instance() {
  protobuf_plant_2eproto::InitDefaults();
  return *internal_default_instance();
}

Plant_Weather* Plant_Weather::New(::google::protobuf::Arena* arena) const {
  Plant_Weather* n = new Plant_Weather;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Plant_Weather::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Plant_Weather)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  if (GetArenaNoVirtual() == NULL && weather_ != NULL) {
    delete weather_;
  }
  weather_ = NULL;
  space_id_ = 0u;
}

bool Plant_Weather::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Plant_Weather)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 space_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &space_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.WeatherRawData weather = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weather()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Plant_Weather)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Plant_Weather)
  return false;
#undef DO_
}

void Plant_Weather::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Plant_Weather)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // uint32 space_id = 2;
  if (this->space_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->space_id(), output);
  }

  // .NetProto.WeatherRawData weather = 3;
  if (this->has_weather()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weather_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Plant_Weather)
}

::google::protobuf::uint8* Plant_Weather::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Plant_Weather)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // uint32 space_id = 2;
  if (this->space_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->space_id(), target);
  }

  // .NetProto.WeatherRawData weather = 3;
  if (this->has_weather()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->weather_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Plant_Weather)
  return target;
}

size_t Plant_Weather::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Plant_Weather)
  size_t total_size = 0;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // .NetProto.WeatherRawData weather = 3;
  if (this->has_weather()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->weather_);
  }

  // uint32 space_id = 2;
  if (this->space_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->space_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plant_Weather::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Plant_Weather)
  GOOGLE_DCHECK_NE(&from, this);
  const Plant_Weather* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Plant_Weather>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Plant_Weather)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Plant_Weather)
    MergeFrom(*source);
  }
}

void Plant_Weather::MergeFrom(const Plant_Weather& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Plant_Weather)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::NetProto::MsgHead::MergeFrom(from.head());
  }
  if (from.has_weather()) {
    mutable_weather()->::NetProto::WeatherRawData::MergeFrom(from.weather());
  }
  if (from.space_id() != 0) {
    set_space_id(from.space_id());
  }
}

void Plant_Weather::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Plant_Weather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plant_Weather::CopyFrom(const Plant_Weather& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Plant_Weather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plant_Weather::IsInitialized() const {
  return true;
}

void Plant_Weather::Swap(Plant_Weather* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Plant_Weather::InternalSwap(Plant_Weather* other) {
  std::swap(head_, other->head_);
  std::swap(weather_, other->weather_);
  std::swap(space_id_, other->space_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Plant_Weather::GetMetadata() const {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Plant_Weather

// .NetProto.MsgHead head = 1;
bool Plant_Weather::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void Plant_Weather::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::NetProto::MsgHead& Plant_Weather::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Weather.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* Plant_Weather::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Weather.head)
  return head_;
}
::NetProto::MsgHead* Plant_Weather::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Weather.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
void Plant_Weather::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Weather.head)
}

// uint32 space_id = 2;
void Plant_Weather::clear_space_id() {
  space_id_ = 0u;
}
::google::protobuf::uint32 Plant_Weather::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Weather.space_id)
  return space_id_;
}
void Plant_Weather::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_Weather.space_id)
}

// .NetProto.WeatherRawData weather = 3;
bool Plant_Weather::has_weather() const {
  return this != internal_default_instance() && weather_ != NULL;
}
void Plant_Weather::clear_weather() {
  if (GetArenaNoVirtual() == NULL && weather_ != NULL) delete weather_;
  weather_ = NULL;
}
const ::NetProto::WeatherRawData& Plant_Weather::weather() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Weather.weather)
  return weather_ != NULL ? *weather_
                         : *::NetProto::WeatherRawData::internal_default_instance();
}
::NetProto::WeatherRawData* Plant_Weather::mutable_weather() {
  
  if (weather_ == NULL) {
    weather_ = new ::NetProto::WeatherRawData;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Weather.weather)
  return weather_;
}
::NetProto::WeatherRawData* Plant_Weather::release_weather() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Weather.weather)
  
  ::NetProto::WeatherRawData* temp = weather_;
  weather_ = NULL;
  return temp;
}
void Plant_Weather::set_allocated_weather(::NetProto::WeatherRawData* weather) {
  delete weather_;
  weather_ = weather;
  if (weather) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Weather.weather)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Plant_PickFruit_Req::kHeadFieldNumber;
const int Plant_PickFruit_Req::kPlantIdFieldNumber;
const int Plant_PickFruit_Req::kSpaceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Plant_PickFruit_Req::Plant_PickFruit_Req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Plant_PickFruit_Req)
}
Plant_PickFruit_Req::Plant_PickFruit_Req(const Plant_PickFruit_Req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.plant_id().size() > 0) {
    plant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_id_);
  }
  if (from.has_head()) {
    head_ = new ::NetProto::MsgHead(*from.head_);
  } else {
    head_ = NULL;
  }
  space_id_ = from.space_id_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Plant_PickFruit_Req)
}

void Plant_PickFruit_Req::SharedCtor() {
  plant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&head_, 0, reinterpret_cast<char*>(&space_id_) -
    reinterpret_cast<char*>(&head_) + sizeof(space_id_));
  _cached_size_ = 0;
}

Plant_PickFruit_Req::~Plant_PickFruit_Req() {
  // @@protoc_insertion_point(destructor:NetProto.Plant_PickFruit_Req)
  SharedDtor();
}

void Plant_PickFruit_Req::SharedDtor() {
  plant_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void Plant_PickFruit_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plant_PickFruit_Req::descriptor() {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Plant_PickFruit_Req& Plant_PickFruit_Req::default_instance() {
  protobuf_plant_2eproto::InitDefaults();
  return *internal_default_instance();
}

Plant_PickFruit_Req* Plant_PickFruit_Req::New(::google::protobuf::Arena* arena) const {
  Plant_PickFruit_Req* n = new Plant_PickFruit_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Plant_PickFruit_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Plant_PickFruit_Req)
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  space_id_ = 0u;
}

bool Plant_PickFruit_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Plant_PickFruit_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string plant_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plant_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plant_id().data(), this->plant_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_PickFruit_Req.plant_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 space_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &space_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Plant_PickFruit_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Plant_PickFruit_Req)
  return false;
#undef DO_
}

void Plant_PickFruit_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Plant_PickFruit_Req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_id().data(), this->plant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_PickFruit_Req.plant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->plant_id(), output);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->space_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Plant_PickFruit_Req)
}

::google::protobuf::uint8* Plant_PickFruit_Req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Plant_PickFruit_Req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_id().data(), this->plant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_PickFruit_Req.plant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->plant_id(), target);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->space_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Plant_PickFruit_Req)
  return target;
}

size_t Plant_PickFruit_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Plant_PickFruit_Req)
  size_t total_size = 0;

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plant_id());
  }

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->space_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plant_PickFruit_Req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Plant_PickFruit_Req)
  GOOGLE_DCHECK_NE(&from, this);
  const Plant_PickFruit_Req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Plant_PickFruit_Req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Plant_PickFruit_Req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Plant_PickFruit_Req)
    MergeFrom(*source);
  }
}

void Plant_PickFruit_Req::MergeFrom(const Plant_PickFruit_Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Plant_PickFruit_Req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plant_id().size() > 0) {

    plant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_id_);
  }
  if (from.has_head()) {
    mutable_head()->::NetProto::MsgHead::MergeFrom(from.head());
  }
  if (from.space_id() != 0) {
    set_space_id(from.space_id());
  }
}

void Plant_PickFruit_Req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Plant_PickFruit_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plant_PickFruit_Req::CopyFrom(const Plant_PickFruit_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Plant_PickFruit_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plant_PickFruit_Req::IsInitialized() const {
  return true;
}

void Plant_PickFruit_Req::Swap(Plant_PickFruit_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Plant_PickFruit_Req::InternalSwap(Plant_PickFruit_Req* other) {
  plant_id_.Swap(&other->plant_id_);
  std::swap(head_, other->head_);
  std::swap(space_id_, other->space_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Plant_PickFruit_Req::GetMetadata() const {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Plant_PickFruit_Req

// .NetProto.MsgHead head = 1;
bool Plant_PickFruit_Req::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void Plant_PickFruit_Req::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::NetProto::MsgHead& Plant_PickFruit_Req::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_PickFruit_Req.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* Plant_PickFruit_Req::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_PickFruit_Req.head)
  return head_;
}
::NetProto::MsgHead* Plant_PickFruit_Req::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_PickFruit_Req.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
void Plant_PickFruit_Req::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_PickFruit_Req.head)
}

// string plant_id = 2;
void Plant_PickFruit_Req::clear_plant_id() {
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_PickFruit_Req::plant_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_PickFruit_Req.plant_id)
  return plant_id_.GetNoArena();
}
void Plant_PickFruit_Req::set_plant_id(const ::std::string& value) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_PickFruit_Req.plant_id)
}
#if LANG_CXX11
void Plant_PickFruit_Req::set_plant_id(::std::string&& value) {
  
  plant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_PickFruit_Req.plant_id)
}
#endif
void Plant_PickFruit_Req::set_plant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_PickFruit_Req.plant_id)
}
void Plant_PickFruit_Req::set_plant_id(const char* value, size_t size) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_PickFruit_Req.plant_id)
}
::std::string* Plant_PickFruit_Req::mutable_plant_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_PickFruit_Req.plant_id)
  return plant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_PickFruit_Req::release_plant_id() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_PickFruit_Req.plant_id)
  
  return plant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_PickFruit_Req::set_allocated_plant_id(::std::string* plant_id) {
  if (plant_id != NULL) {
    
  } else {
    
  }
  plant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_PickFruit_Req.plant_id)
}

// uint32 space_id = 3;
void Plant_PickFruit_Req::clear_space_id() {
  space_id_ = 0u;
}
::google::protobuf::uint32 Plant_PickFruit_Req::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_PickFruit_Req.space_id)
  return space_id_;
}
void Plant_PickFruit_Req::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_PickFruit_Req.space_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Plant_PickFruit_Resp::kHeadFieldNumber;
const int Plant_PickFruit_Resp::kPlantIdFieldNumber;
const int Plant_PickFruit_Resp::kSpaceIdFieldNumber;
const int Plant_PickFruit_Resp::kFruitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Plant_PickFruit_Resp::Plant_PickFruit_Resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Plant_PickFruit_Resp)
}
Plant_PickFruit_Resp::Plant_PickFruit_Resp(const Plant_PickFruit_Resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.plant_id().size() > 0) {
    plant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_id_);
  }
  fruit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fruit().size() > 0) {
    fruit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fruit_);
  }
  if (from.has_head()) {
    head_ = new ::NetProto::MsgHead(*from.head_);
  } else {
    head_ = NULL;
  }
  space_id_ = from.space_id_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Plant_PickFruit_Resp)
}

void Plant_PickFruit_Resp::SharedCtor() {
  plant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fruit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&head_, 0, reinterpret_cast<char*>(&space_id_) -
    reinterpret_cast<char*>(&head_) + sizeof(space_id_));
  _cached_size_ = 0;
}

Plant_PickFruit_Resp::~Plant_PickFruit_Resp() {
  // @@protoc_insertion_point(destructor:NetProto.Plant_PickFruit_Resp)
  SharedDtor();
}

void Plant_PickFruit_Resp::SharedDtor() {
  plant_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fruit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void Plant_PickFruit_Resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plant_PickFruit_Resp::descriptor() {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Plant_PickFruit_Resp& Plant_PickFruit_Resp::default_instance() {
  protobuf_plant_2eproto::InitDefaults();
  return *internal_default_instance();
}

Plant_PickFruit_Resp* Plant_PickFruit_Resp::New(::google::protobuf::Arena* arena) const {
  Plant_PickFruit_Resp* n = new Plant_PickFruit_Resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Plant_PickFruit_Resp::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Plant_PickFruit_Resp)
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fruit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  space_id_ = 0u;
}

bool Plant_PickFruit_Resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Plant_PickFruit_Resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string plant_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plant_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plant_id().data(), this->plant_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_PickFruit_Resp.plant_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 space_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &space_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fruit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fruit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fruit().data(), this->fruit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_PickFruit_Resp.fruit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Plant_PickFruit_Resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Plant_PickFruit_Resp)
  return false;
#undef DO_
}

void Plant_PickFruit_Resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Plant_PickFruit_Resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_id().data(), this->plant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_PickFruit_Resp.plant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->plant_id(), output);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->space_id(), output);
  }

  // string fruit = 4;
  if (this->fruit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fruit().data(), this->fruit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_PickFruit_Resp.fruit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fruit(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Plant_PickFruit_Resp)
}

::google::protobuf::uint8* Plant_PickFruit_Resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Plant_PickFruit_Resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_id().data(), this->plant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_PickFruit_Resp.plant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->plant_id(), target);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->space_id(), target);
  }

  // string fruit = 4;
  if (this->fruit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fruit().data(), this->fruit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_PickFruit_Resp.fruit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fruit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Plant_PickFruit_Resp)
  return target;
}

size_t Plant_PickFruit_Resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Plant_PickFruit_Resp)
  size_t total_size = 0;

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plant_id());
  }

  // string fruit = 4;
  if (this->fruit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fruit());
  }

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->space_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plant_PickFruit_Resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Plant_PickFruit_Resp)
  GOOGLE_DCHECK_NE(&from, this);
  const Plant_PickFruit_Resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Plant_PickFruit_Resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Plant_PickFruit_Resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Plant_PickFruit_Resp)
    MergeFrom(*source);
  }
}

void Plant_PickFruit_Resp::MergeFrom(const Plant_PickFruit_Resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Plant_PickFruit_Resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plant_id().size() > 0) {

    plant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_id_);
  }
  if (from.fruit().size() > 0) {

    fruit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fruit_);
  }
  if (from.has_head()) {
    mutable_head()->::NetProto::MsgHead::MergeFrom(from.head());
  }
  if (from.space_id() != 0) {
    set_space_id(from.space_id());
  }
}

void Plant_PickFruit_Resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Plant_PickFruit_Resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plant_PickFruit_Resp::CopyFrom(const Plant_PickFruit_Resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Plant_PickFruit_Resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plant_PickFruit_Resp::IsInitialized() const {
  return true;
}

void Plant_PickFruit_Resp::Swap(Plant_PickFruit_Resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Plant_PickFruit_Resp::InternalSwap(Plant_PickFruit_Resp* other) {
  plant_id_.Swap(&other->plant_id_);
  fruit_.Swap(&other->fruit_);
  std::swap(head_, other->head_);
  std::swap(space_id_, other->space_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Plant_PickFruit_Resp::GetMetadata() const {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Plant_PickFruit_Resp

// .NetProto.MsgHead head = 1;
bool Plant_PickFruit_Resp::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void Plant_PickFruit_Resp::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::NetProto::MsgHead& Plant_PickFruit_Resp::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_PickFruit_Resp.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* Plant_PickFruit_Resp::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_PickFruit_Resp.head)
  return head_;
}
::NetProto::MsgHead* Plant_PickFruit_Resp::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_PickFruit_Resp.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
void Plant_PickFruit_Resp::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_PickFruit_Resp.head)
}

// string plant_id = 2;
void Plant_PickFruit_Resp::clear_plant_id() {
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_PickFruit_Resp::plant_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_PickFruit_Resp.plant_id)
  return plant_id_.GetNoArena();
}
void Plant_PickFruit_Resp::set_plant_id(const ::std::string& value) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_PickFruit_Resp.plant_id)
}
#if LANG_CXX11
void Plant_PickFruit_Resp::set_plant_id(::std::string&& value) {
  
  plant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_PickFruit_Resp.plant_id)
}
#endif
void Plant_PickFruit_Resp::set_plant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_PickFruit_Resp.plant_id)
}
void Plant_PickFruit_Resp::set_plant_id(const char* value, size_t size) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_PickFruit_Resp.plant_id)
}
::std::string* Plant_PickFruit_Resp::mutable_plant_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_PickFruit_Resp.plant_id)
  return plant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_PickFruit_Resp::release_plant_id() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_PickFruit_Resp.plant_id)
  
  return plant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_PickFruit_Resp::set_allocated_plant_id(::std::string* plant_id) {
  if (plant_id != NULL) {
    
  } else {
    
  }
  plant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_PickFruit_Resp.plant_id)
}

// uint32 space_id = 3;
void Plant_PickFruit_Resp::clear_space_id() {
  space_id_ = 0u;
}
::google::protobuf::uint32 Plant_PickFruit_Resp::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_PickFruit_Resp.space_id)
  return space_id_;
}
void Plant_PickFruit_Resp::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_PickFruit_Resp.space_id)
}

// string fruit = 4;
void Plant_PickFruit_Resp::clear_fruit() {
  fruit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_PickFruit_Resp::fruit() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_PickFruit_Resp.fruit)
  return fruit_.GetNoArena();
}
void Plant_PickFruit_Resp::set_fruit(const ::std::string& value) {
  
  fruit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_PickFruit_Resp.fruit)
}
#if LANG_CXX11
void Plant_PickFruit_Resp::set_fruit(::std::string&& value) {
  
  fruit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_PickFruit_Resp.fruit)
}
#endif
void Plant_PickFruit_Resp::set_fruit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fruit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_PickFruit_Resp.fruit)
}
void Plant_PickFruit_Resp::set_fruit(const char* value, size_t size) {
  
  fruit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_PickFruit_Resp.fruit)
}
::std::string* Plant_PickFruit_Resp::mutable_fruit() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_PickFruit_Resp.fruit)
  return fruit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_PickFruit_Resp::release_fruit() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_PickFruit_Resp.fruit)
  
  return fruit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_PickFruit_Resp::set_allocated_fruit(::std::string* fruit) {
  if (fruit != NULL) {
    
  } else {
    
  }
  fruit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fruit);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_PickFruit_Resp.fruit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Plant_Delete_Req::kHeadFieldNumber;
const int Plant_Delete_Req::kPlantIdFieldNumber;
const int Plant_Delete_Req::kSpaceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Plant_Delete_Req::Plant_Delete_Req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Plant_Delete_Req)
}
Plant_Delete_Req::Plant_Delete_Req(const Plant_Delete_Req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.plant_id().size() > 0) {
    plant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_id_);
  }
  if (from.has_head()) {
    head_ = new ::NetProto::MsgHead(*from.head_);
  } else {
    head_ = NULL;
  }
  space_id_ = from.space_id_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Plant_Delete_Req)
}

void Plant_Delete_Req::SharedCtor() {
  plant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&head_, 0, reinterpret_cast<char*>(&space_id_) -
    reinterpret_cast<char*>(&head_) + sizeof(space_id_));
  _cached_size_ = 0;
}

Plant_Delete_Req::~Plant_Delete_Req() {
  // @@protoc_insertion_point(destructor:NetProto.Plant_Delete_Req)
  SharedDtor();
}

void Plant_Delete_Req::SharedDtor() {
  plant_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void Plant_Delete_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plant_Delete_Req::descriptor() {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Plant_Delete_Req& Plant_Delete_Req::default_instance() {
  protobuf_plant_2eproto::InitDefaults();
  return *internal_default_instance();
}

Plant_Delete_Req* Plant_Delete_Req::New(::google::protobuf::Arena* arena) const {
  Plant_Delete_Req* n = new Plant_Delete_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Plant_Delete_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Plant_Delete_Req)
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  space_id_ = 0u;
}

bool Plant_Delete_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Plant_Delete_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string plant_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plant_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plant_id().data(), this->plant_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_Delete_Req.plant_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 space_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &space_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Plant_Delete_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Plant_Delete_Req)
  return false;
#undef DO_
}

void Plant_Delete_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Plant_Delete_Req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_id().data(), this->plant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Delete_Req.plant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->plant_id(), output);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->space_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Plant_Delete_Req)
}

::google::protobuf::uint8* Plant_Delete_Req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Plant_Delete_Req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_id().data(), this->plant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Delete_Req.plant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->plant_id(), target);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->space_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Plant_Delete_Req)
  return target;
}

size_t Plant_Delete_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Plant_Delete_Req)
  size_t total_size = 0;

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plant_id());
  }

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->space_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plant_Delete_Req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Plant_Delete_Req)
  GOOGLE_DCHECK_NE(&from, this);
  const Plant_Delete_Req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Plant_Delete_Req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Plant_Delete_Req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Plant_Delete_Req)
    MergeFrom(*source);
  }
}

void Plant_Delete_Req::MergeFrom(const Plant_Delete_Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Plant_Delete_Req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plant_id().size() > 0) {

    plant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_id_);
  }
  if (from.has_head()) {
    mutable_head()->::NetProto::MsgHead::MergeFrom(from.head());
  }
  if (from.space_id() != 0) {
    set_space_id(from.space_id());
  }
}

void Plant_Delete_Req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Plant_Delete_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plant_Delete_Req::CopyFrom(const Plant_Delete_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Plant_Delete_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plant_Delete_Req::IsInitialized() const {
  return true;
}

void Plant_Delete_Req::Swap(Plant_Delete_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Plant_Delete_Req::InternalSwap(Plant_Delete_Req* other) {
  plant_id_.Swap(&other->plant_id_);
  std::swap(head_, other->head_);
  std::swap(space_id_, other->space_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Plant_Delete_Req::GetMetadata() const {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Plant_Delete_Req

// .NetProto.MsgHead head = 1;
bool Plant_Delete_Req::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void Plant_Delete_Req::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::NetProto::MsgHead& Plant_Delete_Req::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Delete_Req.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* Plant_Delete_Req::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Delete_Req.head)
  return head_;
}
::NetProto::MsgHead* Plant_Delete_Req::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Delete_Req.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
void Plant_Delete_Req::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Delete_Req.head)
}

// string plant_id = 2;
void Plant_Delete_Req::clear_plant_id() {
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_Delete_Req::plant_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Delete_Req.plant_id)
  return plant_id_.GetNoArena();
}
void Plant_Delete_Req::set_plant_id(const ::std::string& value) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Delete_Req.plant_id)
}
#if LANG_CXX11
void Plant_Delete_Req::set_plant_id(::std::string&& value) {
  
  plant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Delete_Req.plant_id)
}
#endif
void Plant_Delete_Req::set_plant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Delete_Req.plant_id)
}
void Plant_Delete_Req::set_plant_id(const char* value, size_t size) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Delete_Req.plant_id)
}
::std::string* Plant_Delete_Req::mutable_plant_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Delete_Req.plant_id)
  return plant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_Delete_Req::release_plant_id() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Delete_Req.plant_id)
  
  return plant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_Delete_Req::set_allocated_plant_id(::std::string* plant_id) {
  if (plant_id != NULL) {
    
  } else {
    
  }
  plant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Delete_Req.plant_id)
}

// uint32 space_id = 3;
void Plant_Delete_Req::clear_space_id() {
  space_id_ = 0u;
}
::google::protobuf::uint32 Plant_Delete_Req::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Delete_Req.space_id)
  return space_id_;
}
void Plant_Delete_Req::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_Delete_Req.space_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Plant_Delete_Resp::kHeadFieldNumber;
const int Plant_Delete_Resp::kPlantIdFieldNumber;
const int Plant_Delete_Resp::kSpaceIdFieldNumber;
const int Plant_Delete_Resp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Plant_Delete_Resp::Plant_Delete_Resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Plant_Delete_Resp)
}
Plant_Delete_Resp::Plant_Delete_Resp(const Plant_Delete_Resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.plant_id().size() > 0) {
    plant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_id_);
  }
  if (from.has_head()) {
    head_ = new ::NetProto::MsgHead(*from.head_);
  } else {
    head_ = NULL;
  }
  ::memcpy(&space_id_, &from.space_id_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&space_id_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:NetProto.Plant_Delete_Resp)
}

void Plant_Delete_Resp::SharedCtor() {
  plant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&head_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&head_) + sizeof(result_));
  _cached_size_ = 0;
}

Plant_Delete_Resp::~Plant_Delete_Resp() {
  // @@protoc_insertion_point(destructor:NetProto.Plant_Delete_Resp)
  SharedDtor();
}

void Plant_Delete_Resp::SharedDtor() {
  plant_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void Plant_Delete_Resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plant_Delete_Resp::descriptor() {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Plant_Delete_Resp& Plant_Delete_Resp::default_instance() {
  protobuf_plant_2eproto::InitDefaults();
  return *internal_default_instance();
}

Plant_Delete_Resp* Plant_Delete_Resp::New(::google::protobuf::Arena* arena) const {
  Plant_Delete_Resp* n = new Plant_Delete_Resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Plant_Delete_Resp::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Plant_Delete_Resp)
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  ::memset(&space_id_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&space_id_) + sizeof(result_));
}

bool Plant_Delete_Resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Plant_Delete_Resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string plant_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plant_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plant_id().data(), this->plant_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_Delete_Resp.plant_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 space_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &space_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Plant_Delete_Resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Plant_Delete_Resp)
  return false;
#undef DO_
}

void Plant_Delete_Resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Plant_Delete_Resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_id().data(), this->plant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Delete_Resp.plant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->plant_id(), output);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->space_id(), output);
  }

  // bool result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Plant_Delete_Resp)
}

::google::protobuf::uint8* Plant_Delete_Resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Plant_Delete_Resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_id().data(), this->plant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_Delete_Resp.plant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->plant_id(), target);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->space_id(), target);
  }

  // bool result = 4;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Plant_Delete_Resp)
  return target;
}

size_t Plant_Delete_Resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Plant_Delete_Resp)
  size_t total_size = 0;

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plant_id());
  }

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->space_id());
  }

  // bool result = 4;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plant_Delete_Resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Plant_Delete_Resp)
  GOOGLE_DCHECK_NE(&from, this);
  const Plant_Delete_Resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Plant_Delete_Resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Plant_Delete_Resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Plant_Delete_Resp)
    MergeFrom(*source);
  }
}

void Plant_Delete_Resp::MergeFrom(const Plant_Delete_Resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Plant_Delete_Resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plant_id().size() > 0) {

    plant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_id_);
  }
  if (from.has_head()) {
    mutable_head()->::NetProto::MsgHead::MergeFrom(from.head());
  }
  if (from.space_id() != 0) {
    set_space_id(from.space_id());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void Plant_Delete_Resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Plant_Delete_Resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plant_Delete_Resp::CopyFrom(const Plant_Delete_Resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Plant_Delete_Resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plant_Delete_Resp::IsInitialized() const {
  return true;
}

void Plant_Delete_Resp::Swap(Plant_Delete_Resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Plant_Delete_Resp::InternalSwap(Plant_Delete_Resp* other) {
  plant_id_.Swap(&other->plant_id_);
  std::swap(head_, other->head_);
  std::swap(space_id_, other->space_id_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Plant_Delete_Resp::GetMetadata() const {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Plant_Delete_Resp

// .NetProto.MsgHead head = 1;
bool Plant_Delete_Resp::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void Plant_Delete_Resp::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::NetProto::MsgHead& Plant_Delete_Resp::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Delete_Resp.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* Plant_Delete_Resp::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Delete_Resp.head)
  return head_;
}
::NetProto::MsgHead* Plant_Delete_Resp::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Delete_Resp.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
void Plant_Delete_Resp::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Delete_Resp.head)
}

// string plant_id = 2;
void Plant_Delete_Resp::clear_plant_id() {
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_Delete_Resp::plant_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Delete_Resp.plant_id)
  return plant_id_.GetNoArena();
}
void Plant_Delete_Resp::set_plant_id(const ::std::string& value) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Delete_Resp.plant_id)
}
#if LANG_CXX11
void Plant_Delete_Resp::set_plant_id(::std::string&& value) {
  
  plant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Delete_Resp.plant_id)
}
#endif
void Plant_Delete_Resp::set_plant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Delete_Resp.plant_id)
}
void Plant_Delete_Resp::set_plant_id(const char* value, size_t size) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Delete_Resp.plant_id)
}
::std::string* Plant_Delete_Resp::mutable_plant_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Delete_Resp.plant_id)
  return plant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_Delete_Resp::release_plant_id() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Delete_Resp.plant_id)
  
  return plant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_Delete_Resp::set_allocated_plant_id(::std::string* plant_id) {
  if (plant_id != NULL) {
    
  } else {
    
  }
  plant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Delete_Resp.plant_id)
}

// uint32 space_id = 3;
void Plant_Delete_Resp::clear_space_id() {
  space_id_ = 0u;
}
::google::protobuf::uint32 Plant_Delete_Resp::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Delete_Resp.space_id)
  return space_id_;
}
void Plant_Delete_Resp::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_Delete_Resp.space_id)
}

// bool result = 4;
void Plant_Delete_Resp::clear_result() {
  result_ = false;
}
bool Plant_Delete_Resp::result() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Delete_Resp.result)
  return result_;
}
void Plant_Delete_Resp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_Delete_Resp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Plant_State::kPlantTypeFieldNumber;
const int Plant_State::kPlantIdFieldNumber;
const int Plant_State::kSpaceIdFieldNumber;
const int Plant_State::kFruitTypeFieldNumber;
const int Plant_State::kLiveStateFieldNumber;
const int Plant_State::kLifeStageFieldNumber;
const int Plant_State::kReproductStateFieldNumber;
const int Plant_State::kLeafLevelFieldNumber;
const int Plant_State::kLiveLevelFieldNumber;
const int Plant_State::kIsAdultFieldNumber;
const int Plant_State::kIsFruitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Plant_State::Plant_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Plant_State)
}
Plant_State::Plant_State(const Plant_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plant_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.plant_type().size() > 0) {
    plant_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_type_);
  }
  plant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.plant_id().size() > 0) {
    plant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_id_);
  }
  fruit_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fruit_type().size() > 0) {
    fruit_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fruit_type_);
  }
  live_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.live_state().size() > 0) {
    live_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.live_state_);
  }
  life_stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.life_stage().size() > 0) {
    life_stage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.life_stage_);
  }
  reproduct_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reproduct_state().size() > 0) {
    reproduct_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reproduct_state_);
  }
  ::memcpy(&space_id_, &from.space_id_,
    reinterpret_cast<char*>(&is_fruit_) -
    reinterpret_cast<char*>(&space_id_) + sizeof(is_fruit_));
  // @@protoc_insertion_point(copy_constructor:NetProto.Plant_State)
}

void Plant_State::SharedCtor() {
  plant_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fruit_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  live_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  life_stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reproduct_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&space_id_, 0, reinterpret_cast<char*>(&is_fruit_) -
    reinterpret_cast<char*>(&space_id_) + sizeof(is_fruit_));
  _cached_size_ = 0;
}

Plant_State::~Plant_State() {
  // @@protoc_insertion_point(destructor:NetProto.Plant_State)
  SharedDtor();
}

void Plant_State::SharedDtor() {
  plant_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plant_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fruit_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  live_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  life_stage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reproduct_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Plant_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plant_State::descriptor() {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Plant_State& Plant_State::default_instance() {
  protobuf_plant_2eproto::InitDefaults();
  return *internal_default_instance();
}

Plant_State* Plant_State::New(::google::protobuf::Arena* arena) const {
  Plant_State* n = new Plant_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Plant_State::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Plant_State)
  plant_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fruit_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  live_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  life_stage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reproduct_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&space_id_, 0, reinterpret_cast<char*>(&is_fruit_) -
    reinterpret_cast<char*>(&space_id_) + sizeof(is_fruit_));
}

bool Plant_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Plant_State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string plant_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plant_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plant_type().data(), this->plant_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_State.plant_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string plant_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plant_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plant_id().data(), this->plant_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_State.plant_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 space_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &space_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fruit_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fruit_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fruit_type().data(), this->fruit_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_State.fruit_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string live_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_live_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->live_state().data(), this->live_state().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_State.live_state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string life_stage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_life_stage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->life_stage().data(), this->life_stage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_State.life_stage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reproduct_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reproduct_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reproduct_state().data(), this->reproduct_state().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Plant_State.reproduct_state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float leaf_level = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leaf_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float live_level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &live_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_adult = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_adult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_fruit = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fruit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Plant_State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Plant_State)
  return false;
#undef DO_
}

void Plant_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Plant_State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string plant_type = 1;
  if (this->plant_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_type().data(), this->plant_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_State.plant_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->plant_type(), output);
  }

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_id().data(), this->plant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_State.plant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->plant_id(), output);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->space_id(), output);
  }

  // string fruit_type = 4;
  if (this->fruit_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fruit_type().data(), this->fruit_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_State.fruit_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fruit_type(), output);
  }

  // string live_state = 5;
  if (this->live_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->live_state().data(), this->live_state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_State.live_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->live_state(), output);
  }

  // string life_stage = 6;
  if (this->life_stage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->life_stage().data(), this->life_stage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_State.life_stage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->life_stage(), output);
  }

  // string reproduct_state = 7;
  if (this->reproduct_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reproduct_state().data(), this->reproduct_state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_State.reproduct_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->reproduct_state(), output);
  }

  // float leaf_level = 8;
  if (this->leaf_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->leaf_level(), output);
  }

  // float live_level = 9;
  if (this->live_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->live_level(), output);
  }

  // bool is_adult = 10;
  if (this->is_adult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_adult(), output);
  }

  // bool is_fruit = 11;
  if (this->is_fruit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_fruit(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Plant_State)
}

::google::protobuf::uint8* Plant_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Plant_State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string plant_type = 1;
  if (this->plant_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_type().data(), this->plant_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_State.plant_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->plant_type(), target);
  }

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plant_id().data(), this->plant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_State.plant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->plant_id(), target);
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->space_id(), target);
  }

  // string fruit_type = 4;
  if (this->fruit_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fruit_type().data(), this->fruit_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_State.fruit_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fruit_type(), target);
  }

  // string live_state = 5;
  if (this->live_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->live_state().data(), this->live_state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_State.live_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->live_state(), target);
  }

  // string life_stage = 6;
  if (this->life_stage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->life_stage().data(), this->life_stage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_State.life_stage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->life_stage(), target);
  }

  // string reproduct_state = 7;
  if (this->reproduct_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reproduct_state().data(), this->reproduct_state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Plant_State.reproduct_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->reproduct_state(), target);
  }

  // float leaf_level = 8;
  if (this->leaf_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->leaf_level(), target);
  }

  // float live_level = 9;
  if (this->live_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->live_level(), target);
  }

  // bool is_adult = 10;
  if (this->is_adult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_adult(), target);
  }

  // bool is_fruit = 11;
  if (this->is_fruit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_fruit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Plant_State)
  return target;
}

size_t Plant_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Plant_State)
  size_t total_size = 0;

  // string plant_type = 1;
  if (this->plant_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plant_type());
  }

  // string plant_id = 2;
  if (this->plant_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plant_id());
  }

  // string fruit_type = 4;
  if (this->fruit_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fruit_type());
  }

  // string live_state = 5;
  if (this->live_state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->live_state());
  }

  // string life_stage = 6;
  if (this->life_stage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->life_stage());
  }

  // string reproduct_state = 7;
  if (this->reproduct_state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reproduct_state());
  }

  // uint32 space_id = 3;
  if (this->space_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->space_id());
  }

  // float leaf_level = 8;
  if (this->leaf_level() != 0) {
    total_size += 1 + 4;
  }

  // float live_level = 9;
  if (this->live_level() != 0) {
    total_size += 1 + 4;
  }

  // bool is_adult = 10;
  if (this->is_adult() != 0) {
    total_size += 1 + 1;
  }

  // bool is_fruit = 11;
  if (this->is_fruit() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plant_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Plant_State)
  GOOGLE_DCHECK_NE(&from, this);
  const Plant_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Plant_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Plant_State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Plant_State)
    MergeFrom(*source);
  }
}

void Plant_State::MergeFrom(const Plant_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Plant_State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plant_type().size() > 0) {

    plant_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_type_);
  }
  if (from.plant_id().size() > 0) {

    plant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plant_id_);
  }
  if (from.fruit_type().size() > 0) {

    fruit_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fruit_type_);
  }
  if (from.live_state().size() > 0) {

    live_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.live_state_);
  }
  if (from.life_stage().size() > 0) {

    life_stage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.life_stage_);
  }
  if (from.reproduct_state().size() > 0) {

    reproduct_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reproduct_state_);
  }
  if (from.space_id() != 0) {
    set_space_id(from.space_id());
  }
  if (from.leaf_level() != 0) {
    set_leaf_level(from.leaf_level());
  }
  if (from.live_level() != 0) {
    set_live_level(from.live_level());
  }
  if (from.is_adult() != 0) {
    set_is_adult(from.is_adult());
  }
  if (from.is_fruit() != 0) {
    set_is_fruit(from.is_fruit());
  }
}

void Plant_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Plant_State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plant_State::CopyFrom(const Plant_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Plant_State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plant_State::IsInitialized() const {
  return true;
}

void Plant_State::Swap(Plant_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Plant_State::InternalSwap(Plant_State* other) {
  plant_type_.Swap(&other->plant_type_);
  plant_id_.Swap(&other->plant_id_);
  fruit_type_.Swap(&other->fruit_type_);
  live_state_.Swap(&other->live_state_);
  life_stage_.Swap(&other->life_stage_);
  reproduct_state_.Swap(&other->reproduct_state_);
  std::swap(space_id_, other->space_id_);
  std::swap(leaf_level_, other->leaf_level_);
  std::swap(live_level_, other->live_level_);
  std::swap(is_adult_, other->is_adult_);
  std::swap(is_fruit_, other->is_fruit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Plant_State::GetMetadata() const {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Plant_State

// string plant_type = 1;
void Plant_State::clear_plant_type() {
  plant_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_State::plant_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.plant_type)
  return plant_type_.GetNoArena();
}
void Plant_State::set_plant_type(const ::std::string& value) {
  
  plant_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.plant_type)
}
#if LANG_CXX11
void Plant_State::set_plant_type(::std::string&& value) {
  
  plant_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_State.plant_type)
}
#endif
void Plant_State::set_plant_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_State.plant_type)
}
void Plant_State::set_plant_type(const char* value, size_t size) {
  
  plant_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_State.plant_type)
}
::std::string* Plant_State::mutable_plant_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_State.plant_type)
  return plant_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_State::release_plant_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_State.plant_type)
  
  return plant_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_State::set_allocated_plant_type(::std::string* plant_type) {
  if (plant_type != NULL) {
    
  } else {
    
  }
  plant_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_State.plant_type)
}

// string plant_id = 2;
void Plant_State::clear_plant_id() {
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_State::plant_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.plant_id)
  return plant_id_.GetNoArena();
}
void Plant_State::set_plant_id(const ::std::string& value) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.plant_id)
}
#if LANG_CXX11
void Plant_State::set_plant_id(::std::string&& value) {
  
  plant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_State.plant_id)
}
#endif
void Plant_State::set_plant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_State.plant_id)
}
void Plant_State::set_plant_id(const char* value, size_t size) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_State.plant_id)
}
::std::string* Plant_State::mutable_plant_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_State.plant_id)
  return plant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_State::release_plant_id() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_State.plant_id)
  
  return plant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_State::set_allocated_plant_id(::std::string* plant_id) {
  if (plant_id != NULL) {
    
  } else {
    
  }
  plant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_State.plant_id)
}

// uint32 space_id = 3;
void Plant_State::clear_space_id() {
  space_id_ = 0u;
}
::google::protobuf::uint32 Plant_State::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.space_id)
  return space_id_;
}
void Plant_State::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.space_id)
}

// string fruit_type = 4;
void Plant_State::clear_fruit_type() {
  fruit_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_State::fruit_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.fruit_type)
  return fruit_type_.GetNoArena();
}
void Plant_State::set_fruit_type(const ::std::string& value) {
  
  fruit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.fruit_type)
}
#if LANG_CXX11
void Plant_State::set_fruit_type(::std::string&& value) {
  
  fruit_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_State.fruit_type)
}
#endif
void Plant_State::set_fruit_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fruit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_State.fruit_type)
}
void Plant_State::set_fruit_type(const char* value, size_t size) {
  
  fruit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_State.fruit_type)
}
::std::string* Plant_State::mutable_fruit_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_State.fruit_type)
  return fruit_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_State::release_fruit_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_State.fruit_type)
  
  return fruit_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_State::set_allocated_fruit_type(::std::string* fruit_type) {
  if (fruit_type != NULL) {
    
  } else {
    
  }
  fruit_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fruit_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_State.fruit_type)
}

// string live_state = 5;
void Plant_State::clear_live_state() {
  live_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_State::live_state() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.live_state)
  return live_state_.GetNoArena();
}
void Plant_State::set_live_state(const ::std::string& value) {
  
  live_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.live_state)
}
#if LANG_CXX11
void Plant_State::set_live_state(::std::string&& value) {
  
  live_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_State.live_state)
}
#endif
void Plant_State::set_live_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  live_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_State.live_state)
}
void Plant_State::set_live_state(const char* value, size_t size) {
  
  live_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_State.live_state)
}
::std::string* Plant_State::mutable_live_state() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_State.live_state)
  return live_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_State::release_live_state() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_State.live_state)
  
  return live_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_State::set_allocated_live_state(::std::string* live_state) {
  if (live_state != NULL) {
    
  } else {
    
  }
  live_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), live_state);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_State.live_state)
}

// string life_stage = 6;
void Plant_State::clear_life_stage() {
  life_stage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_State::life_stage() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.life_stage)
  return life_stage_.GetNoArena();
}
void Plant_State::set_life_stage(const ::std::string& value) {
  
  life_stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.life_stage)
}
#if LANG_CXX11
void Plant_State::set_life_stage(::std::string&& value) {
  
  life_stage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_State.life_stage)
}
#endif
void Plant_State::set_life_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  life_stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_State.life_stage)
}
void Plant_State::set_life_stage(const char* value, size_t size) {
  
  life_stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_State.life_stage)
}
::std::string* Plant_State::mutable_life_stage() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_State.life_stage)
  return life_stage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_State::release_life_stage() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_State.life_stage)
  
  return life_stage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_State::set_allocated_life_stage(::std::string* life_stage) {
  if (life_stage != NULL) {
    
  } else {
    
  }
  life_stage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), life_stage);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_State.life_stage)
}

// string reproduct_state = 7;
void Plant_State::clear_reproduct_state() {
  reproduct_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Plant_State::reproduct_state() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.reproduct_state)
  return reproduct_state_.GetNoArena();
}
void Plant_State::set_reproduct_state(const ::std::string& value) {
  
  reproduct_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.reproduct_state)
}
#if LANG_CXX11
void Plant_State::set_reproduct_state(::std::string&& value) {
  
  reproduct_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_State.reproduct_state)
}
#endif
void Plant_State::set_reproduct_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reproduct_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_State.reproduct_state)
}
void Plant_State::set_reproduct_state(const char* value, size_t size) {
  
  reproduct_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_State.reproduct_state)
}
::std::string* Plant_State::mutable_reproduct_state() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_State.reproduct_state)
  return reproduct_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Plant_State::release_reproduct_state() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_State.reproduct_state)
  
  return reproduct_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Plant_State::set_allocated_reproduct_state(::std::string* reproduct_state) {
  if (reproduct_state != NULL) {
    
  } else {
    
  }
  reproduct_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reproduct_state);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_State.reproduct_state)
}

// float leaf_level = 8;
void Plant_State::clear_leaf_level() {
  leaf_level_ = 0;
}
float Plant_State::leaf_level() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.leaf_level)
  return leaf_level_;
}
void Plant_State::set_leaf_level(float value) {
  
  leaf_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.leaf_level)
}

// float live_level = 9;
void Plant_State::clear_live_level() {
  live_level_ = 0;
}
float Plant_State::live_level() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.live_level)
  return live_level_;
}
void Plant_State::set_live_level(float value) {
  
  live_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.live_level)
}

// bool is_adult = 10;
void Plant_State::clear_is_adult() {
  is_adult_ = false;
}
bool Plant_State::is_adult() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.is_adult)
  return is_adult_;
}
void Plant_State::set_is_adult(bool value) {
  
  is_adult_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.is_adult)
}

// bool is_fruit = 11;
void Plant_State::clear_is_fruit() {
  is_fruit_ = false;
}
bool Plant_State::is_fruit() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.is_fruit)
  return is_fruit_;
}
void Plant_State::set_is_fruit(bool value) {
  
  is_fruit_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.is_fruit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Plant_Info::kHeadFieldNumber;
const int Plant_Info::kPlantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Plant_Info::Plant_Info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Plant_Info)
}
Plant_Info::Plant_Info(const Plant_Info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      plant_(from.plant_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::NetProto::MsgHead(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NetProto.Plant_Info)
}

void Plant_Info::SharedCtor() {
  head_ = NULL;
  _cached_size_ = 0;
}

Plant_Info::~Plant_Info() {
  // @@protoc_insertion_point(destructor:NetProto.Plant_Info)
  SharedDtor();
}

void Plant_Info::SharedDtor() {
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void Plant_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plant_Info::descriptor() {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Plant_Info& Plant_Info::default_instance() {
  protobuf_plant_2eproto::InitDefaults();
  return *internal_default_instance();
}

Plant_Info* Plant_Info::New(::google::protobuf::Arena* arena) const {
  Plant_Info* n = new Plant_Info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Plant_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Plant_Info)
  plant_.Clear();
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}

bool Plant_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Plant_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.Plant_State plant = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Plant_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Plant_Info)
  return false;
#undef DO_
}

void Plant_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Plant_Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // repeated .NetProto.Plant_State plant = 2;
  for (unsigned int i = 0, n = this->plant_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->plant(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Plant_Info)
}

::google::protobuf::uint8* Plant_Info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Plant_Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // repeated .NetProto.Plant_State plant = 2;
  for (unsigned int i = 0, n = this->plant_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->plant(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Plant_Info)
  return target;
}

size_t Plant_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Plant_Info)
  size_t total_size = 0;

  // repeated .NetProto.Plant_State plant = 2;
  {
    unsigned int count = this->plant_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plant(i));
    }
  }

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plant_Info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Plant_Info)
  GOOGLE_DCHECK_NE(&from, this);
  const Plant_Info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Plant_Info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Plant_Info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Plant_Info)
    MergeFrom(*source);
  }
}

void Plant_Info::MergeFrom(const Plant_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Plant_Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plant_.MergeFrom(from.plant_);
  if (from.has_head()) {
    mutable_head()->::NetProto::MsgHead::MergeFrom(from.head());
  }
}

void Plant_Info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Plant_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plant_Info::CopyFrom(const Plant_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Plant_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plant_Info::IsInitialized() const {
  return true;
}

void Plant_Info::Swap(Plant_Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Plant_Info::InternalSwap(Plant_Info* other) {
  plant_.InternalSwap(&other->plant_);
  std::swap(head_, other->head_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Plant_Info::GetMetadata() const {
  protobuf_plant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Plant_Info

// .NetProto.MsgHead head = 1;
bool Plant_Info::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void Plant_Info::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::NetProto::MsgHead& Plant_Info::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Info.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* Plant_Info::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Info.head)
  return head_;
}
::NetProto::MsgHead* Plant_Info::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Info.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
void Plant_Info::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Info.head)
}

// repeated .NetProto.Plant_State plant = 2;
int Plant_Info::plant_size() const {
  return plant_.size();
}
void Plant_Info::clear_plant() {
  plant_.Clear();
}
const ::NetProto::Plant_State& Plant_Info::plant(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Info.plant)
  return plant_.Get(index);
}
::NetProto::Plant_State* Plant_Info::mutable_plant(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Info.plant)
  return plant_.Mutable(index);
}
::NetProto::Plant_State* Plant_Info::add_plant() {
  // @@protoc_insertion_point(field_add:NetProto.Plant_Info.plant)
  return plant_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::Plant_State >*
Plant_Info::mutable_plant() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.Plant_Info.plant)
  return &plant_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::Plant_State >&
Plant_Info::plant() const {
  // @@protoc_insertion_point(field_list:NetProto.Plant_Info.plant)
  return plant_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
