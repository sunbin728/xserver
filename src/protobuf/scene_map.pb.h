// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene_map.proto

#ifndef PROTOBUF_scene_5fmap_2eproto__INCLUDED
#define PROTOBUF_scene_5fmap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pos_rot.pb.h"
#include "obj_pos_relation.pb.h"
#include "natural_action_status.pb.h"
// @@protoc_insertion_point(includes)
namespace NetProto {
class ObjPosRelation;
class ObjPosRelationDefaultTypeInternal;
extern ObjPosRelationDefaultTypeInternal _ObjPosRelation_default_instance_;
class PosRot;
class PosRotDefaultTypeInternal;
extern PosRotDefaultTypeInternal _PosRot_default_instance_;
class SceneMap;
class SceneMapDefaultTypeInternal;
extern SceneMapDefaultTypeInternal _SceneMap_default_instance_;
class SceneMap_ObjInfo;
class SceneMap_ObjInfoDefaultTypeInternal;
extern SceneMap_ObjInfoDefaultTypeInternal _SceneMap_ObjInfo_default_instance_;
namespace Action {
namespace Status {
class ActStatus;
class ActStatusDefaultTypeInternal;
extern ActStatusDefaultTypeInternal _ActStatus_default_instance_;
class AllOpenStatus;
class AllOpenStatusDefaultTypeInternal;
extern AllOpenStatusDefaultTypeInternal _AllOpenStatus_default_instance_;
class AttrStatus;
class AttrStatusDefaultTypeInternal;
extern AttrStatusDefaultTypeInternal _AttrStatus_default_instance_;
class BurnStatus;
class BurnStatusDefaultTypeInternal;
extern BurnStatusDefaultTypeInternal _BurnStatus_default_instance_;
class ContainerStatus;
class ContainerStatusDefaultTypeInternal;
extern ContainerStatusDefaultTypeInternal _ContainerStatus_default_instance_;
class EmsComing;
class EmsComingDefaultTypeInternal;
extern EmsComingDefaultTypeInternal _EmsComing_default_instance_;
class FillAttr;
class FillAttrDefaultTypeInternal;
extern FillAttrDefaultTypeInternal _FillAttr_default_instance_;
class NaturalActionStatus;
class NaturalActionStatusDefaultTypeInternal;
extern NaturalActionStatusDefaultTypeInternal _NaturalActionStatus_default_instance_;
class NaturalActionStatusData;
class NaturalActionStatusDataDefaultTypeInternal;
extern NaturalActionStatusDataDefaultTypeInternal _NaturalActionStatusData_default_instance_;
class NotifyNaturalStatusChange;
class NotifyNaturalStatusChangeDefaultTypeInternal;
extern NotifyNaturalStatusChangeDefaultTypeInternal _NotifyNaturalStatusChange_default_instance_;
class OpenStatus;
class OpenStatusDefaultTypeInternal;
extern OpenStatusDefaultTypeInternal _OpenStatus_default_instance_;
}  // namespace Status
}  // namespace Action
}  // namespace NetProto

namespace NetProto {

namespace protobuf_scene_5fmap_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_scene_5fmap_2eproto

// ===================================================================

class SceneMap_ObjInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.SceneMap.ObjInfo) */ {
 public:
  SceneMap_ObjInfo();
  virtual ~SceneMap_ObjInfo();

  SceneMap_ObjInfo(const SceneMap_ObjInfo& from);

  inline SceneMap_ObjInfo& operator=(const SceneMap_ObjInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneMap_ObjInfo& default_instance();

  static inline const SceneMap_ObjInfo* internal_default_instance() {
    return reinterpret_cast<const SceneMap_ObjInfo*>(
               &_SceneMap_ObjInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SceneMap_ObjInfo* other);

  // implements Message ----------------------------------------------

  inline SceneMap_ObjInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SceneMap_ObjInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SceneMap_ObjInfo& from);
  void MergeFrom(const SceneMap_ObjInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SceneMap_ObjInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // .NetProto.PosRot pos_rot = 4;
  bool has_pos_rot() const;
  void clear_pos_rot();
  static const int kPosRotFieldNumber = 4;
  const ::NetProto::PosRot& pos_rot() const;
  ::NetProto::PosRot* mutable_pos_rot();
  ::NetProto::PosRot* release_pos_rot();
  void set_allocated_pos_rot(::NetProto::PosRot* pos_rot);

  // uint32 class_id = 2;
  void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  ::google::protobuf::uint32 class_id() const;
  void set_class_id(::google::protobuf::uint32 value);

  // uint32 item_id = 3;
  void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  ::google::protobuf::uint32 item_id() const;
  void set_item_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NetProto.SceneMap.ObjInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::NetProto::PosRot* pos_rot_;
  ::google::protobuf::uint32 class_id_;
  ::google::protobuf::uint32 item_id_;
  mutable int _cached_size_;
  friend struct protobuf_scene_5fmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.SceneMap) */ {
 public:
  SceneMap();
  virtual ~SceneMap();

  SceneMap(const SceneMap& from);

  inline SceneMap& operator=(const SceneMap& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneMap& default_instance();

  static inline const SceneMap* internal_default_instance() {
    return reinterpret_cast<const SceneMap*>(
               &_SceneMap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SceneMap* other);

  // implements Message ----------------------------------------------

  inline SceneMap* New() const PROTOBUF_FINAL { return New(NULL); }

  SceneMap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SceneMap& from);
  void MergeFrom(const SceneMap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SceneMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SceneMap_ObjInfo ObjInfo;

  // accessors -------------------------------------------------------

  // repeated .NetProto.SceneMap.ObjInfo obj_info = 1003;
  int obj_info_size() const;
  void clear_obj_info();
  static const int kObjInfoFieldNumber = 1003;
  const ::NetProto::SceneMap_ObjInfo& obj_info(int index) const;
  ::NetProto::SceneMap_ObjInfo* mutable_obj_info(int index);
  ::NetProto::SceneMap_ObjInfo* add_obj_info();
  ::google::protobuf::RepeatedPtrField< ::NetProto::SceneMap_ObjInfo >*
      mutable_obj_info();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::SceneMap_ObjInfo >&
      obj_info() const;

  // repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
  int status_vector_size() const;
  void clear_status_vector();
  static const int kStatusVectorFieldNumber = 1005;
  const ::NetProto::Action::Status::NaturalActionStatus& status_vector(int index) const;
  ::NetProto::Action::Status::NaturalActionStatus* mutable_status_vector(int index);
  ::NetProto::Action::Status::NaturalActionStatus* add_status_vector();
  ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >*
      mutable_status_vector();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >&
      status_vector() const;

  // string owner_uuid = 1000;
  void clear_owner_uuid();
  static const int kOwnerUuidFieldNumber = 1000;
  const ::std::string& owner_uuid() const;
  void set_owner_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_uuid(::std::string&& value);
  #endif
  void set_owner_uuid(const char* value);
  void set_owner_uuid(const char* value, size_t size);
  ::std::string* mutable_owner_uuid();
  ::std::string* release_owner_uuid();
  void set_allocated_owner_uuid(::std::string* owner_uuid);

  // string scene_id = 1002;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 1002;
  const ::std::string& scene_id() const;
  void set_scene_id(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_id(::std::string&& value);
  #endif
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  ::std::string* mutable_scene_id();
  ::std::string* release_scene_id();
  void set_allocated_scene_id(::std::string* scene_id);

  // uint32 map_id = 1001;
  void clear_map_id();
  static const int kMapIdFieldNumber = 1001;
  ::google::protobuf::uint32 map_id() const;
  void set_map_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NetProto.SceneMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::SceneMap_ObjInfo > obj_info_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus > status_vector_;
  ::google::protobuf::internal::ArenaStringPtr owner_uuid_;
  ::google::protobuf::internal::ArenaStringPtr scene_id_;
  ::google::protobuf::uint32 map_id_;
  mutable int _cached_size_;
  friend struct protobuf_scene_5fmap_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneMap_ObjInfo

// string uuid = 1;
inline void SceneMap_ObjInfo::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneMap_ObjInfo::uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.ObjInfo.uuid)
  return uuid_.GetNoArena();
}
inline void SceneMap_ObjInfo::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.SceneMap.ObjInfo.uuid)
}
#if LANG_CXX11
inline void SceneMap_ObjInfo::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.SceneMap.ObjInfo.uuid)
}
#endif
inline void SceneMap_ObjInfo::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.SceneMap.ObjInfo.uuid)
}
inline void SceneMap_ObjInfo::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.SceneMap.ObjInfo.uuid)
}
inline ::std::string* SceneMap_ObjInfo::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.SceneMap.ObjInfo.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneMap_ObjInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.SceneMap.ObjInfo.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneMap_ObjInfo::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.SceneMap.ObjInfo.uuid)
}

// uint32 class_id = 2;
inline void SceneMap_ObjInfo::clear_class_id() {
  class_id_ = 0u;
}
inline ::google::protobuf::uint32 SceneMap_ObjInfo::class_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.ObjInfo.class_id)
  return class_id_;
}
inline void SceneMap_ObjInfo::set_class_id(::google::protobuf::uint32 value) {
  
  class_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SceneMap.ObjInfo.class_id)
}

// uint32 item_id = 3;
inline void SceneMap_ObjInfo::clear_item_id() {
  item_id_ = 0u;
}
inline ::google::protobuf::uint32 SceneMap_ObjInfo::item_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.ObjInfo.item_id)
  return item_id_;
}
inline void SceneMap_ObjInfo::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SceneMap.ObjInfo.item_id)
}

// .NetProto.PosRot pos_rot = 4;
inline bool SceneMap_ObjInfo::has_pos_rot() const {
  return this != internal_default_instance() && pos_rot_ != NULL;
}
inline void SceneMap_ObjInfo::clear_pos_rot() {
  if (GetArenaNoVirtual() == NULL && pos_rot_ != NULL) delete pos_rot_;
  pos_rot_ = NULL;
}
inline const ::NetProto::PosRot& SceneMap_ObjInfo::pos_rot() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.ObjInfo.pos_rot)
  return pos_rot_ != NULL ? *pos_rot_
                         : *::NetProto::PosRot::internal_default_instance();
}
inline ::NetProto::PosRot* SceneMap_ObjInfo::mutable_pos_rot() {
  
  if (pos_rot_ == NULL) {
    pos_rot_ = new ::NetProto::PosRot;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.SceneMap.ObjInfo.pos_rot)
  return pos_rot_;
}
inline ::NetProto::PosRot* SceneMap_ObjInfo::release_pos_rot() {
  // @@protoc_insertion_point(field_release:NetProto.SceneMap.ObjInfo.pos_rot)
  
  ::NetProto::PosRot* temp = pos_rot_;
  pos_rot_ = NULL;
  return temp;
}
inline void SceneMap_ObjInfo::set_allocated_pos_rot(::NetProto::PosRot* pos_rot) {
  delete pos_rot_;
  pos_rot_ = pos_rot;
  if (pos_rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.SceneMap.ObjInfo.pos_rot)
}

// -------------------------------------------------------------------

// SceneMap

// string owner_uuid = 1000;
inline void SceneMap::clear_owner_uuid() {
  owner_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneMap::owner_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.owner_uuid)
  return owner_uuid_.GetNoArena();
}
inline void SceneMap::set_owner_uuid(const ::std::string& value) {
  
  owner_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.SceneMap.owner_uuid)
}
#if LANG_CXX11
inline void SceneMap::set_owner_uuid(::std::string&& value) {
  
  owner_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.SceneMap.owner_uuid)
}
#endif
inline void SceneMap::set_owner_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.SceneMap.owner_uuid)
}
inline void SceneMap::set_owner_uuid(const char* value, size_t size) {
  
  owner_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.SceneMap.owner_uuid)
}
inline ::std::string* SceneMap::mutable_owner_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.SceneMap.owner_uuid)
  return owner_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneMap::release_owner_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.SceneMap.owner_uuid)
  
  return owner_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneMap::set_allocated_owner_uuid(::std::string* owner_uuid) {
  if (owner_uuid != NULL) {
    
  } else {
    
  }
  owner_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.SceneMap.owner_uuid)
}

// uint32 map_id = 1001;
inline void SceneMap::clear_map_id() {
  map_id_ = 0u;
}
inline ::google::protobuf::uint32 SceneMap::map_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.map_id)
  return map_id_;
}
inline void SceneMap::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SceneMap.map_id)
}

// string scene_id = 1002;
inline void SceneMap::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneMap::scene_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.scene_id)
  return scene_id_.GetNoArena();
}
inline void SceneMap::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.SceneMap.scene_id)
}
#if LANG_CXX11
inline void SceneMap::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.SceneMap.scene_id)
}
#endif
inline void SceneMap::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.SceneMap.scene_id)
}
inline void SceneMap::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.SceneMap.scene_id)
}
inline ::std::string* SceneMap::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.SceneMap.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneMap::release_scene_id() {
  // @@protoc_insertion_point(field_release:NetProto.SceneMap.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneMap::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.SceneMap.scene_id)
}

// repeated .NetProto.SceneMap.ObjInfo obj_info = 1003;
inline int SceneMap::obj_info_size() const {
  return obj_info_.size();
}
inline void SceneMap::clear_obj_info() {
  obj_info_.Clear();
}
inline const ::NetProto::SceneMap_ObjInfo& SceneMap::obj_info(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.obj_info)
  return obj_info_.Get(index);
}
inline ::NetProto::SceneMap_ObjInfo* SceneMap::mutable_obj_info(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.SceneMap.obj_info)
  return obj_info_.Mutable(index);
}
inline ::NetProto::SceneMap_ObjInfo* SceneMap::add_obj_info() {
  // @@protoc_insertion_point(field_add:NetProto.SceneMap.obj_info)
  return obj_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::SceneMap_ObjInfo >*
SceneMap::mutable_obj_info() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.SceneMap.obj_info)
  return &obj_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::SceneMap_ObjInfo >&
SceneMap::obj_info() const {
  // @@protoc_insertion_point(field_list:NetProto.SceneMap.obj_info)
  return obj_info_;
}

// repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
inline int SceneMap::status_vector_size() const {
  return status_vector_.size();
}
inline void SceneMap::clear_status_vector() {
  status_vector_.Clear();
}
inline const ::NetProto::Action::Status::NaturalActionStatus& SceneMap::status_vector(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.status_vector)
  return status_vector_.Get(index);
}
inline ::NetProto::Action::Status::NaturalActionStatus* SceneMap::mutable_status_vector(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.SceneMap.status_vector)
  return status_vector_.Mutable(index);
}
inline ::NetProto::Action::Status::NaturalActionStatus* SceneMap::add_status_vector() {
  // @@protoc_insertion_point(field_add:NetProto.SceneMap.status_vector)
  return status_vector_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >*
SceneMap::mutable_status_vector() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.SceneMap.status_vector)
  return &status_vector_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >&
SceneMap::status_vector() const {
  // @@protoc_insertion_point(field_list:NetProto.SceneMap.status_vector)
  return status_vector_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace NetProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_scene_5fmap_2eproto__INCLUDED
