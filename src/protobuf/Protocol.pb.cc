// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
class UniversalProtocolDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UniversalProtocol> {
} _UniversalProtocol_default_instance_;
class CreateSceneItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateSceneItem> {
} _CreateSceneItem_default_instance_;
class CreateRobotInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateRobotInfo> {
} _CreateRobotInfo_default_instance_;
class SceneData_ObjInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SceneData_ObjInfo> {
} _SceneData_ObjInfo_default_instance_;
class SceneDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SceneData> {
} _SceneData_default_instance_;
class C2AAddUserReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2AAddUserReq> {
} _C2AAddUserReq_default_instance_;
class C2ACheckUserReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2ACheckUserReq> {
} _C2ACheckUserReq_default_instance_;
class A2CAddUserRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<A2CAddUserResp> {
} _A2CAddUserResp_default_instance_;
class A2CCheckUserRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<A2CCheckUserResp> {
} _A2CCheckUserResp_default_instance_;
class C2GSHeartBeatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2GSHeartBeat> {
} _C2GSHeartBeat_default_instance_;
class C2GSLoginDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2GSLogin> {
} _C2GSLogin_default_instance_;
class C2GSCreateRobotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2GSCreateRobot> {
} _C2GSCreateRobot_default_instance_;
class C2GSGetSceneIDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2GSGetSceneID> {
} _C2GSGetSceneID_default_instance_;
class C2GSCreateSceneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2GSCreateScene> {
} _C2GSCreateScene_default_instance_;
class C2GSEnterSceneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2GSEnterScene> {
} _C2GSEnterScene_default_instance_;
class GS2CLoginDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GS2CLogin> {
} _GS2CLogin_default_instance_;
class GS2CCreateRobotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GS2CCreateRobot> {
} _GS2CCreateRobot_default_instance_;
class GS2CGetSceneIDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GS2CGetSceneID> {
} _GS2CGetSceneID_default_instance_;
class GS2CCreateScene_ObjInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GS2CCreateScene_ObjInfo> {
} _GS2CCreateScene_ObjInfo_default_instance_;
class GS2CCreateSceneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GS2CCreateScene> {
} _GS2CCreateScene_default_instance_;
class GS2CEnterScene_ObjInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GS2CEnterScene_ObjInfo> {
} _GS2CEnterScene_ObjInfo_default_instance_;
class GS2CEnterSceneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GS2CEnterScene> {
} _GS2CEnterScene_default_instance_;
class GS2MTSHeartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GS2MTSHeart> {
} _GS2MTSHeart_default_instance_;
class GS2MTSGetRobotListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GS2MTSGetRobotList> {
} _GS2MTSGetRobotList_default_instance_;
class GS2MTSCreateRobotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GS2MTSCreateRobot> {
} _GS2MTSCreateRobot_default_instance_;
class GS2MTSGetSceneItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GS2MTSGetSceneItem> {
} _GS2MTSGetSceneItem_default_instance_;
class GS2MTSCreateSceneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GS2MTSCreateScene> {
} _GS2MTSCreateScene_default_instance_;
class MTS2GSGetRobotListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MTS2GSGetRobotList> {
} _MTS2GSGetRobotList_default_instance_;
class MTS2GSCreateRobotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MTS2GSCreateRobot> {
} _MTS2GSCreateRobot_default_instance_;
class MTS2GSGetSceneItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MTS2GSGetSceneItem> {
} _MTS2GSGetSceneItem_default_instance_;
class MTS2GSCreateSceneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MTS2GSCreateScene> {
} _MTS2GSCreateScene_default_instance_;

namespace protobuf_Protocol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[31];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalProtocol, communicatetest_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneItem, objectuuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneItem, itemid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRobotInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRobotInfo, robotid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRobotInfo, robotprototypeid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneData_ObjInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneData_ObjInfo, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneData_ObjInfo, class_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneData_ObjInfo, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneData_ObjInfo, pos_rot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneData, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneData, map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneData, objinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneData, statusvector_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2AAddUserReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2AAddUserReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2AAddUserReq, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2AAddUserReq, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2AAddUserReq, uname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2AAddUserReq, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2ACheckUserReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2ACheckUserReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2ACheckUserReq, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2ACheckUserReq, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2ACheckUserReq, uname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2ACheckUserReq, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CAddUserResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CAddUserResp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CAddUserResp, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CAddUserResp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CAddUserResp, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CAddUserResp, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CAddUserResp, uname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CCheckUserResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CCheckUserResp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CCheckUserResp, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CCheckUserResp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CCheckUserResp, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CCheckUserResp, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CCheckUserResp, uname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2CCheckUserResp, gameserveraddr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSHeartBeat, clientid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSLogin, accountid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSCreateRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSCreateRobot, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSCreateRobot, robottype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSGetSceneID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSGetSceneID, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSGetSceneID, accountid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSCreateScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSCreateScene, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSCreateScene, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSCreateScene, scenetype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSEnterScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSEnterScene, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSEnterScene, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSEnterScene, scenetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GSEnterScene, sceneid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CLogin, issuccess_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CLogin, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CLogin, robotflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CLogin, robotlist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateRobot, issuccess_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateRobot, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateRobot, robotinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CGetSceneID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CGetSceneID, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CGetSceneID, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CGetSceneID, sceneid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateScene_ObjInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateScene_ObjInfo, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateScene_ObjInfo, class_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateScene_ObjInfo, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateScene_ObjInfo, pos_rot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateScene, owner_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateScene, map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateScene, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateScene, obj_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CCreateScene, status_vector_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CEnterScene_ObjInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CEnterScene_ObjInfo, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CEnterScene_ObjInfo, class_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CEnterScene_ObjInfo, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CEnterScene_ObjInfo, pos_rot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CEnterScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CEnterScene, owner_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CEnterScene, map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CEnterScene, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CEnterScene, obj_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2CEnterScene, status_vector_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSHeart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSHeart, gameserverid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSGetRobotList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSGetRobotList, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSGetRobotList, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSGetRobotList, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSCreateRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSCreateRobot, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSCreateRobot, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSCreateRobot, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSCreateRobot, robotprototypeid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSGetSceneItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSGetSceneItem, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSGetSceneItem, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSGetSceneItem, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSGetSceneItem, scenetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSGetSceneItem, sceneid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSCreateScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSCreateScene, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSCreateScene, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSCreateScene, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2MTSCreateScene, scenetype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSGetRobotList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSGetRobotList, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSGetRobotList, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSGetRobotList, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSGetRobotList, robotflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSGetRobotList, robotlist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSCreateRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSCreateRobot, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSCreateRobot, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSCreateRobot, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSCreateRobot, robotlist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSGetSceneItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSGetSceneItem, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSGetSceneItem, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSGetSceneItem, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSGetSceneItem, sceneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSGetSceneItem, itemlist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSCreateScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSCreateScene, msghead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSCreateScene, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSCreateScene, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSCreateScene, sceneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTS2GSCreateScene, itemlist_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(UniversalProtocol)},
  { 6, -1, sizeof(CreateSceneItem)},
  { 13, -1, sizeof(CreateRobotInfo)},
  { 20, -1, sizeof(SceneData_ObjInfo)},
  { 29, -1, sizeof(SceneData)},
  { 38, -1, sizeof(C2AAddUserReq)},
  { 48, -1, sizeof(C2ACheckUserReq)},
  { 58, -1, sizeof(A2CAddUserResp)},
  { 69, -1, sizeof(A2CCheckUserResp)},
  { 81, -1, sizeof(C2GSHeartBeat)},
  { 87, -1, sizeof(C2GSLogin)},
  { 93, -1, sizeof(C2GSCreateRobot)},
  { 100, -1, sizeof(C2GSGetSceneID)},
  { 107, -1, sizeof(C2GSCreateScene)},
  { 115, -1, sizeof(C2GSEnterScene)},
  { 124, -1, sizeof(GS2CLogin)},
  { 133, -1, sizeof(GS2CCreateRobot)},
  { 141, -1, sizeof(GS2CGetSceneID)},
  { 149, -1, sizeof(GS2CCreateScene_ObjInfo)},
  { 158, -1, sizeof(GS2CCreateScene)},
  { 168, -1, sizeof(GS2CEnterScene_ObjInfo)},
  { 177, -1, sizeof(GS2CEnterScene)},
  { 187, -1, sizeof(GS2MTSHeart)},
  { 193, -1, sizeof(GS2MTSGetRobotList)},
  { 201, -1, sizeof(GS2MTSCreateRobot)},
  { 210, -1, sizeof(GS2MTSGetSceneItem)},
  { 220, -1, sizeof(GS2MTSCreateScene)},
  { 229, -1, sizeof(MTS2GSGetRobotList)},
  { 239, -1, sizeof(MTS2GSCreateRobot)},
  { 248, -1, sizeof(MTS2GSGetSceneItem)},
  { 258, -1, sizeof(MTS2GSCreateScene)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UniversalProtocol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateSceneItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateRobotInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneData_ObjInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2AAddUserReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2ACheckUserReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_A2CAddUserResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_A2CCheckUserResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2GSHeartBeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2GSLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2GSCreateRobot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2GSGetSceneID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2GSCreateScene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2GSEnterScene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GS2CLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GS2CCreateRobot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GS2CGetSceneID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GS2CCreateScene_ObjInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GS2CCreateScene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GS2CEnterScene_ObjInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GS2CEnterScene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GS2MTSHeart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GS2MTSGetRobotList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GS2MTSCreateRobot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GS2MTSGetSceneItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GS2MTSCreateScene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MTS2GSGetRobotList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MTS2GSCreateRobot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MTS2GSGetSceneItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MTS2GSCreateScene_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Protocol.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 31);
}

}  // namespace

void TableStruct::Shutdown() {
  _UniversalProtocol_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CreateSceneItem_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CreateRobotInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SceneData_ObjInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SceneData_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _C2AAddUserReq_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _C2ACheckUserReq_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _A2CAddUserResp_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _A2CCheckUserResp_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _C2GSHeartBeat_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _C2GSLogin_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _C2GSCreateRobot_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _C2GSGetSceneID_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _C2GSCreateScene_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _C2GSEnterScene_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _GS2CLogin_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _GS2CCreateRobot_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _GS2CGetSceneID_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _GS2CCreateScene_ObjInfo_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _GS2CCreateScene_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _GS2CEnterScene_ObjInfo_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _GS2CEnterScene_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _GS2MTSHeart_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _GS2MTSGetRobotList_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _GS2MTSCreateRobot_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _GS2MTSGetSceneItem_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _GS2MTSCreateScene_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _MTS2GSGetRobotList_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _MTS2GSCreateRobot_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _MTS2GSGetSceneItem_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _MTS2GSCreateScene_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::InitDefaults();
  ::NetProto::protobuf_msg_5fhead_2eproto::InitDefaults();
  ::NetProto::protobuf_robot_5finfo_2eproto::InitDefaults();
  ::NetProto::protobuf_pw_5fdata_2eproto::InitDefaults();
  ::NetProto::Action::Status::protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  ::NetProto::protobuf_obj_5fpos_5frelation_2eproto::InitDefaults();
  ::NetProto::protobuf_pos_5frot_2eproto::InitDefaults();
  _UniversalProtocol_default_instance_.DefaultConstruct();
  _CreateSceneItem_default_instance_.DefaultConstruct();
  _CreateRobotInfo_default_instance_.DefaultConstruct();
  _SceneData_ObjInfo_default_instance_.DefaultConstruct();
  _SceneData_default_instance_.DefaultConstruct();
  _C2AAddUserReq_default_instance_.DefaultConstruct();
  _C2ACheckUserReq_default_instance_.DefaultConstruct();
  _A2CAddUserResp_default_instance_.DefaultConstruct();
  _A2CCheckUserResp_default_instance_.DefaultConstruct();
  _C2GSHeartBeat_default_instance_.DefaultConstruct();
  _C2GSLogin_default_instance_.DefaultConstruct();
  _C2GSCreateRobot_default_instance_.DefaultConstruct();
  _C2GSGetSceneID_default_instance_.DefaultConstruct();
  _C2GSCreateScene_default_instance_.DefaultConstruct();
  _C2GSEnterScene_default_instance_.DefaultConstruct();
  _GS2CLogin_default_instance_.DefaultConstruct();
  _GS2CCreateRobot_default_instance_.DefaultConstruct();
  _GS2CGetSceneID_default_instance_.DefaultConstruct();
  _GS2CCreateScene_ObjInfo_default_instance_.DefaultConstruct();
  _GS2CCreateScene_default_instance_.DefaultConstruct();
  _GS2CEnterScene_ObjInfo_default_instance_.DefaultConstruct();
  _GS2CEnterScene_default_instance_.DefaultConstruct();
  _GS2MTSHeart_default_instance_.DefaultConstruct();
  _GS2MTSGetRobotList_default_instance_.DefaultConstruct();
  _GS2MTSCreateRobot_default_instance_.DefaultConstruct();
  _GS2MTSGetSceneItem_default_instance_.DefaultConstruct();
  _GS2MTSCreateScene_default_instance_.DefaultConstruct();
  _MTS2GSGetRobotList_default_instance_.DefaultConstruct();
  _MTS2GSCreateRobot_default_instance_.DefaultConstruct();
  _MTS2GSGetSceneItem_default_instance_.DefaultConstruct();
  _MTS2GSCreateScene_default_instance_.DefaultConstruct();
  _SceneData_ObjInfo_default_instance_.get_mutable()->pos_rot_ = const_cast< ::NetProto::PosRot*>(
      ::NetProto::PosRot::internal_default_instance());
  _C2AAddUserReq_default_instance_.get_mutable()->header_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _C2ACheckUserReq_default_instance_.get_mutable()->header_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _A2CAddUserResp_default_instance_.get_mutable()->header_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _A2CCheckUserResp_default_instance_.get_mutable()->header_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _C2GSGetSceneID_default_instance_.get_mutable()->msghead_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _C2GSCreateScene_default_instance_.get_mutable()->msghead_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _C2GSEnterScene_default_instance_.get_mutable()->msghead_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _GS2CCreateRobot_default_instance_.get_mutable()->robotinfo_ = const_cast< ::NetProto::RobotInfo*>(
      ::NetProto::RobotInfo::internal_default_instance());
  _GS2CGetSceneID_default_instance_.get_mutable()->msghead_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _GS2CCreateScene_ObjInfo_default_instance_.get_mutable()->pos_rot_ = const_cast< ::NetProto::PosRot*>(
      ::NetProto::PosRot::internal_default_instance());
  _GS2CEnterScene_ObjInfo_default_instance_.get_mutable()->pos_rot_ = const_cast< ::NetProto::PosRot*>(
      ::NetProto::PosRot::internal_default_instance());
  _GS2MTSGetRobotList_default_instance_.get_mutable()->msghead_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _GS2MTSCreateRobot_default_instance_.get_mutable()->msghead_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _GS2MTSGetSceneItem_default_instance_.get_mutable()->msghead_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _GS2MTSCreateScene_default_instance_.get_mutable()->msghead_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _MTS2GSGetRobotList_default_instance_.get_mutable()->msghead_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _MTS2GSCreateRobot_default_instance_.get_mutable()->msghead_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _MTS2GSGetSceneItem_default_instance_.get_mutable()->msghead_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _MTS2GSCreateScene_default_instance_.get_mutable()->msghead_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016Protocol.proto\022\010NetProto\032\031google/proto"
      "buf/any.proto\032\016msg_head.proto\032\020robot_inf"
      "o.proto\032\rpw_data.proto\032\033natural_action_s"
      "tatus.proto\032\026obj_pos_relation.proto\032\rpos"
      "_rot.proto\",\n\021UniversalProtocol\022\027\n\017commu"
      "nicateTest\030\001 \001(\r\"5\n\017CreateSceneItem\022\022\n\no"
      "bjectUuid\030\001 \001(\t\022\016\n\006itemID\030\002 \001(\r\"<\n\017Creat"
      "eRobotInfo\022\017\n\007robotID\030\001 \001(\t\022\030\n\020robotProt"
      "otypeID\030\002 \001(\r\"\375\001\n\tSceneData\022\020\n\010robot_id\030"
      "\001 \001(\t\022\016\n\006map_id\030\002 \001(\r\022,\n\007objInfo\030\003 \003(\0132\033"
      ".NetProto.SceneData.ObjInfo\022A\n\014statusVec"
      "tor\030\004 \003(\0132+.NetProto.Action.Status.Natur"
      "alActionStatus\032]\n\007ObjInfo\022\014\n\004uuid\030\001 \001(\t\022"
      "\020\n\010class_id\030\002 \001(\r\022\017\n\007item_id\030\003 \001(\r\022!\n\007po"
      "s_rot\030\004 \001(\0132\020.NetProto.PosRot\"o\n\rC2AAddU"
      "serReq\022!\n\006Header\030\001 \001(\0132\021.NetProto.MsgHea"
      "d\022\013\n\003Seq\030\002 \001(\t\022\r\n\005Appid\030\003 \001(\t\022\r\n\005Uname\030\004"
      " \001(\t\022\020\n\010Password\030\005 \001(\t\"q\n\017C2ACheckUserRe"
      "q\022!\n\006Header\030\001 \001(\0132\021.NetProto.MsgHead\022\013\n\003"
      "Seq\030\002 \001(\t\022\r\n\005Appid\030\003 \001(\t\022\r\n\005Uname\030\004 \001(\t\022"
      "\020\n\010Password\030\005 \001(\t\"y\n\016A2CAddUserResp\022!\n\006H"
      "eader\030\001 \001(\0132\021.NetProto.MsgHead\022\013\n\003Seq\030\002 "
      "\001(\t\022\016\n\006Result\030\003 \001(\003\022\013\n\003Msg\030\004 \001(\t\022\013\n\003Uid\030"
      "\005 \001(\003\022\r\n\005Uname\030\006 \001(\t\"\223\001\n\020A2CCheckUserRes"
      "p\022!\n\006Header\030\001 \001(\0132\021.NetProto.MsgHead\022\013\n\003"
      "Seq\030\002 \001(\t\022\016\n\006Result\030\003 \001(\003\022\013\n\003Msg\030\004 \001(\t\022\013"
      "\n\003Uid\030\005 \001(\003\022\r\n\005Uname\030\006 \001(\t\022\026\n\016GameServer"
      "Addr\030\007 \001(\t\"!\n\rC2GSHeartBeat\022\020\n\010clientID\030"
      "\001 \001(\r\"\036\n\tC2GSLogin\022\021\n\taccountID\030\001 \001(\r\"7\n"
      "\017C2GSCreateRobot\022\021\n\taccountID\030\001 \001(\r\022\021\n\tr"
      "obotType\030\002 \001(\r\"G\n\016C2GSGetSceneID\022\"\n\007msgH"
      "ead\030\001 \001(\0132\021.NetProto.MsgHead\022\021\n\taccountI"
      "D\030\002 \001(\r\"[\n\017C2GSCreateScene\022\"\n\007msgHead\030\001 "
      "\001(\0132\021.NetProto.MsgHead\022\021\n\taccountID\030\002 \001("
      "\r\022\021\n\tsceneType\030\003 \001(\r\"k\n\016C2GSEnterScene\022\""
      "\n\007msgHead\030\001 \001(\0132\021.NetProto.MsgHead\022\021\n\tac"
      "countID\030\002 \001(\r\022\021\n\tsceneType\030\003 \001(\r\022\017\n\007scen"
      "eID\030\004 \001(\t\"l\n\tGS2CLogin\022\021\n\tisSuccess\030\001 \001("
      "\010\022\013\n\003ret\030\002 \001(\t\022\021\n\trobotFlag\030\003 \001(\r\022,\n\trob"
      "otList\030\004 \003(\0132\031.NetProto.CreateRobotInfo\""
      "Y\n\017GS2CCreateRobot\022\021\n\tisSuccess\030\001 \001(\010\022\013\n"
      "\003ret\030\002 \001(\t\022&\n\trobotInfo\030\003 \001(\0132\023.NetProto"
      ".RobotInfo\"R\n\016GS2CGetSceneID\022\"\n\007msgHead\030"
      "\001 \001(\0132\021.NetProto.MsgHead\022\013\n\003ret\030\002 \001(\t\022\017\n"
      "\007sceneID\030\003 \001(\t\"\244\002\n\017GS2CCreateScene\022\023\n\now"
      "ner_uuid\030\350\007 \001(\t\022\017\n\006map_id\030\351\007 \001(\r\022\021\n\010scen"
      "e_id\030\352\007 \001(\t\0224\n\010obj_info\030\353\007 \003(\0132!.NetProt"
      "o.GS2CCreateScene.ObjInfo\022C\n\rstatus_vect"
      "or\030\355\007 \003(\0132+.NetProto.Action.Status.Natur"
      "alActionStatus\032]\n\007ObjInfo\022\014\n\004uuid\030\001 \001(\t\022"
      "\020\n\010class_id\030\002 \001(\r\022\017\n\007item_id\030\003 \001(\r\022!\n\007po"
      "s_rot\030\004 \001(\0132\020.NetProto.PosRot\"\242\002\n\016GS2CEn"
      "terScene\022\023\n\nowner_uuid\030\350\007 \001(\t\022\017\n\006map_id\030"
      "\351\007 \001(\r\022\021\n\010scene_id\030\352\007 \001(\t\0223\n\010obj_info\030\353\007"
      " \003(\0132 .NetProto.GS2CEnterScene.ObjInfo\022C"
      "\n\rstatus_vector\030\355\007 \003(\0132+.NetProto.Action"
      ".Status.NaturalActionStatus\032]\n\007ObjInfo\022\014"
      "\n\004uuid\030\001 \001(\t\022\020\n\010class_id\030\002 \001(\r\022\017\n\007item_i"
      "d\030\003 \001(\r\022!\n\007pos_rot\030\004 \001(\0132\020.NetProto.PosR"
      "ot\"#\n\013GS2MTSHeart\022\024\n\014gameServerID\030\001 \001(\r\""
      "]\n\022GS2MTSGetRobotList\022\"\n\007msgHead\030\001 \001(\0132\021"
      ".NetProto.MsgHead\022\021\n\taccountID\030\002 \001(\r\022\020\n\010"
      "playerID\030\003 \001(\r\"v\n\021GS2MTSCreateRobot\022\"\n\007m"
      "sgHead\030\001 \001(\0132\021.NetProto.MsgHead\022\021\n\taccou"
      "ntID\030\002 \001(\r\022\020\n\010playerID\030\003 \001(\r\022\030\n\020robotPro"
      "totypeID\030\004 \001(\r\"\201\001\n\022GS2MTSGetSceneItem\022\"\n"
      "\007msgHead\030\001 \001(\0132\021.NetProto.MsgHead\022\021\n\tacc"
      "ountID\030\002 \001(\r\022\020\n\010playerID\030\003 \001(\r\022\021\n\tsceneT"
      "ype\030\004 \001(\r\022\017\n\007sceneID\030\005 \001(\t\"o\n\021GS2MTSCrea"
      "teScene\022\"\n\007msgHead\030\001 \001(\0132\021.NetProto.MsgH"
      "ead\022\021\n\taccountID\030\002 \001(\r\022\020\n\010playerID\030\003 \001(\r"
      "\022\021\n\tsceneType\030\004 \001(\r\"\236\001\n\022MTS2GSGetRobotLi"
      "st\022\"\n\007msgHead\030\001 \001(\0132\021.NetProto.MsgHead\022\021"
      "\n\taccountID\030\002 \001(\r\022\020\n\010playerID\030\003 \001(\r\022\021\n\tr"
      "obotFlag\030\004 \001(\r\022,\n\trobotList\030\005 \003(\0132\031.NetP"
      "roto.CreateRobotInfo\"\212\001\n\021MTS2GSCreateRob"
      "ot\022\"\n\007msgHead\030\001 \001(\0132\021.NetProto.MsgHead\022\021"
      "\n\taccountID\030\002 \001(\r\022\020\n\010playerID\030\003 \001(\r\022,\n\tr"
      "obotList\030\004 \003(\0132\031.NetProto.CreateRobotInf"
      "o\"\233\001\n\022MTS2GSGetSceneItem\022\"\n\007msgHead\030\001 \001("
      "\0132\021.NetProto.MsgHead\022\021\n\taccountID\030\002 \001(\r\022"
      "\020\n\010playerID\030\003 \001(\r\022\017\n\007sceneID\030\004 \001(\t\022+\n\010it"
      "emList\030\005 \003(\0132\031.NetProto.CreateSceneItem\""
      "\232\001\n\021MTS2GSCreateScene\022\"\n\007msgHead\030\001 \001(\0132\021"
      ".NetProto.MsgHead\022\021\n\taccountID\030\002 \001(\r\022\020\n\010"
      "playerID\030\003 \001(\r\022\017\n\007sceneID\030\004 \001(\t\022+\n\010itemL"
      "ist\030\005 \003(\0132\031.NetProto.CreateSceneItem*\374\006\n"
      "\nMsgCommand\022\024\n\020C2A_ADD_USER_REQ\020\000\022\026\n\022C2A"
      "_CHECK_USER_REQ\020\001\022\025\n\021A2C_ADD_USER_RESP\020d"
      "\022\027\n\023A2C_CHECK_USER_RESP\020e\022\024\n\017C2GS_HEART_"
      "BEAT\020\310\001\022\017\n\nC2GS_LOGIN\020\311\001\022\026\n\021C2GS_CREATE_"
      "ROBOT\020\312\001\022\026\n\021C2GS_GET_SCENE_ID\020\313\001\022\026\n\021C2GS"
      "_CREATE_SCENE\020\314\001\022\025\n\020C2GS_ENTER_SCENE\020\315\001\022"
      "\017\n\nGS2C_LOGIN\020\254\002\022\026\n\021GS2C_CREATE_ROBOT\020\255\002"
      "\022\026\n\021GS2C_GET_SCENE_ID\020\256\002\022\026\n\021GS2C_CREATE_"
      "SCENE\020\257\002\022\025\n\020GS2C_ENTER_SCENE\020\260\002\022\025\n\020GS2PW"
      "_HEART_BEAT\020\220\003\022\027\n\022GS2PW_ROBOT_ONLINE\020\221\003\022"
      "\030\n\023GS2PW_ROBOT_OFFLINE\020\222\003\022\027\n\022GS2PW_CREAT"
      "E_ROBOT\020\223\003\022\031\n\024GS2PW_ALL_WORLD_DATA\020\224\003\022\026\n"
      "\021GS2PW_GET_PW_DATA\020\225\003\022\027\n\022PW2GS_ROBOT_ONL"
      "INE\020\364\003\022\030\n\023PW2GS_ROBOT_OFFLINE\020\365\003\022\027\n\022PW2G"
      "S_CREATE_ROBOT\020\366\003\022\031\n\024PW2GS_ALL_WORLD_DAT"
      "A\020\367\003\022\026\n\021PW2GS_GET_PW_DATA\020\370\003\022\026\n\021GS2MTS_H"
      "EART_BEAT\020\330\004\022\032\n\025GS2MTS_GET_ROBOT_LIST\020\331\004"
      "\022\030\n\023GS2MTS_CREATE_ROBOT\020\332\004\022\032\n\025GS2MTS_GET"
      "_SCENE_ITEM\020\333\004\022\030\n\023GS2MTS_CREATE_SCENE\020\334\004"
      "\022\032\n\025MTS2GS_GET_ROBOT_LIST\020\274\005\022\030\n\023MTS2GS_C"
      "REATE_ROBOT\020\275\005\022\030\n\023MTS2GS_CREATE_SCENE\020\276\005"
      "\022\032\n\025MTS2GS_GET_SCENE_ITEM\020\277\005\022\025\n\017Communic"
      "ateTest\020\277\204=b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4379);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::NetProto::protobuf_msg_5fhead_2eproto::AddDescriptors();
  ::NetProto::protobuf_robot_5finfo_2eproto::AddDescriptors();
  ::NetProto::protobuf_pw_5fdata_2eproto::AddDescriptors();
  ::NetProto::Action::Status::protobuf_natural_5faction_5fstatus_2eproto::AddDescriptors();
  ::NetProto::protobuf_obj_5fpos_5frelation_2eproto::AddDescriptors();
  ::NetProto::protobuf_pos_5frot_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Protocol_2eproto

const ::google::protobuf::EnumDescriptor* MsgCommand_descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_enum_descriptors[0];
}
bool MsgCommand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 100:
    case 101:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 700:
    case 701:
    case 702:
    case 703:
    case 999999:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UniversalProtocol::kCommunicateTestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UniversalProtocol::UniversalProtocol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.UniversalProtocol)
}
UniversalProtocol::UniversalProtocol(const UniversalProtocol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  communicatetest_ = from.communicatetest_;
  // @@protoc_insertion_point(copy_constructor:NetProto.UniversalProtocol)
}

void UniversalProtocol::SharedCtor() {
  communicatetest_ = 0u;
  _cached_size_ = 0;
}

UniversalProtocol::~UniversalProtocol() {
  // @@protoc_insertion_point(destructor:NetProto.UniversalProtocol)
  SharedDtor();
}

void UniversalProtocol::SharedDtor() {
}

void UniversalProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniversalProtocol::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UniversalProtocol& UniversalProtocol::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

UniversalProtocol* UniversalProtocol::New(::google::protobuf::Arena* arena) const {
  UniversalProtocol* n = new UniversalProtocol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UniversalProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.UniversalProtocol)
  communicatetest_ = 0u;
}

bool UniversalProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.UniversalProtocol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 communicateTest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &communicatetest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.UniversalProtocol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.UniversalProtocol)
  return false;
#undef DO_
}

void UniversalProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.UniversalProtocol)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 communicateTest = 1;
  if (this->communicatetest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->communicatetest(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.UniversalProtocol)
}

::google::protobuf::uint8* UniversalProtocol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.UniversalProtocol)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 communicateTest = 1;
  if (this->communicatetest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->communicatetest(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.UniversalProtocol)
  return target;
}

size_t UniversalProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.UniversalProtocol)
  size_t total_size = 0;

  // uint32 communicateTest = 1;
  if (this->communicatetest() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->communicatetest());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniversalProtocol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.UniversalProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  const UniversalProtocol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UniversalProtocol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.UniversalProtocol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.UniversalProtocol)
    MergeFrom(*source);
  }
}

void UniversalProtocol::MergeFrom(const UniversalProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.UniversalProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.communicatetest() != 0) {
    set_communicatetest(from.communicatetest());
  }
}

void UniversalProtocol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.UniversalProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniversalProtocol::CopyFrom(const UniversalProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.UniversalProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniversalProtocol::IsInitialized() const {
  return true;
}

void UniversalProtocol::Swap(UniversalProtocol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UniversalProtocol::InternalSwap(UniversalProtocol* other) {
  std::swap(communicatetest_, other->communicatetest_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UniversalProtocol::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UniversalProtocol

// uint32 communicateTest = 1;
void UniversalProtocol::clear_communicatetest() {
  communicatetest_ = 0u;
}
::google::protobuf::uint32 UniversalProtocol::communicatetest() const {
  // @@protoc_insertion_point(field_get:NetProto.UniversalProtocol.communicateTest)
  return communicatetest_;
}
void UniversalProtocol::set_communicatetest(::google::protobuf::uint32 value) {
  
  communicatetest_ = value;
  // @@protoc_insertion_point(field_set:NetProto.UniversalProtocol.communicateTest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSceneItem::kObjectUuidFieldNumber;
const int CreateSceneItem::kItemIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSceneItem::CreateSceneItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.CreateSceneItem)
}
CreateSceneItem::CreateSceneItem(const CreateSceneItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  objectuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.objectuuid().size() > 0) {
    objectuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objectuuid_);
  }
  itemid_ = from.itemid_;
  // @@protoc_insertion_point(copy_constructor:NetProto.CreateSceneItem)
}

void CreateSceneItem::SharedCtor() {
  objectuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemid_ = 0u;
  _cached_size_ = 0;
}

CreateSceneItem::~CreateSceneItem() {
  // @@protoc_insertion_point(destructor:NetProto.CreateSceneItem)
  SharedDtor();
}

void CreateSceneItem::SharedDtor() {
  objectuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateSceneItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSceneItem::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateSceneItem& CreateSceneItem::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateSceneItem* CreateSceneItem::New(::google::protobuf::Arena* arena) const {
  CreateSceneItem* n = new CreateSceneItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateSceneItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.CreateSceneItem)
  objectuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemid_ = 0u;
}

bool CreateSceneItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.CreateSceneItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string objectUuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectuuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->objectuuid().data(), this->objectuuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.CreateSceneItem.objectUuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 itemID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.CreateSceneItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.CreateSceneItem)
  return false;
#undef DO_
}

void CreateSceneItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.CreateSceneItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string objectUuid = 1;
  if (this->objectuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objectuuid().data(), this->objectuuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.CreateSceneItem.objectUuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->objectuuid(), output);
  }

  // uint32 itemID = 2;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.CreateSceneItem)
}

::google::protobuf::uint8* CreateSceneItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.CreateSceneItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string objectUuid = 1;
  if (this->objectuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objectuuid().data(), this->objectuuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.CreateSceneItem.objectUuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->objectuuid(), target);
  }

  // uint32 itemID = 2;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.CreateSceneItem)
  return target;
}

size_t CreateSceneItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.CreateSceneItem)
  size_t total_size = 0;

  // string objectUuid = 1;
  if (this->objectuuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->objectuuid());
  }

  // uint32 itemID = 2;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itemid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSceneItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.CreateSceneItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSceneItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSceneItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.CreateSceneItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.CreateSceneItem)
    MergeFrom(*source);
  }
}

void CreateSceneItem::MergeFrom(const CreateSceneItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.CreateSceneItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.objectuuid().size() > 0) {

    objectuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objectuuid_);
  }
  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
}

void CreateSceneItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.CreateSceneItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSceneItem::CopyFrom(const CreateSceneItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.CreateSceneItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSceneItem::IsInitialized() const {
  return true;
}

void CreateSceneItem::Swap(CreateSceneItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSceneItem::InternalSwap(CreateSceneItem* other) {
  objectuuid_.Swap(&other->objectuuid_);
  std::swap(itemid_, other->itemid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSceneItem::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSceneItem

// string objectUuid = 1;
void CreateSceneItem::clear_objectuuid() {
  objectuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateSceneItem::objectuuid() const {
  // @@protoc_insertion_point(field_get:NetProto.CreateSceneItem.objectUuid)
  return objectuuid_.GetNoArena();
}
void CreateSceneItem::set_objectuuid(const ::std::string& value) {
  
  objectuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CreateSceneItem.objectUuid)
}
#if LANG_CXX11
void CreateSceneItem::set_objectuuid(::std::string&& value) {
  
  objectuuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CreateSceneItem.objectUuid)
}
#endif
void CreateSceneItem::set_objectuuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  objectuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CreateSceneItem.objectUuid)
}
void CreateSceneItem::set_objectuuid(const char* value, size_t size) {
  
  objectuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CreateSceneItem.objectUuid)
}
::std::string* CreateSceneItem::mutable_objectuuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CreateSceneItem.objectUuid)
  return objectuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateSceneItem::release_objectuuid() {
  // @@protoc_insertion_point(field_release:NetProto.CreateSceneItem.objectUuid)
  
  return objectuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateSceneItem::set_allocated_objectuuid(::std::string* objectuuid) {
  if (objectuuid != NULL) {
    
  } else {
    
  }
  objectuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objectuuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CreateSceneItem.objectUuid)
}

// uint32 itemID = 2;
void CreateSceneItem::clear_itemid() {
  itemid_ = 0u;
}
::google::protobuf::uint32 CreateSceneItem::itemid() const {
  // @@protoc_insertion_point(field_get:NetProto.CreateSceneItem.itemID)
  return itemid_;
}
void CreateSceneItem::set_itemid(::google::protobuf::uint32 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CreateSceneItem.itemID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRobotInfo::kRobotIDFieldNumber;
const int CreateRobotInfo::kRobotPrototypeIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRobotInfo::CreateRobotInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.CreateRobotInfo)
}
CreateRobotInfo::CreateRobotInfo(const CreateRobotInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  robotid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.robotid().size() > 0) {
    robotid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robotid_);
  }
  robotprototypeid_ = from.robotprototypeid_;
  // @@protoc_insertion_point(copy_constructor:NetProto.CreateRobotInfo)
}

void CreateRobotInfo::SharedCtor() {
  robotid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robotprototypeid_ = 0u;
  _cached_size_ = 0;
}

CreateRobotInfo::~CreateRobotInfo() {
  // @@protoc_insertion_point(destructor:NetProto.CreateRobotInfo)
  SharedDtor();
}

void CreateRobotInfo::SharedDtor() {
  robotid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateRobotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRobotInfo::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateRobotInfo& CreateRobotInfo::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateRobotInfo* CreateRobotInfo::New(::google::protobuf::Arena* arena) const {
  CreateRobotInfo* n = new CreateRobotInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRobotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.CreateRobotInfo)
  robotid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robotprototypeid_ = 0u;
}

bool CreateRobotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.CreateRobotInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string robotID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robotid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->robotid().data(), this->robotid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.CreateRobotInfo.robotID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 robotPrototypeID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robotprototypeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.CreateRobotInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.CreateRobotInfo)
  return false;
#undef DO_
}

void CreateRobotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.CreateRobotInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robotID = 1;
  if (this->robotid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robotid().data(), this->robotid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.CreateRobotInfo.robotID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->robotid(), output);
  }

  // uint32 robotPrototypeID = 2;
  if (this->robotprototypeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robotprototypeid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.CreateRobotInfo)
}

::google::protobuf::uint8* CreateRobotInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.CreateRobotInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robotID = 1;
  if (this->robotid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robotid().data(), this->robotid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.CreateRobotInfo.robotID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->robotid(), target);
  }

  // uint32 robotPrototypeID = 2;
  if (this->robotprototypeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robotprototypeid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.CreateRobotInfo)
  return target;
}

size_t CreateRobotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.CreateRobotInfo)
  size_t total_size = 0;

  // string robotID = 1;
  if (this->robotid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->robotid());
  }

  // uint32 robotPrototypeID = 2;
  if (this->robotprototypeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robotprototypeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRobotInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.CreateRobotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRobotInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRobotInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.CreateRobotInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.CreateRobotInfo)
    MergeFrom(*source);
  }
}

void CreateRobotInfo::MergeFrom(const CreateRobotInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.CreateRobotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robotid().size() > 0) {

    robotid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robotid_);
  }
  if (from.robotprototypeid() != 0) {
    set_robotprototypeid(from.robotprototypeid());
  }
}

void CreateRobotInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.CreateRobotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRobotInfo::CopyFrom(const CreateRobotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.CreateRobotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRobotInfo::IsInitialized() const {
  return true;
}

void CreateRobotInfo::Swap(CreateRobotInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRobotInfo::InternalSwap(CreateRobotInfo* other) {
  robotid_.Swap(&other->robotid_);
  std::swap(robotprototypeid_, other->robotprototypeid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRobotInfo::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRobotInfo

// string robotID = 1;
void CreateRobotInfo::clear_robotid() {
  robotid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateRobotInfo::robotid() const {
  // @@protoc_insertion_point(field_get:NetProto.CreateRobotInfo.robotID)
  return robotid_.GetNoArena();
}
void CreateRobotInfo::set_robotid(const ::std::string& value) {
  
  robotid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.CreateRobotInfo.robotID)
}
#if LANG_CXX11
void CreateRobotInfo::set_robotid(::std::string&& value) {
  
  robotid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.CreateRobotInfo.robotID)
}
#endif
void CreateRobotInfo::set_robotid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  robotid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.CreateRobotInfo.robotID)
}
void CreateRobotInfo::set_robotid(const char* value, size_t size) {
  
  robotid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.CreateRobotInfo.robotID)
}
::std::string* CreateRobotInfo::mutable_robotid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.CreateRobotInfo.robotID)
  return robotid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateRobotInfo::release_robotid() {
  // @@protoc_insertion_point(field_release:NetProto.CreateRobotInfo.robotID)
  
  return robotid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateRobotInfo::set_allocated_robotid(::std::string* robotid) {
  if (robotid != NULL) {
    
  } else {
    
  }
  robotid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robotid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.CreateRobotInfo.robotID)
}

// uint32 robotPrototypeID = 2;
void CreateRobotInfo::clear_robotprototypeid() {
  robotprototypeid_ = 0u;
}
::google::protobuf::uint32 CreateRobotInfo::robotprototypeid() const {
  // @@protoc_insertion_point(field_get:NetProto.CreateRobotInfo.robotPrototypeID)
  return robotprototypeid_;
}
void CreateRobotInfo::set_robotprototypeid(::google::protobuf::uint32 value) {
  
  robotprototypeid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.CreateRobotInfo.robotPrototypeID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneData_ObjInfo::kUuidFieldNumber;
const int SceneData_ObjInfo::kClassIdFieldNumber;
const int SceneData_ObjInfo::kItemIdFieldNumber;
const int SceneData_ObjInfo::kPosRotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneData_ObjInfo::SceneData_ObjInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.SceneData.ObjInfo)
}
SceneData_ObjInfo::SceneData_ObjInfo(const SceneData_ObjInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_pos_rot()) {
    pos_rot_ = new ::NetProto::PosRot(*from.pos_rot_);
  } else {
    pos_rot_ = NULL;
  }
  ::memcpy(&class_id_, &from.class_id_,
    reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&class_id_) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:NetProto.SceneData.ObjInfo)
}

void SceneData_ObjInfo::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_rot_, 0, reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&pos_rot_) + sizeof(item_id_));
  _cached_size_ = 0;
}

SceneData_ObjInfo::~SceneData_ObjInfo() {
  // @@protoc_insertion_point(destructor:NetProto.SceneData.ObjInfo)
  SharedDtor();
}

void SceneData_ObjInfo::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete pos_rot_;
  }
}

void SceneData_ObjInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneData_ObjInfo::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneData_ObjInfo& SceneData_ObjInfo::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneData_ObjInfo* SceneData_ObjInfo::New(::google::protobuf::Arena* arena) const {
  SceneData_ObjInfo* n = new SceneData_ObjInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneData_ObjInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.SceneData.ObjInfo)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pos_rot_ != NULL) {
    delete pos_rot_;
  }
  pos_rot_ = NULL;
  ::memset(&class_id_, 0, reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&class_id_) + sizeof(item_id_));
}

bool SceneData_ObjInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.SceneData.ObjInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.SceneData.ObjInfo.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 class_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 item_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.PosRot pos_rot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos_rot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.SceneData.ObjInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.SceneData.ObjInfo)
  return false;
#undef DO_
}

void SceneData_ObjInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.SceneData.ObjInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.SceneData.ObjInfo.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // uint32 class_id = 2;
  if (this->class_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->class_id(), output);
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_id(), output);
  }

  // .NetProto.PosRot pos_rot = 4;
  if (this->has_pos_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pos_rot_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.SceneData.ObjInfo)
}

::google::protobuf::uint8* SceneData_ObjInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.SceneData.ObjInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.SceneData.ObjInfo.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // uint32 class_id = 2;
  if (this->class_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->class_id(), target);
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_id(), target);
  }

  // .NetProto.PosRot pos_rot = 4;
  if (this->has_pos_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pos_rot_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.SceneData.ObjInfo)
  return target;
}

size_t SceneData_ObjInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.SceneData.ObjInfo)
  size_t total_size = 0;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // .NetProto.PosRot pos_rot = 4;
  if (this->has_pos_rot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_rot_);
  }

  // uint32 class_id = 2;
  if (this->class_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->class_id());
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneData_ObjInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.SceneData.ObjInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneData_ObjInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneData_ObjInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.SceneData.ObjInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.SceneData.ObjInfo)
    MergeFrom(*source);
  }
}

void SceneData_ObjInfo::MergeFrom(const SceneData_ObjInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.SceneData.ObjInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_pos_rot()) {
    mutable_pos_rot()->::NetProto::PosRot::MergeFrom(from.pos_rot());
  }
  if (from.class_id() != 0) {
    set_class_id(from.class_id());
  }
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
}

void SceneData_ObjInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.SceneData.ObjInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneData_ObjInfo::CopyFrom(const SceneData_ObjInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.SceneData.ObjInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneData_ObjInfo::IsInitialized() const {
  return true;
}

void SceneData_ObjInfo::Swap(SceneData_ObjInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneData_ObjInfo::InternalSwap(SceneData_ObjInfo* other) {
  uuid_.Swap(&other->uuid_);
  std::swap(pos_rot_, other->pos_rot_);
  std::swap(class_id_, other->class_id_);
  std::swap(item_id_, other->item_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneData_ObjInfo::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneData_ObjInfo

// string uuid = 1;
void SceneData_ObjInfo::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SceneData_ObjInfo::uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneData.ObjInfo.uuid)
  return uuid_.GetNoArena();
}
void SceneData_ObjInfo::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.SceneData.ObjInfo.uuid)
}
#if LANG_CXX11
void SceneData_ObjInfo::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.SceneData.ObjInfo.uuid)
}
#endif
void SceneData_ObjInfo::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.SceneData.ObjInfo.uuid)
}
void SceneData_ObjInfo::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.SceneData.ObjInfo.uuid)
}
::std::string* SceneData_ObjInfo::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.SceneData.ObjInfo.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SceneData_ObjInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.SceneData.ObjInfo.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SceneData_ObjInfo::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.SceneData.ObjInfo.uuid)
}

// uint32 class_id = 2;
void SceneData_ObjInfo::clear_class_id() {
  class_id_ = 0u;
}
::google::protobuf::uint32 SceneData_ObjInfo::class_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneData.ObjInfo.class_id)
  return class_id_;
}
void SceneData_ObjInfo::set_class_id(::google::protobuf::uint32 value) {
  
  class_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SceneData.ObjInfo.class_id)
}

// uint32 item_id = 3;
void SceneData_ObjInfo::clear_item_id() {
  item_id_ = 0u;
}
::google::protobuf::uint32 SceneData_ObjInfo::item_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneData.ObjInfo.item_id)
  return item_id_;
}
void SceneData_ObjInfo::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SceneData.ObjInfo.item_id)
}

// .NetProto.PosRot pos_rot = 4;
bool SceneData_ObjInfo::has_pos_rot() const {
  return this != internal_default_instance() && pos_rot_ != NULL;
}
void SceneData_ObjInfo::clear_pos_rot() {
  if (GetArenaNoVirtual() == NULL && pos_rot_ != NULL) delete pos_rot_;
  pos_rot_ = NULL;
}
const ::NetProto::PosRot& SceneData_ObjInfo::pos_rot() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneData.ObjInfo.pos_rot)
  return pos_rot_ != NULL ? *pos_rot_
                         : *::NetProto::PosRot::internal_default_instance();
}
::NetProto::PosRot* SceneData_ObjInfo::mutable_pos_rot() {
  
  if (pos_rot_ == NULL) {
    pos_rot_ = new ::NetProto::PosRot;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.SceneData.ObjInfo.pos_rot)
  return pos_rot_;
}
::NetProto::PosRot* SceneData_ObjInfo::release_pos_rot() {
  // @@protoc_insertion_point(field_release:NetProto.SceneData.ObjInfo.pos_rot)
  
  ::NetProto::PosRot* temp = pos_rot_;
  pos_rot_ = NULL;
  return temp;
}
void SceneData_ObjInfo::set_allocated_pos_rot(::NetProto::PosRot* pos_rot) {
  delete pos_rot_;
  pos_rot_ = pos_rot;
  if (pos_rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.SceneData.ObjInfo.pos_rot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneData::kRobotIdFieldNumber;
const int SceneData::kMapIdFieldNumber;
const int SceneData::kObjInfoFieldNumber;
const int SceneData::kStatusVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneData::SceneData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.SceneData)
}
SceneData::SceneData(const SceneData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      objinfo_(from.objinfo_),
      statusvector_(from.statusvector_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.robot_id().size() > 0) {
    robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
  }
  map_id_ = from.map_id_;
  // @@protoc_insertion_point(copy_constructor:NetProto.SceneData)
}

void SceneData::SharedCtor() {
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_id_ = 0u;
  _cached_size_ = 0;
}

SceneData::~SceneData() {
  // @@protoc_insertion_point(destructor:NetProto.SceneData)
  SharedDtor();
}

void SceneData::SharedDtor() {
  robot_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SceneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneData::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneData& SceneData::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneData* SceneData::New(::google::protobuf::Arena* arena) const {
  SceneData* n = new SceneData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneData::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.SceneData)
  objinfo_.Clear();
  statusvector_.Clear();
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_id_ = 0u;
}

bool SceneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.SceneData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string robot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->robot_id().data(), this->robot_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.SceneData.robot_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 map_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.SceneData.ObjInfo objInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.Action.Status.NaturalActionStatus statusVector = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statusvector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.SceneData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.SceneData)
  return false;
#undef DO_
}

void SceneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.SceneData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robot_id().data(), this->robot_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.SceneData.robot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->robot_id(), output);
  }

  // uint32 map_id = 2;
  if (this->map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_id(), output);
  }

  // repeated .NetProto.SceneData.ObjInfo objInfo = 3;
  for (unsigned int i = 0, n = this->objinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->objinfo(i), output);
  }

  // repeated .NetProto.Action.Status.NaturalActionStatus statusVector = 4;
  for (unsigned int i = 0, n = this->statusvector_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->statusvector(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.SceneData)
}

::google::protobuf::uint8* SceneData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.SceneData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robot_id().data(), this->robot_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.SceneData.robot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->robot_id(), target);
  }

  // uint32 map_id = 2;
  if (this->map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->map_id(), target);
  }

  // repeated .NetProto.SceneData.ObjInfo objInfo = 3;
  for (unsigned int i = 0, n = this->objinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->objinfo(i), deterministic, target);
  }

  // repeated .NetProto.Action.Status.NaturalActionStatus statusVector = 4;
  for (unsigned int i = 0, n = this->statusvector_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->statusvector(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.SceneData)
  return target;
}

size_t SceneData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.SceneData)
  size_t total_size = 0;

  // repeated .NetProto.SceneData.ObjInfo objInfo = 3;
  {
    unsigned int count = this->objinfo_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objinfo(i));
    }
  }

  // repeated .NetProto.Action.Status.NaturalActionStatus statusVector = 4;
  {
    unsigned int count = this->statusvector_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statusvector(i));
    }
  }

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->robot_id());
  }

  // uint32 map_id = 2;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->map_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.SceneData)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.SceneData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.SceneData)
    MergeFrom(*source);
  }
}

void SceneData::MergeFrom(const SceneData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.SceneData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objinfo_.MergeFrom(from.objinfo_);
  statusvector_.MergeFrom(from.statusvector_);
  if (from.robot_id().size() > 0) {

    robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
  }
  if (from.map_id() != 0) {
    set_map_id(from.map_id());
  }
}

void SceneData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.SceneData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneData::CopyFrom(const SceneData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.SceneData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneData::IsInitialized() const {
  return true;
}

void SceneData::Swap(SceneData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneData::InternalSwap(SceneData* other) {
  objinfo_.InternalSwap(&other->objinfo_);
  statusvector_.InternalSwap(&other->statusvector_);
  robot_id_.Swap(&other->robot_id_);
  std::swap(map_id_, other->map_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneData::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneData

// string robot_id = 1;
void SceneData::clear_robot_id() {
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SceneData::robot_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneData.robot_id)
  return robot_id_.GetNoArena();
}
void SceneData::set_robot_id(const ::std::string& value) {
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.SceneData.robot_id)
}
#if LANG_CXX11
void SceneData::set_robot_id(::std::string&& value) {
  
  robot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.SceneData.robot_id)
}
#endif
void SceneData::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.SceneData.robot_id)
}
void SceneData::set_robot_id(const char* value, size_t size) {
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.SceneData.robot_id)
}
::std::string* SceneData::mutable_robot_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.SceneData.robot_id)
  return robot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SceneData::release_robot_id() {
  // @@protoc_insertion_point(field_release:NetProto.SceneData.robot_id)
  
  return robot_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SceneData::set_allocated_robot_id(::std::string* robot_id) {
  if (robot_id != NULL) {
    
  } else {
    
  }
  robot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.SceneData.robot_id)
}

// uint32 map_id = 2;
void SceneData::clear_map_id() {
  map_id_ = 0u;
}
::google::protobuf::uint32 SceneData::map_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneData.map_id)
  return map_id_;
}
void SceneData::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SceneData.map_id)
}

// repeated .NetProto.SceneData.ObjInfo objInfo = 3;
int SceneData::objinfo_size() const {
  return objinfo_.size();
}
void SceneData::clear_objinfo() {
  objinfo_.Clear();
}
const ::NetProto::SceneData_ObjInfo& SceneData::objinfo(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.SceneData.objInfo)
  return objinfo_.Get(index);
}
::NetProto::SceneData_ObjInfo* SceneData::mutable_objinfo(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.SceneData.objInfo)
  return objinfo_.Mutable(index);
}
::NetProto::SceneData_ObjInfo* SceneData::add_objinfo() {
  // @@protoc_insertion_point(field_add:NetProto.SceneData.objInfo)
  return objinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::SceneData_ObjInfo >*
SceneData::mutable_objinfo() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.SceneData.objInfo)
  return &objinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::SceneData_ObjInfo >&
SceneData::objinfo() const {
  // @@protoc_insertion_point(field_list:NetProto.SceneData.objInfo)
  return objinfo_;
}

// repeated .NetProto.Action.Status.NaturalActionStatus statusVector = 4;
int SceneData::statusvector_size() const {
  return statusvector_.size();
}
void SceneData::clear_statusvector() {
  statusvector_.Clear();
}
const ::NetProto::Action::Status::NaturalActionStatus& SceneData::statusvector(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.SceneData.statusVector)
  return statusvector_.Get(index);
}
::NetProto::Action::Status::NaturalActionStatus* SceneData::mutable_statusvector(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.SceneData.statusVector)
  return statusvector_.Mutable(index);
}
::NetProto::Action::Status::NaturalActionStatus* SceneData::add_statusvector() {
  // @@protoc_insertion_point(field_add:NetProto.SceneData.statusVector)
  return statusvector_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >*
SceneData::mutable_statusvector() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.SceneData.statusVector)
  return &statusvector_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >&
SceneData::statusvector() const {
  // @@protoc_insertion_point(field_list:NetProto.SceneData.statusVector)
  return statusvector_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2AAddUserReq::kHeaderFieldNumber;
const int C2AAddUserReq::kSeqFieldNumber;
const int C2AAddUserReq::kAppidFieldNumber;
const int C2AAddUserReq::kUnameFieldNumber;
const int C2AAddUserReq::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2AAddUserReq::C2AAddUserReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.C2AAddUserReq)
}
C2AAddUserReq::C2AAddUserReq(const C2AAddUserReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.seq().size() > 0) {
    seq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_);
  }
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appid().size() > 0) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uname().size() > 0) {
    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_header()) {
    header_ = new ::NetProto::MsgHead(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NetProto.C2AAddUserReq)
}

void C2AAddUserReq::SharedCtor() {
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

C2AAddUserReq::~C2AAddUserReq() {
  // @@protoc_insertion_point(destructor:NetProto.C2AAddUserReq)
  SharedDtor();
}

void C2AAddUserReq::SharedDtor() {
  seq_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void C2AAddUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2AAddUserReq::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2AAddUserReq& C2AAddUserReq::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2AAddUserReq* C2AAddUserReq::New(::google::protobuf::Arena* arena) const {
  C2AAddUserReq* n = new C2AAddUserReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2AAddUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.C2AAddUserReq)
  seq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool C2AAddUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.C2AAddUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead Header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seq()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->seq().data(), this->seq().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.C2AAddUserReq.Seq"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Appid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.C2AAddUserReq.Appid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Uname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.C2AAddUserReq.Uname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Password = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.C2AAddUserReq.Password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.C2AAddUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.C2AAddUserReq)
  return false;
#undef DO_
}

void C2AAddUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.C2AAddUserReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead Header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string Seq = 2;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2AAddUserReq.Seq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->seq(), output);
  }

  // string Appid = 3;
  if (this->appid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2AAddUserReq.Appid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->appid(), output);
  }

  // string Uname = 4;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2AAddUserReq.Uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uname(), output);
  }

  // string Password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2AAddUserReq.Password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.C2AAddUserReq)
}

::google::protobuf::uint8* C2AAddUserReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.C2AAddUserReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead Header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string Seq = 2;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2AAddUserReq.Seq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seq(), target);
  }

  // string Appid = 3;
  if (this->appid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2AAddUserReq.Appid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appid(), target);
  }

  // string Uname = 4;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2AAddUserReq.Uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uname(), target);
  }

  // string Password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2AAddUserReq.Password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.C2AAddUserReq)
  return target;
}

size_t C2AAddUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.C2AAddUserReq)
  size_t total_size = 0;

  // string Seq = 2;
  if (this->seq().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->seq());
  }

  // string Appid = 3;
  if (this->appid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appid());
  }

  // string Uname = 4;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uname());
  }

  // string Password = 5;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // .NetProto.MsgHead Header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2AAddUserReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.C2AAddUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  const C2AAddUserReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2AAddUserReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.C2AAddUserReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.C2AAddUserReq)
    MergeFrom(*source);
  }
}

void C2AAddUserReq::MergeFrom(const C2AAddUserReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.C2AAddUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seq().size() > 0) {

    seq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_);
  }
  if (from.appid().size() > 0) {

    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_header()) {
    mutable_header()->::NetProto::MsgHead::MergeFrom(from.header());
  }
}

void C2AAddUserReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.C2AAddUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2AAddUserReq::CopyFrom(const C2AAddUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.C2AAddUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2AAddUserReq::IsInitialized() const {
  return true;
}

void C2AAddUserReq::Swap(C2AAddUserReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2AAddUserReq::InternalSwap(C2AAddUserReq* other) {
  seq_.Swap(&other->seq_);
  appid_.Swap(&other->appid_);
  uname_.Swap(&other->uname_);
  password_.Swap(&other->password_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2AAddUserReq::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2AAddUserReq

// .NetProto.MsgHead Header = 1;
bool C2AAddUserReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void C2AAddUserReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::NetProto::MsgHead& C2AAddUserReq::header() const {
  // @@protoc_insertion_point(field_get:NetProto.C2AAddUserReq.Header)
  return header_ != NULL ? *header_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* C2AAddUserReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.C2AAddUserReq.Header)
  return header_;
}
::NetProto::MsgHead* C2AAddUserReq::release_header() {
  // @@protoc_insertion_point(field_release:NetProto.C2AAddUserReq.Header)
  
  ::NetProto::MsgHead* temp = header_;
  header_ = NULL;
  return temp;
}
void C2AAddUserReq::set_allocated_header(::NetProto::MsgHead* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.C2AAddUserReq.Header)
}

// string Seq = 2;
void C2AAddUserReq::clear_seq() {
  seq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& C2AAddUserReq::seq() const {
  // @@protoc_insertion_point(field_get:NetProto.C2AAddUserReq.Seq)
  return seq_.GetNoArena();
}
void C2AAddUserReq::set_seq(const ::std::string& value) {
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.C2AAddUserReq.Seq)
}
#if LANG_CXX11
void C2AAddUserReq::set_seq(::std::string&& value) {
  
  seq_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.C2AAddUserReq.Seq)
}
#endif
void C2AAddUserReq::set_seq(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.C2AAddUserReq.Seq)
}
void C2AAddUserReq::set_seq(const char* value, size_t size) {
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.C2AAddUserReq.Seq)
}
::std::string* C2AAddUserReq::mutable_seq() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.C2AAddUserReq.Seq)
  return seq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* C2AAddUserReq::release_seq() {
  // @@protoc_insertion_point(field_release:NetProto.C2AAddUserReq.Seq)
  
  return seq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void C2AAddUserReq::set_allocated_seq(::std::string* seq) {
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq);
  // @@protoc_insertion_point(field_set_allocated:NetProto.C2AAddUserReq.Seq)
}

// string Appid = 3;
void C2AAddUserReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& C2AAddUserReq::appid() const {
  // @@protoc_insertion_point(field_get:NetProto.C2AAddUserReq.Appid)
  return appid_.GetNoArena();
}
void C2AAddUserReq::set_appid(const ::std::string& value) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.C2AAddUserReq.Appid)
}
#if LANG_CXX11
void C2AAddUserReq::set_appid(::std::string&& value) {
  
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.C2AAddUserReq.Appid)
}
#endif
void C2AAddUserReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.C2AAddUserReq.Appid)
}
void C2AAddUserReq::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.C2AAddUserReq.Appid)
}
::std::string* C2AAddUserReq::mutable_appid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.C2AAddUserReq.Appid)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* C2AAddUserReq::release_appid() {
  // @@protoc_insertion_point(field_release:NetProto.C2AAddUserReq.Appid)
  
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void C2AAddUserReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.C2AAddUserReq.Appid)
}

// string Uname = 4;
void C2AAddUserReq::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& C2AAddUserReq::uname() const {
  // @@protoc_insertion_point(field_get:NetProto.C2AAddUserReq.Uname)
  return uname_.GetNoArena();
}
void C2AAddUserReq::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.C2AAddUserReq.Uname)
}
#if LANG_CXX11
void C2AAddUserReq::set_uname(::std::string&& value) {
  
  uname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.C2AAddUserReq.Uname)
}
#endif
void C2AAddUserReq::set_uname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.C2AAddUserReq.Uname)
}
void C2AAddUserReq::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.C2AAddUserReq.Uname)
}
::std::string* C2AAddUserReq::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.C2AAddUserReq.Uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* C2AAddUserReq::release_uname() {
  // @@protoc_insertion_point(field_release:NetProto.C2AAddUserReq.Uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void C2AAddUserReq::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:NetProto.C2AAddUserReq.Uname)
}

// string Password = 5;
void C2AAddUserReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& C2AAddUserReq::password() const {
  // @@protoc_insertion_point(field_get:NetProto.C2AAddUserReq.Password)
  return password_.GetNoArena();
}
void C2AAddUserReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.C2AAddUserReq.Password)
}
#if LANG_CXX11
void C2AAddUserReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.C2AAddUserReq.Password)
}
#endif
void C2AAddUserReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.C2AAddUserReq.Password)
}
void C2AAddUserReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.C2AAddUserReq.Password)
}
::std::string* C2AAddUserReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.C2AAddUserReq.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* C2AAddUserReq::release_password() {
  // @@protoc_insertion_point(field_release:NetProto.C2AAddUserReq.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void C2AAddUserReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NetProto.C2AAddUserReq.Password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2ACheckUserReq::kHeaderFieldNumber;
const int C2ACheckUserReq::kSeqFieldNumber;
const int C2ACheckUserReq::kAppidFieldNumber;
const int C2ACheckUserReq::kUnameFieldNumber;
const int C2ACheckUserReq::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2ACheckUserReq::C2ACheckUserReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.C2ACheckUserReq)
}
C2ACheckUserReq::C2ACheckUserReq(const C2ACheckUserReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.seq().size() > 0) {
    seq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_);
  }
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appid().size() > 0) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uname().size() > 0) {
    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_header()) {
    header_ = new ::NetProto::MsgHead(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NetProto.C2ACheckUserReq)
}

void C2ACheckUserReq::SharedCtor() {
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

C2ACheckUserReq::~C2ACheckUserReq() {
  // @@protoc_insertion_point(destructor:NetProto.C2ACheckUserReq)
  SharedDtor();
}

void C2ACheckUserReq::SharedDtor() {
  seq_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void C2ACheckUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2ACheckUserReq::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2ACheckUserReq& C2ACheckUserReq::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2ACheckUserReq* C2ACheckUserReq::New(::google::protobuf::Arena* arena) const {
  C2ACheckUserReq* n = new C2ACheckUserReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2ACheckUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.C2ACheckUserReq)
  seq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool C2ACheckUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.C2ACheckUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead Header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seq()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->seq().data(), this->seq().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.C2ACheckUserReq.Seq"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Appid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.C2ACheckUserReq.Appid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Uname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.C2ACheckUserReq.Uname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Password = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.C2ACheckUserReq.Password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.C2ACheckUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.C2ACheckUserReq)
  return false;
#undef DO_
}

void C2ACheckUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.C2ACheckUserReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead Header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string Seq = 2;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2ACheckUserReq.Seq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->seq(), output);
  }

  // string Appid = 3;
  if (this->appid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2ACheckUserReq.Appid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->appid(), output);
  }

  // string Uname = 4;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2ACheckUserReq.Uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uname(), output);
  }

  // string Password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2ACheckUserReq.Password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.C2ACheckUserReq)
}

::google::protobuf::uint8* C2ACheckUserReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.C2ACheckUserReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead Header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string Seq = 2;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2ACheckUserReq.Seq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seq(), target);
  }

  // string Appid = 3;
  if (this->appid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2ACheckUserReq.Appid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appid(), target);
  }

  // string Uname = 4;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2ACheckUserReq.Uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uname(), target);
  }

  // string Password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2ACheckUserReq.Password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.C2ACheckUserReq)
  return target;
}

size_t C2ACheckUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.C2ACheckUserReq)
  size_t total_size = 0;

  // string Seq = 2;
  if (this->seq().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->seq());
  }

  // string Appid = 3;
  if (this->appid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appid());
  }

  // string Uname = 4;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uname());
  }

  // string Password = 5;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // .NetProto.MsgHead Header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2ACheckUserReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.C2ACheckUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  const C2ACheckUserReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2ACheckUserReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.C2ACheckUserReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.C2ACheckUserReq)
    MergeFrom(*source);
  }
}

void C2ACheckUserReq::MergeFrom(const C2ACheckUserReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.C2ACheckUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seq().size() > 0) {

    seq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_);
  }
  if (from.appid().size() > 0) {

    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_header()) {
    mutable_header()->::NetProto::MsgHead::MergeFrom(from.header());
  }
}

void C2ACheckUserReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.C2ACheckUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2ACheckUserReq::CopyFrom(const C2ACheckUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.C2ACheckUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2ACheckUserReq::IsInitialized() const {
  return true;
}

void C2ACheckUserReq::Swap(C2ACheckUserReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2ACheckUserReq::InternalSwap(C2ACheckUserReq* other) {
  seq_.Swap(&other->seq_);
  appid_.Swap(&other->appid_);
  uname_.Swap(&other->uname_);
  password_.Swap(&other->password_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2ACheckUserReq::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2ACheckUserReq

// .NetProto.MsgHead Header = 1;
bool C2ACheckUserReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void C2ACheckUserReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::NetProto::MsgHead& C2ACheckUserReq::header() const {
  // @@protoc_insertion_point(field_get:NetProto.C2ACheckUserReq.Header)
  return header_ != NULL ? *header_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* C2ACheckUserReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.C2ACheckUserReq.Header)
  return header_;
}
::NetProto::MsgHead* C2ACheckUserReq::release_header() {
  // @@protoc_insertion_point(field_release:NetProto.C2ACheckUserReq.Header)
  
  ::NetProto::MsgHead* temp = header_;
  header_ = NULL;
  return temp;
}
void C2ACheckUserReq::set_allocated_header(::NetProto::MsgHead* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.C2ACheckUserReq.Header)
}

// string Seq = 2;
void C2ACheckUserReq::clear_seq() {
  seq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& C2ACheckUserReq::seq() const {
  // @@protoc_insertion_point(field_get:NetProto.C2ACheckUserReq.Seq)
  return seq_.GetNoArena();
}
void C2ACheckUserReq::set_seq(const ::std::string& value) {
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.C2ACheckUserReq.Seq)
}
#if LANG_CXX11
void C2ACheckUserReq::set_seq(::std::string&& value) {
  
  seq_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.C2ACheckUserReq.Seq)
}
#endif
void C2ACheckUserReq::set_seq(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.C2ACheckUserReq.Seq)
}
void C2ACheckUserReq::set_seq(const char* value, size_t size) {
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.C2ACheckUserReq.Seq)
}
::std::string* C2ACheckUserReq::mutable_seq() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.C2ACheckUserReq.Seq)
  return seq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* C2ACheckUserReq::release_seq() {
  // @@protoc_insertion_point(field_release:NetProto.C2ACheckUserReq.Seq)
  
  return seq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void C2ACheckUserReq::set_allocated_seq(::std::string* seq) {
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq);
  // @@protoc_insertion_point(field_set_allocated:NetProto.C2ACheckUserReq.Seq)
}

// string Appid = 3;
void C2ACheckUserReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& C2ACheckUserReq::appid() const {
  // @@protoc_insertion_point(field_get:NetProto.C2ACheckUserReq.Appid)
  return appid_.GetNoArena();
}
void C2ACheckUserReq::set_appid(const ::std::string& value) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.C2ACheckUserReq.Appid)
}
#if LANG_CXX11
void C2ACheckUserReq::set_appid(::std::string&& value) {
  
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.C2ACheckUserReq.Appid)
}
#endif
void C2ACheckUserReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.C2ACheckUserReq.Appid)
}
void C2ACheckUserReq::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.C2ACheckUserReq.Appid)
}
::std::string* C2ACheckUserReq::mutable_appid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.C2ACheckUserReq.Appid)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* C2ACheckUserReq::release_appid() {
  // @@protoc_insertion_point(field_release:NetProto.C2ACheckUserReq.Appid)
  
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void C2ACheckUserReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.C2ACheckUserReq.Appid)
}

// string Uname = 4;
void C2ACheckUserReq::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& C2ACheckUserReq::uname() const {
  // @@protoc_insertion_point(field_get:NetProto.C2ACheckUserReq.Uname)
  return uname_.GetNoArena();
}
void C2ACheckUserReq::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.C2ACheckUserReq.Uname)
}
#if LANG_CXX11
void C2ACheckUserReq::set_uname(::std::string&& value) {
  
  uname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.C2ACheckUserReq.Uname)
}
#endif
void C2ACheckUserReq::set_uname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.C2ACheckUserReq.Uname)
}
void C2ACheckUserReq::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.C2ACheckUserReq.Uname)
}
::std::string* C2ACheckUserReq::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.C2ACheckUserReq.Uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* C2ACheckUserReq::release_uname() {
  // @@protoc_insertion_point(field_release:NetProto.C2ACheckUserReq.Uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void C2ACheckUserReq::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:NetProto.C2ACheckUserReq.Uname)
}

// string Password = 5;
void C2ACheckUserReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& C2ACheckUserReq::password() const {
  // @@protoc_insertion_point(field_get:NetProto.C2ACheckUserReq.Password)
  return password_.GetNoArena();
}
void C2ACheckUserReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.C2ACheckUserReq.Password)
}
#if LANG_CXX11
void C2ACheckUserReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.C2ACheckUserReq.Password)
}
#endif
void C2ACheckUserReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.C2ACheckUserReq.Password)
}
void C2ACheckUserReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.C2ACheckUserReq.Password)
}
::std::string* C2ACheckUserReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.C2ACheckUserReq.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* C2ACheckUserReq::release_password() {
  // @@protoc_insertion_point(field_release:NetProto.C2ACheckUserReq.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void C2ACheckUserReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NetProto.C2ACheckUserReq.Password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int A2CAddUserResp::kHeaderFieldNumber;
const int A2CAddUserResp::kSeqFieldNumber;
const int A2CAddUserResp::kResultFieldNumber;
const int A2CAddUserResp::kMsgFieldNumber;
const int A2CAddUserResp::kUidFieldNumber;
const int A2CAddUserResp::kUnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

A2CAddUserResp::A2CAddUserResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.A2CAddUserResp)
}
A2CAddUserResp::A2CAddUserResp(const A2CAddUserResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.seq().size() > 0) {
    seq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uname().size() > 0) {
    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.has_header()) {
    header_ = new ::NetProto::MsgHead(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&result_) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:NetProto.A2CAddUserResp)
}

void A2CAddUserResp::SharedCtor() {
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&header_) + sizeof(uid_));
  _cached_size_ = 0;
}

A2CAddUserResp::~A2CAddUserResp() {
  // @@protoc_insertion_point(destructor:NetProto.A2CAddUserResp)
  SharedDtor();
}

void A2CAddUserResp::SharedDtor() {
  seq_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void A2CAddUserResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* A2CAddUserResp::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const A2CAddUserResp& A2CAddUserResp::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

A2CAddUserResp* A2CAddUserResp::New(::google::protobuf::Arena* arena) const {
  A2CAddUserResp* n = new A2CAddUserResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void A2CAddUserResp::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.A2CAddUserResp)
  seq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&result_, 0, reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&result_) + sizeof(uid_));
}

bool A2CAddUserResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.A2CAddUserResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead Header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seq()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->seq().data(), this->seq().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.A2CAddUserResp.Seq"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.A2CAddUserResp.Msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Uid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Uname = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.A2CAddUserResp.Uname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.A2CAddUserResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.A2CAddUserResp)
  return false;
#undef DO_
}

void A2CAddUserResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.A2CAddUserResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead Header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string Seq = 2;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.A2CAddUserResp.Seq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->seq(), output);
  }

  // int64 Result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->result(), output);
  }

  // string Msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.A2CAddUserResp.Msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg(), output);
  }

  // int64 Uid = 5;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->uid(), output);
  }

  // string Uname = 6;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.A2CAddUserResp.Uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->uname(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.A2CAddUserResp)
}

::google::protobuf::uint8* A2CAddUserResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.A2CAddUserResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead Header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string Seq = 2;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.A2CAddUserResp.Seq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seq(), target);
  }

  // int64 Result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->result(), target);
  }

  // string Msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.A2CAddUserResp.Msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  // int64 Uid = 5;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->uid(), target);
  }

  // string Uname = 6;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.A2CAddUserResp.Uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->uname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.A2CAddUserResp)
  return target;
}

size_t A2CAddUserResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.A2CAddUserResp)
  size_t total_size = 0;

  // string Seq = 2;
  if (this->seq().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->seq());
  }

  // string Msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // string Uname = 6;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uname());
  }

  // .NetProto.MsgHead Header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 Result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->result());
  }

  // int64 Uid = 5;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void A2CAddUserResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.A2CAddUserResp)
  GOOGLE_DCHECK_NE(&from, this);
  const A2CAddUserResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const A2CAddUserResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.A2CAddUserResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.A2CAddUserResp)
    MergeFrom(*source);
  }
}

void A2CAddUserResp::MergeFrom(const A2CAddUserResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.A2CAddUserResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seq().size() > 0) {

    seq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.has_header()) {
    mutable_header()->::NetProto::MsgHead::MergeFrom(from.header());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void A2CAddUserResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.A2CAddUserResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void A2CAddUserResp::CopyFrom(const A2CAddUserResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.A2CAddUserResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A2CAddUserResp::IsInitialized() const {
  return true;
}

void A2CAddUserResp::Swap(A2CAddUserResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void A2CAddUserResp::InternalSwap(A2CAddUserResp* other) {
  seq_.Swap(&other->seq_);
  msg_.Swap(&other->msg_);
  uname_.Swap(&other->uname_);
  std::swap(header_, other->header_);
  std::swap(result_, other->result_);
  std::swap(uid_, other->uid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata A2CAddUserResp::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// A2CAddUserResp

// .NetProto.MsgHead Header = 1;
bool A2CAddUserResp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void A2CAddUserResp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::NetProto::MsgHead& A2CAddUserResp::header() const {
  // @@protoc_insertion_point(field_get:NetProto.A2CAddUserResp.Header)
  return header_ != NULL ? *header_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* A2CAddUserResp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.A2CAddUserResp.Header)
  return header_;
}
::NetProto::MsgHead* A2CAddUserResp::release_header() {
  // @@protoc_insertion_point(field_release:NetProto.A2CAddUserResp.Header)
  
  ::NetProto::MsgHead* temp = header_;
  header_ = NULL;
  return temp;
}
void A2CAddUserResp::set_allocated_header(::NetProto::MsgHead* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.A2CAddUserResp.Header)
}

// string Seq = 2;
void A2CAddUserResp::clear_seq() {
  seq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& A2CAddUserResp::seq() const {
  // @@protoc_insertion_point(field_get:NetProto.A2CAddUserResp.Seq)
  return seq_.GetNoArena();
}
void A2CAddUserResp::set_seq(const ::std::string& value) {
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.A2CAddUserResp.Seq)
}
#if LANG_CXX11
void A2CAddUserResp::set_seq(::std::string&& value) {
  
  seq_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.A2CAddUserResp.Seq)
}
#endif
void A2CAddUserResp::set_seq(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.A2CAddUserResp.Seq)
}
void A2CAddUserResp::set_seq(const char* value, size_t size) {
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.A2CAddUserResp.Seq)
}
::std::string* A2CAddUserResp::mutable_seq() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.A2CAddUserResp.Seq)
  return seq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* A2CAddUserResp::release_seq() {
  // @@protoc_insertion_point(field_release:NetProto.A2CAddUserResp.Seq)
  
  return seq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void A2CAddUserResp::set_allocated_seq(::std::string* seq) {
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq);
  // @@protoc_insertion_point(field_set_allocated:NetProto.A2CAddUserResp.Seq)
}

// int64 Result = 3;
void A2CAddUserResp::clear_result() {
  result_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 A2CAddUserResp::result() const {
  // @@protoc_insertion_point(field_get:NetProto.A2CAddUserResp.Result)
  return result_;
}
void A2CAddUserResp::set_result(::google::protobuf::int64 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NetProto.A2CAddUserResp.Result)
}

// string Msg = 4;
void A2CAddUserResp::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& A2CAddUserResp::msg() const {
  // @@protoc_insertion_point(field_get:NetProto.A2CAddUserResp.Msg)
  return msg_.GetNoArena();
}
void A2CAddUserResp::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.A2CAddUserResp.Msg)
}
#if LANG_CXX11
void A2CAddUserResp::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.A2CAddUserResp.Msg)
}
#endif
void A2CAddUserResp::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.A2CAddUserResp.Msg)
}
void A2CAddUserResp::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.A2CAddUserResp.Msg)
}
::std::string* A2CAddUserResp::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.A2CAddUserResp.Msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* A2CAddUserResp::release_msg() {
  // @@protoc_insertion_point(field_release:NetProto.A2CAddUserResp.Msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void A2CAddUserResp::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NetProto.A2CAddUserResp.Msg)
}

// int64 Uid = 5;
void A2CAddUserResp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 A2CAddUserResp::uid() const {
  // @@protoc_insertion_point(field_get:NetProto.A2CAddUserResp.Uid)
  return uid_;
}
void A2CAddUserResp::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.A2CAddUserResp.Uid)
}

// string Uname = 6;
void A2CAddUserResp::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& A2CAddUserResp::uname() const {
  // @@protoc_insertion_point(field_get:NetProto.A2CAddUserResp.Uname)
  return uname_.GetNoArena();
}
void A2CAddUserResp::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.A2CAddUserResp.Uname)
}
#if LANG_CXX11
void A2CAddUserResp::set_uname(::std::string&& value) {
  
  uname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.A2CAddUserResp.Uname)
}
#endif
void A2CAddUserResp::set_uname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.A2CAddUserResp.Uname)
}
void A2CAddUserResp::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.A2CAddUserResp.Uname)
}
::std::string* A2CAddUserResp::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.A2CAddUserResp.Uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* A2CAddUserResp::release_uname() {
  // @@protoc_insertion_point(field_release:NetProto.A2CAddUserResp.Uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void A2CAddUserResp::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:NetProto.A2CAddUserResp.Uname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int A2CCheckUserResp::kHeaderFieldNumber;
const int A2CCheckUserResp::kSeqFieldNumber;
const int A2CCheckUserResp::kResultFieldNumber;
const int A2CCheckUserResp::kMsgFieldNumber;
const int A2CCheckUserResp::kUidFieldNumber;
const int A2CCheckUserResp::kUnameFieldNumber;
const int A2CCheckUserResp::kGameServerAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

A2CCheckUserResp::A2CCheckUserResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.A2CCheckUserResp)
}
A2CCheckUserResp::A2CCheckUserResp(const A2CCheckUserResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.seq().size() > 0) {
    seq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uname().size() > 0) {
    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  gameserveraddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gameserveraddr().size() > 0) {
    gameserveraddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameserveraddr_);
  }
  if (from.has_header()) {
    header_ = new ::NetProto::MsgHead(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&result_) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:NetProto.A2CCheckUserResp)
}

void A2CCheckUserResp::SharedCtor() {
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameserveraddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&header_) + sizeof(uid_));
  _cached_size_ = 0;
}

A2CCheckUserResp::~A2CCheckUserResp() {
  // @@protoc_insertion_point(destructor:NetProto.A2CCheckUserResp)
  SharedDtor();
}

void A2CCheckUserResp::SharedDtor() {
  seq_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameserveraddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void A2CCheckUserResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* A2CCheckUserResp::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const A2CCheckUserResp& A2CCheckUserResp::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

A2CCheckUserResp* A2CCheckUserResp::New(::google::protobuf::Arena* arena) const {
  A2CCheckUserResp* n = new A2CCheckUserResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void A2CCheckUserResp::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.A2CCheckUserResp)
  seq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameserveraddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&result_, 0, reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&result_) + sizeof(uid_));
}

bool A2CCheckUserResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.A2CCheckUserResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead Header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seq()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->seq().data(), this->seq().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.A2CCheckUserResp.Seq"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.A2CCheckUserResp.Msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Uid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Uname = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.A2CCheckUserResp.Uname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string GameServerAddr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameserveraddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gameserveraddr().data(), this->gameserveraddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.A2CCheckUserResp.GameServerAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.A2CCheckUserResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.A2CCheckUserResp)
  return false;
#undef DO_
}

void A2CCheckUserResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.A2CCheckUserResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead Header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string Seq = 2;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.A2CCheckUserResp.Seq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->seq(), output);
  }

  // int64 Result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->result(), output);
  }

  // string Msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.A2CCheckUserResp.Msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg(), output);
  }

  // int64 Uid = 5;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->uid(), output);
  }

  // string Uname = 6;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.A2CCheckUserResp.Uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->uname(), output);
  }

  // string GameServerAddr = 7;
  if (this->gameserveraddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gameserveraddr().data(), this->gameserveraddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.A2CCheckUserResp.GameServerAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->gameserveraddr(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.A2CCheckUserResp)
}

::google::protobuf::uint8* A2CCheckUserResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.A2CCheckUserResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead Header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string Seq = 2;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.A2CCheckUserResp.Seq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seq(), target);
  }

  // int64 Result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->result(), target);
  }

  // string Msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.A2CCheckUserResp.Msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  // int64 Uid = 5;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->uid(), target);
  }

  // string Uname = 6;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.A2CCheckUserResp.Uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->uname(), target);
  }

  // string GameServerAddr = 7;
  if (this->gameserveraddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gameserveraddr().data(), this->gameserveraddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.A2CCheckUserResp.GameServerAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->gameserveraddr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.A2CCheckUserResp)
  return target;
}

size_t A2CCheckUserResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.A2CCheckUserResp)
  size_t total_size = 0;

  // string Seq = 2;
  if (this->seq().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->seq());
  }

  // string Msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // string Uname = 6;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uname());
  }

  // string GameServerAddr = 7;
  if (this->gameserveraddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gameserveraddr());
  }

  // .NetProto.MsgHead Header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 Result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->result());
  }

  // int64 Uid = 5;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void A2CCheckUserResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.A2CCheckUserResp)
  GOOGLE_DCHECK_NE(&from, this);
  const A2CCheckUserResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const A2CCheckUserResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.A2CCheckUserResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.A2CCheckUserResp)
    MergeFrom(*source);
  }
}

void A2CCheckUserResp::MergeFrom(const A2CCheckUserResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.A2CCheckUserResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seq().size() > 0) {

    seq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.gameserveraddr().size() > 0) {

    gameserveraddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameserveraddr_);
  }
  if (from.has_header()) {
    mutable_header()->::NetProto::MsgHead::MergeFrom(from.header());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void A2CCheckUserResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.A2CCheckUserResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void A2CCheckUserResp::CopyFrom(const A2CCheckUserResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.A2CCheckUserResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A2CCheckUserResp::IsInitialized() const {
  return true;
}

void A2CCheckUserResp::Swap(A2CCheckUserResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void A2CCheckUserResp::InternalSwap(A2CCheckUserResp* other) {
  seq_.Swap(&other->seq_);
  msg_.Swap(&other->msg_);
  uname_.Swap(&other->uname_);
  gameserveraddr_.Swap(&other->gameserveraddr_);
  std::swap(header_, other->header_);
  std::swap(result_, other->result_);
  std::swap(uid_, other->uid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata A2CCheckUserResp::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// A2CCheckUserResp

// .NetProto.MsgHead Header = 1;
bool A2CCheckUserResp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void A2CCheckUserResp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::NetProto::MsgHead& A2CCheckUserResp::header() const {
  // @@protoc_insertion_point(field_get:NetProto.A2CCheckUserResp.Header)
  return header_ != NULL ? *header_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* A2CCheckUserResp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.A2CCheckUserResp.Header)
  return header_;
}
::NetProto::MsgHead* A2CCheckUserResp::release_header() {
  // @@protoc_insertion_point(field_release:NetProto.A2CCheckUserResp.Header)
  
  ::NetProto::MsgHead* temp = header_;
  header_ = NULL;
  return temp;
}
void A2CCheckUserResp::set_allocated_header(::NetProto::MsgHead* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.A2CCheckUserResp.Header)
}

// string Seq = 2;
void A2CCheckUserResp::clear_seq() {
  seq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& A2CCheckUserResp::seq() const {
  // @@protoc_insertion_point(field_get:NetProto.A2CCheckUserResp.Seq)
  return seq_.GetNoArena();
}
void A2CCheckUserResp::set_seq(const ::std::string& value) {
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.A2CCheckUserResp.Seq)
}
#if LANG_CXX11
void A2CCheckUserResp::set_seq(::std::string&& value) {
  
  seq_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.A2CCheckUserResp.Seq)
}
#endif
void A2CCheckUserResp::set_seq(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.A2CCheckUserResp.Seq)
}
void A2CCheckUserResp::set_seq(const char* value, size_t size) {
  
  seq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.A2CCheckUserResp.Seq)
}
::std::string* A2CCheckUserResp::mutable_seq() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.A2CCheckUserResp.Seq)
  return seq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* A2CCheckUserResp::release_seq() {
  // @@protoc_insertion_point(field_release:NetProto.A2CCheckUserResp.Seq)
  
  return seq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void A2CCheckUserResp::set_allocated_seq(::std::string* seq) {
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq);
  // @@protoc_insertion_point(field_set_allocated:NetProto.A2CCheckUserResp.Seq)
}

// int64 Result = 3;
void A2CCheckUserResp::clear_result() {
  result_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 A2CCheckUserResp::result() const {
  // @@protoc_insertion_point(field_get:NetProto.A2CCheckUserResp.Result)
  return result_;
}
void A2CCheckUserResp::set_result(::google::protobuf::int64 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NetProto.A2CCheckUserResp.Result)
}

// string Msg = 4;
void A2CCheckUserResp::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& A2CCheckUserResp::msg() const {
  // @@protoc_insertion_point(field_get:NetProto.A2CCheckUserResp.Msg)
  return msg_.GetNoArena();
}
void A2CCheckUserResp::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.A2CCheckUserResp.Msg)
}
#if LANG_CXX11
void A2CCheckUserResp::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.A2CCheckUserResp.Msg)
}
#endif
void A2CCheckUserResp::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.A2CCheckUserResp.Msg)
}
void A2CCheckUserResp::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.A2CCheckUserResp.Msg)
}
::std::string* A2CCheckUserResp::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.A2CCheckUserResp.Msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* A2CCheckUserResp::release_msg() {
  // @@protoc_insertion_point(field_release:NetProto.A2CCheckUserResp.Msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void A2CCheckUserResp::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NetProto.A2CCheckUserResp.Msg)
}

// int64 Uid = 5;
void A2CCheckUserResp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 A2CCheckUserResp::uid() const {
  // @@protoc_insertion_point(field_get:NetProto.A2CCheckUserResp.Uid)
  return uid_;
}
void A2CCheckUserResp::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.A2CCheckUserResp.Uid)
}

// string Uname = 6;
void A2CCheckUserResp::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& A2CCheckUserResp::uname() const {
  // @@protoc_insertion_point(field_get:NetProto.A2CCheckUserResp.Uname)
  return uname_.GetNoArena();
}
void A2CCheckUserResp::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.A2CCheckUserResp.Uname)
}
#if LANG_CXX11
void A2CCheckUserResp::set_uname(::std::string&& value) {
  
  uname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.A2CCheckUserResp.Uname)
}
#endif
void A2CCheckUserResp::set_uname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.A2CCheckUserResp.Uname)
}
void A2CCheckUserResp::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.A2CCheckUserResp.Uname)
}
::std::string* A2CCheckUserResp::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.A2CCheckUserResp.Uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* A2CCheckUserResp::release_uname() {
  // @@protoc_insertion_point(field_release:NetProto.A2CCheckUserResp.Uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void A2CCheckUserResp::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:NetProto.A2CCheckUserResp.Uname)
}

// string GameServerAddr = 7;
void A2CCheckUserResp::clear_gameserveraddr() {
  gameserveraddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& A2CCheckUserResp::gameserveraddr() const {
  // @@protoc_insertion_point(field_get:NetProto.A2CCheckUserResp.GameServerAddr)
  return gameserveraddr_.GetNoArena();
}
void A2CCheckUserResp::set_gameserveraddr(const ::std::string& value) {
  
  gameserveraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.A2CCheckUserResp.GameServerAddr)
}
#if LANG_CXX11
void A2CCheckUserResp::set_gameserveraddr(::std::string&& value) {
  
  gameserveraddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.A2CCheckUserResp.GameServerAddr)
}
#endif
void A2CCheckUserResp::set_gameserveraddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gameserveraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.A2CCheckUserResp.GameServerAddr)
}
void A2CCheckUserResp::set_gameserveraddr(const char* value, size_t size) {
  
  gameserveraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.A2CCheckUserResp.GameServerAddr)
}
::std::string* A2CCheckUserResp::mutable_gameserveraddr() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.A2CCheckUserResp.GameServerAddr)
  return gameserveraddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* A2CCheckUserResp::release_gameserveraddr() {
  // @@protoc_insertion_point(field_release:NetProto.A2CCheckUserResp.GameServerAddr)
  
  return gameserveraddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void A2CCheckUserResp::set_allocated_gameserveraddr(::std::string* gameserveraddr) {
  if (gameserveraddr != NULL) {
    
  } else {
    
  }
  gameserveraddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameserveraddr);
  // @@protoc_insertion_point(field_set_allocated:NetProto.A2CCheckUserResp.GameServerAddr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2GSHeartBeat::kClientIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2GSHeartBeat::C2GSHeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.C2GSHeartBeat)
}
C2GSHeartBeat::C2GSHeartBeat(const C2GSHeartBeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_ = from.clientid_;
  // @@protoc_insertion_point(copy_constructor:NetProto.C2GSHeartBeat)
}

void C2GSHeartBeat::SharedCtor() {
  clientid_ = 0u;
  _cached_size_ = 0;
}

C2GSHeartBeat::~C2GSHeartBeat() {
  // @@protoc_insertion_point(destructor:NetProto.C2GSHeartBeat)
  SharedDtor();
}

void C2GSHeartBeat::SharedDtor() {
}

void C2GSHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GSHeartBeat::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2GSHeartBeat& C2GSHeartBeat::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2GSHeartBeat* C2GSHeartBeat::New(::google::protobuf::Arena* arena) const {
  C2GSHeartBeat* n = new C2GSHeartBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2GSHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.C2GSHeartBeat)
  clientid_ = 0u;
}

bool C2GSHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.C2GSHeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 clientID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.C2GSHeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.C2GSHeartBeat)
  return false;
#undef DO_
}

void C2GSHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.C2GSHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 clientID = 1;
  if (this->clientid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.C2GSHeartBeat)
}

::google::protobuf::uint8* C2GSHeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.C2GSHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 clientID = 1;
  if (this->clientid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.C2GSHeartBeat)
  return target;
}

size_t C2GSHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.C2GSHeartBeat)
  size_t total_size = 0;

  // uint32 clientID = 1;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GSHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.C2GSHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const C2GSHeartBeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2GSHeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.C2GSHeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.C2GSHeartBeat)
    MergeFrom(*source);
  }
}

void C2GSHeartBeat::MergeFrom(const C2GSHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.C2GSHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientid() != 0) {
    set_clientid(from.clientid());
  }
}

void C2GSHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.C2GSHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GSHeartBeat::CopyFrom(const C2GSHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.C2GSHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GSHeartBeat::IsInitialized() const {
  return true;
}

void C2GSHeartBeat::Swap(C2GSHeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2GSHeartBeat::InternalSwap(C2GSHeartBeat* other) {
  std::swap(clientid_, other->clientid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2GSHeartBeat::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2GSHeartBeat

// uint32 clientID = 1;
void C2GSHeartBeat::clear_clientid() {
  clientid_ = 0u;
}
::google::protobuf::uint32 C2GSHeartBeat::clientid() const {
  // @@protoc_insertion_point(field_get:NetProto.C2GSHeartBeat.clientID)
  return clientid_;
}
void C2GSHeartBeat::set_clientid(::google::protobuf::uint32 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.C2GSHeartBeat.clientID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2GSLogin::kAccountIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2GSLogin::C2GSLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.C2GSLogin)
}
C2GSLogin::C2GSLogin(const C2GSLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:NetProto.C2GSLogin)
}

void C2GSLogin::SharedCtor() {
  accountid_ = 0u;
  _cached_size_ = 0;
}

C2GSLogin::~C2GSLogin() {
  // @@protoc_insertion_point(destructor:NetProto.C2GSLogin)
  SharedDtor();
}

void C2GSLogin::SharedDtor() {
}

void C2GSLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GSLogin::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2GSLogin& C2GSLogin::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2GSLogin* C2GSLogin::New(::google::protobuf::Arena* arena) const {
  C2GSLogin* n = new C2GSLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2GSLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.C2GSLogin)
  accountid_ = 0u;
}

bool C2GSLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.C2GSLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 accountID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.C2GSLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.C2GSLogin)
  return false;
#undef DO_
}

void C2GSLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.C2GSLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 accountID = 1;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.C2GSLogin)
}

::google::protobuf::uint8* C2GSLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.C2GSLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 accountID = 1;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.C2GSLogin)
  return target;
}

size_t C2GSLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.C2GSLogin)
  size_t total_size = 0;

  // uint32 accountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GSLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.C2GSLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const C2GSLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2GSLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.C2GSLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.C2GSLogin)
    MergeFrom(*source);
  }
}

void C2GSLogin::MergeFrom(const C2GSLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.C2GSLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
}

void C2GSLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.C2GSLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GSLogin::CopyFrom(const C2GSLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.C2GSLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GSLogin::IsInitialized() const {
  return true;
}

void C2GSLogin::Swap(C2GSLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2GSLogin::InternalSwap(C2GSLogin* other) {
  std::swap(accountid_, other->accountid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2GSLogin::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2GSLogin

// uint32 accountID = 1;
void C2GSLogin::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 C2GSLogin::accountid() const {
  // @@protoc_insertion_point(field_get:NetProto.C2GSLogin.accountID)
  return accountid_;
}
void C2GSLogin::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.C2GSLogin.accountID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2GSCreateRobot::kAccountIDFieldNumber;
const int C2GSCreateRobot::kRobotTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2GSCreateRobot::C2GSCreateRobot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.C2GSCreateRobot)
}
C2GSCreateRobot::C2GSCreateRobot(const C2GSCreateRobot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&robottype_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(robottype_));
  // @@protoc_insertion_point(copy_constructor:NetProto.C2GSCreateRobot)
}

void C2GSCreateRobot::SharedCtor() {
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&robottype_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(robottype_));
  _cached_size_ = 0;
}

C2GSCreateRobot::~C2GSCreateRobot() {
  // @@protoc_insertion_point(destructor:NetProto.C2GSCreateRobot)
  SharedDtor();
}

void C2GSCreateRobot::SharedDtor() {
}

void C2GSCreateRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GSCreateRobot::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2GSCreateRobot& C2GSCreateRobot::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2GSCreateRobot* C2GSCreateRobot::New(::google::protobuf::Arena* arena) const {
  C2GSCreateRobot* n = new C2GSCreateRobot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2GSCreateRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.C2GSCreateRobot)
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&robottype_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(robottype_));
}

bool C2GSCreateRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.C2GSCreateRobot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 accountID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 robotType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robottype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.C2GSCreateRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.C2GSCreateRobot)
  return false;
#undef DO_
}

void C2GSCreateRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.C2GSCreateRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 accountID = 1;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // uint32 robotType = 2;
  if (this->robottype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robottype(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.C2GSCreateRobot)
}

::google::protobuf::uint8* C2GSCreateRobot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.C2GSCreateRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 accountID = 1;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // uint32 robotType = 2;
  if (this->robottype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robottype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.C2GSCreateRobot)
  return target;
}

size_t C2GSCreateRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.C2GSCreateRobot)
  size_t total_size = 0;

  // uint32 accountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // uint32 robotType = 2;
  if (this->robottype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robottype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GSCreateRobot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.C2GSCreateRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const C2GSCreateRobot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2GSCreateRobot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.C2GSCreateRobot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.C2GSCreateRobot)
    MergeFrom(*source);
  }
}

void C2GSCreateRobot::MergeFrom(const C2GSCreateRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.C2GSCreateRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.robottype() != 0) {
    set_robottype(from.robottype());
  }
}

void C2GSCreateRobot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.C2GSCreateRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GSCreateRobot::CopyFrom(const C2GSCreateRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.C2GSCreateRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GSCreateRobot::IsInitialized() const {
  return true;
}

void C2GSCreateRobot::Swap(C2GSCreateRobot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2GSCreateRobot::InternalSwap(C2GSCreateRobot* other) {
  std::swap(accountid_, other->accountid_);
  std::swap(robottype_, other->robottype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2GSCreateRobot::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2GSCreateRobot

// uint32 accountID = 1;
void C2GSCreateRobot::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 C2GSCreateRobot::accountid() const {
  // @@protoc_insertion_point(field_get:NetProto.C2GSCreateRobot.accountID)
  return accountid_;
}
void C2GSCreateRobot::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.C2GSCreateRobot.accountID)
}

// uint32 robotType = 2;
void C2GSCreateRobot::clear_robottype() {
  robottype_ = 0u;
}
::google::protobuf::uint32 C2GSCreateRobot::robottype() const {
  // @@protoc_insertion_point(field_get:NetProto.C2GSCreateRobot.robotType)
  return robottype_;
}
void C2GSCreateRobot::set_robottype(::google::protobuf::uint32 value) {
  
  robottype_ = value;
  // @@protoc_insertion_point(field_set:NetProto.C2GSCreateRobot.robotType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2GSGetSceneID::kMsgHeadFieldNumber;
const int C2GSGetSceneID::kAccountIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2GSGetSceneID::C2GSGetSceneID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.C2GSGetSceneID)
}
C2GSGetSceneID::C2GSGetSceneID(const C2GSGetSceneID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msghead()) {
    msghead_ = new ::NetProto::MsgHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:NetProto.C2GSGetSceneID)
}

void C2GSGetSceneID::SharedCtor() {
  ::memset(&msghead_, 0, reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&msghead_) + sizeof(accountid_));
  _cached_size_ = 0;
}

C2GSGetSceneID::~C2GSGetSceneID() {
  // @@protoc_insertion_point(destructor:NetProto.C2GSGetSceneID)
  SharedDtor();
}

void C2GSGetSceneID::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msghead_;
  }
}

void C2GSGetSceneID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GSGetSceneID::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2GSGetSceneID& C2GSGetSceneID::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2GSGetSceneID* C2GSGetSceneID::New(::google::protobuf::Arena* arena) const {
  C2GSGetSceneID* n = new C2GSGetSceneID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2GSGetSceneID::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.C2GSGetSceneID)
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) {
    delete msghead_;
  }
  msghead_ = NULL;
  accountid_ = 0u;
}

bool C2GSGetSceneID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.C2GSGetSceneID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead msgHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 accountID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.C2GSGetSceneID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.C2GSGetSceneID)
  return false;
#undef DO_
}

void C2GSGetSceneID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.C2GSGetSceneID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.C2GSGetSceneID)
}

::google::protobuf::uint8* C2GSGetSceneID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.C2GSGetSceneID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msghead_, deterministic, target);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.C2GSGetSceneID)
  return target;
}

size_t C2GSGetSceneID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.C2GSGetSceneID)
  size_t total_size = 0;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GSGetSceneID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.C2GSGetSceneID)
  GOOGLE_DCHECK_NE(&from, this);
  const C2GSGetSceneID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2GSGetSceneID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.C2GSGetSceneID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.C2GSGetSceneID)
    MergeFrom(*source);
  }
}

void C2GSGetSceneID::MergeFrom(const C2GSGetSceneID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.C2GSGetSceneID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msghead()) {
    mutable_msghead()->::NetProto::MsgHead::MergeFrom(from.msghead());
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
}

void C2GSGetSceneID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.C2GSGetSceneID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GSGetSceneID::CopyFrom(const C2GSGetSceneID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.C2GSGetSceneID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GSGetSceneID::IsInitialized() const {
  return true;
}

void C2GSGetSceneID::Swap(C2GSGetSceneID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2GSGetSceneID::InternalSwap(C2GSGetSceneID* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(accountid_, other->accountid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2GSGetSceneID::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2GSGetSceneID

// .NetProto.MsgHead msgHead = 1;
bool C2GSGetSceneID::has_msghead() const {
  return this != internal_default_instance() && msghead_ != NULL;
}
void C2GSGetSceneID::clear_msghead() {
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) delete msghead_;
  msghead_ = NULL;
}
const ::NetProto::MsgHead& C2GSGetSceneID::msghead() const {
  // @@protoc_insertion_point(field_get:NetProto.C2GSGetSceneID.msgHead)
  return msghead_ != NULL ? *msghead_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* C2GSGetSceneID::mutable_msghead() {
  
  if (msghead_ == NULL) {
    msghead_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.C2GSGetSceneID.msgHead)
  return msghead_;
}
::NetProto::MsgHead* C2GSGetSceneID::release_msghead() {
  // @@protoc_insertion_point(field_release:NetProto.C2GSGetSceneID.msgHead)
  
  ::NetProto::MsgHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void C2GSGetSceneID::set_allocated_msghead(::NetProto::MsgHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.C2GSGetSceneID.msgHead)
}

// uint32 accountID = 2;
void C2GSGetSceneID::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 C2GSGetSceneID::accountid() const {
  // @@protoc_insertion_point(field_get:NetProto.C2GSGetSceneID.accountID)
  return accountid_;
}
void C2GSGetSceneID::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.C2GSGetSceneID.accountID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2GSCreateScene::kMsgHeadFieldNumber;
const int C2GSCreateScene::kAccountIDFieldNumber;
const int C2GSCreateScene::kSceneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2GSCreateScene::C2GSCreateScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.C2GSCreateScene)
}
C2GSCreateScene::C2GSCreateScene(const C2GSCreateScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msghead()) {
    msghead_ = new ::NetProto::MsgHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&scenetype_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(scenetype_));
  // @@protoc_insertion_point(copy_constructor:NetProto.C2GSCreateScene)
}

void C2GSCreateScene::SharedCtor() {
  ::memset(&msghead_, 0, reinterpret_cast<char*>(&scenetype_) -
    reinterpret_cast<char*>(&msghead_) + sizeof(scenetype_));
  _cached_size_ = 0;
}

C2GSCreateScene::~C2GSCreateScene() {
  // @@protoc_insertion_point(destructor:NetProto.C2GSCreateScene)
  SharedDtor();
}

void C2GSCreateScene::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msghead_;
  }
}

void C2GSCreateScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GSCreateScene::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2GSCreateScene& C2GSCreateScene::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2GSCreateScene* C2GSCreateScene::New(::google::protobuf::Arena* arena) const {
  C2GSCreateScene* n = new C2GSCreateScene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2GSCreateScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.C2GSCreateScene)
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) {
    delete msghead_;
  }
  msghead_ = NULL;
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&scenetype_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(scenetype_));
}

bool C2GSCreateScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.C2GSCreateScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead msgHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 accountID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sceneType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.C2GSCreateScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.C2GSCreateScene)
  return false;
#undef DO_
}

void C2GSCreateScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.C2GSCreateScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // uint32 sceneType = 3;
  if (this->scenetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scenetype(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.C2GSCreateScene)
}

::google::protobuf::uint8* C2GSCreateScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.C2GSCreateScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msghead_, deterministic, target);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // uint32 sceneType = 3;
  if (this->scenetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scenetype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.C2GSCreateScene)
  return target;
}

size_t C2GSCreateScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.C2GSCreateScene)
  size_t total_size = 0;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // uint32 sceneType = 3;
  if (this->scenetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scenetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GSCreateScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.C2GSCreateScene)
  GOOGLE_DCHECK_NE(&from, this);
  const C2GSCreateScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2GSCreateScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.C2GSCreateScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.C2GSCreateScene)
    MergeFrom(*source);
  }
}

void C2GSCreateScene::MergeFrom(const C2GSCreateScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.C2GSCreateScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msghead()) {
    mutable_msghead()->::NetProto::MsgHead::MergeFrom(from.msghead());
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.scenetype() != 0) {
    set_scenetype(from.scenetype());
  }
}

void C2GSCreateScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.C2GSCreateScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GSCreateScene::CopyFrom(const C2GSCreateScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.C2GSCreateScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GSCreateScene::IsInitialized() const {
  return true;
}

void C2GSCreateScene::Swap(C2GSCreateScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2GSCreateScene::InternalSwap(C2GSCreateScene* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(accountid_, other->accountid_);
  std::swap(scenetype_, other->scenetype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2GSCreateScene::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2GSCreateScene

// .NetProto.MsgHead msgHead = 1;
bool C2GSCreateScene::has_msghead() const {
  return this != internal_default_instance() && msghead_ != NULL;
}
void C2GSCreateScene::clear_msghead() {
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) delete msghead_;
  msghead_ = NULL;
}
const ::NetProto::MsgHead& C2GSCreateScene::msghead() const {
  // @@protoc_insertion_point(field_get:NetProto.C2GSCreateScene.msgHead)
  return msghead_ != NULL ? *msghead_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* C2GSCreateScene::mutable_msghead() {
  
  if (msghead_ == NULL) {
    msghead_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.C2GSCreateScene.msgHead)
  return msghead_;
}
::NetProto::MsgHead* C2GSCreateScene::release_msghead() {
  // @@protoc_insertion_point(field_release:NetProto.C2GSCreateScene.msgHead)
  
  ::NetProto::MsgHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void C2GSCreateScene::set_allocated_msghead(::NetProto::MsgHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.C2GSCreateScene.msgHead)
}

// uint32 accountID = 2;
void C2GSCreateScene::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 C2GSCreateScene::accountid() const {
  // @@protoc_insertion_point(field_get:NetProto.C2GSCreateScene.accountID)
  return accountid_;
}
void C2GSCreateScene::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.C2GSCreateScene.accountID)
}

// uint32 sceneType = 3;
void C2GSCreateScene::clear_scenetype() {
  scenetype_ = 0u;
}
::google::protobuf::uint32 C2GSCreateScene::scenetype() const {
  // @@protoc_insertion_point(field_get:NetProto.C2GSCreateScene.sceneType)
  return scenetype_;
}
void C2GSCreateScene::set_scenetype(::google::protobuf::uint32 value) {
  
  scenetype_ = value;
  // @@protoc_insertion_point(field_set:NetProto.C2GSCreateScene.sceneType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2GSEnterScene::kMsgHeadFieldNumber;
const int C2GSEnterScene::kAccountIDFieldNumber;
const int C2GSEnterScene::kSceneTypeFieldNumber;
const int C2GSEnterScene::kSceneIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2GSEnterScene::C2GSEnterScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.C2GSEnterScene)
}
C2GSEnterScene::C2GSEnterScene(const C2GSEnterScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sceneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sceneid().size() > 0) {
    sceneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  if (from.has_msghead()) {
    msghead_ = new ::NetProto::MsgHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&scenetype_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(scenetype_));
  // @@protoc_insertion_point(copy_constructor:NetProto.C2GSEnterScene)
}

void C2GSEnterScene::SharedCtor() {
  sceneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msghead_, 0, reinterpret_cast<char*>(&scenetype_) -
    reinterpret_cast<char*>(&msghead_) + sizeof(scenetype_));
  _cached_size_ = 0;
}

C2GSEnterScene::~C2GSEnterScene() {
  // @@protoc_insertion_point(destructor:NetProto.C2GSEnterScene)
  SharedDtor();
}

void C2GSEnterScene::SharedDtor() {
  sceneid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete msghead_;
  }
}

void C2GSEnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GSEnterScene::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2GSEnterScene& C2GSEnterScene::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2GSEnterScene* C2GSEnterScene::New(::google::protobuf::Arena* arena) const {
  C2GSEnterScene* n = new C2GSEnterScene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2GSEnterScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.C2GSEnterScene)
  sceneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) {
    delete msghead_;
  }
  msghead_ = NULL;
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&scenetype_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(scenetype_));
}

bool C2GSEnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.C2GSEnterScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead msgHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 accountID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sceneType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sceneID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sceneid().data(), this->sceneid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.C2GSEnterScene.sceneID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.C2GSEnterScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.C2GSEnterScene)
  return false;
#undef DO_
}

void C2GSEnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.C2GSEnterScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // uint32 sceneType = 3;
  if (this->scenetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scenetype(), output);
  }

  // string sceneID = 4;
  if (this->sceneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2GSEnterScene.sceneID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sceneid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.C2GSEnterScene)
}

::google::protobuf::uint8* C2GSEnterScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.C2GSEnterScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msghead_, deterministic, target);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // uint32 sceneType = 3;
  if (this->scenetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scenetype(), target);
  }

  // string sceneID = 4;
  if (this->sceneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.C2GSEnterScene.sceneID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sceneid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.C2GSEnterScene)
  return target;
}

size_t C2GSEnterScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.C2GSEnterScene)
  size_t total_size = 0;

  // string sceneID = 4;
  if (this->sceneid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sceneid());
  }

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // uint32 sceneType = 3;
  if (this->scenetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scenetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GSEnterScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.C2GSEnterScene)
  GOOGLE_DCHECK_NE(&from, this);
  const C2GSEnterScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2GSEnterScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.C2GSEnterScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.C2GSEnterScene)
    MergeFrom(*source);
  }
}

void C2GSEnterScene::MergeFrom(const C2GSEnterScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.C2GSEnterScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sceneid().size() > 0) {

    sceneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  if (from.has_msghead()) {
    mutable_msghead()->::NetProto::MsgHead::MergeFrom(from.msghead());
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.scenetype() != 0) {
    set_scenetype(from.scenetype());
  }
}

void C2GSEnterScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.C2GSEnterScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GSEnterScene::CopyFrom(const C2GSEnterScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.C2GSEnterScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GSEnterScene::IsInitialized() const {
  return true;
}

void C2GSEnterScene::Swap(C2GSEnterScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2GSEnterScene::InternalSwap(C2GSEnterScene* other) {
  sceneid_.Swap(&other->sceneid_);
  std::swap(msghead_, other->msghead_);
  std::swap(accountid_, other->accountid_);
  std::swap(scenetype_, other->scenetype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2GSEnterScene::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2GSEnterScene

// .NetProto.MsgHead msgHead = 1;
bool C2GSEnterScene::has_msghead() const {
  return this != internal_default_instance() && msghead_ != NULL;
}
void C2GSEnterScene::clear_msghead() {
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) delete msghead_;
  msghead_ = NULL;
}
const ::NetProto::MsgHead& C2GSEnterScene::msghead() const {
  // @@protoc_insertion_point(field_get:NetProto.C2GSEnterScene.msgHead)
  return msghead_ != NULL ? *msghead_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* C2GSEnterScene::mutable_msghead() {
  
  if (msghead_ == NULL) {
    msghead_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.C2GSEnterScene.msgHead)
  return msghead_;
}
::NetProto::MsgHead* C2GSEnterScene::release_msghead() {
  // @@protoc_insertion_point(field_release:NetProto.C2GSEnterScene.msgHead)
  
  ::NetProto::MsgHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void C2GSEnterScene::set_allocated_msghead(::NetProto::MsgHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.C2GSEnterScene.msgHead)
}

// uint32 accountID = 2;
void C2GSEnterScene::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 C2GSEnterScene::accountid() const {
  // @@protoc_insertion_point(field_get:NetProto.C2GSEnterScene.accountID)
  return accountid_;
}
void C2GSEnterScene::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.C2GSEnterScene.accountID)
}

// uint32 sceneType = 3;
void C2GSEnterScene::clear_scenetype() {
  scenetype_ = 0u;
}
::google::protobuf::uint32 C2GSEnterScene::scenetype() const {
  // @@protoc_insertion_point(field_get:NetProto.C2GSEnterScene.sceneType)
  return scenetype_;
}
void C2GSEnterScene::set_scenetype(::google::protobuf::uint32 value) {
  
  scenetype_ = value;
  // @@protoc_insertion_point(field_set:NetProto.C2GSEnterScene.sceneType)
}

// string sceneID = 4;
void C2GSEnterScene::clear_sceneid() {
  sceneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& C2GSEnterScene::sceneid() const {
  // @@protoc_insertion_point(field_get:NetProto.C2GSEnterScene.sceneID)
  return sceneid_.GetNoArena();
}
void C2GSEnterScene::set_sceneid(const ::std::string& value) {
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.C2GSEnterScene.sceneID)
}
#if LANG_CXX11
void C2GSEnterScene::set_sceneid(::std::string&& value) {
  
  sceneid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.C2GSEnterScene.sceneID)
}
#endif
void C2GSEnterScene::set_sceneid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.C2GSEnterScene.sceneID)
}
void C2GSEnterScene::set_sceneid(const char* value, size_t size) {
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.C2GSEnterScene.sceneID)
}
::std::string* C2GSEnterScene::mutable_sceneid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.C2GSEnterScene.sceneID)
  return sceneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* C2GSEnterScene::release_sceneid() {
  // @@protoc_insertion_point(field_release:NetProto.C2GSEnterScene.sceneID)
  
  return sceneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void C2GSEnterScene::set_allocated_sceneid(::std::string* sceneid) {
  if (sceneid != NULL) {
    
  } else {
    
  }
  sceneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sceneid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.C2GSEnterScene.sceneID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GS2CLogin::kIsSuccessFieldNumber;
const int GS2CLogin::kRetFieldNumber;
const int GS2CLogin::kRobotFlagFieldNumber;
const int GS2CLogin::kRobotListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GS2CLogin::GS2CLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.GS2CLogin)
}
GS2CLogin::GS2CLogin(const GS2CLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      robotlist_(from.robotlist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ret().size() > 0) {
    ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_);
  }
  ::memcpy(&issuccess_, &from.issuccess_,
    reinterpret_cast<char*>(&robotflag_) -
    reinterpret_cast<char*>(&issuccess_) + sizeof(robotflag_));
  // @@protoc_insertion_point(copy_constructor:NetProto.GS2CLogin)
}

void GS2CLogin::SharedCtor() {
  ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&issuccess_, 0, reinterpret_cast<char*>(&robotflag_) -
    reinterpret_cast<char*>(&issuccess_) + sizeof(robotflag_));
  _cached_size_ = 0;
}

GS2CLogin::~GS2CLogin() {
  // @@protoc_insertion_point(destructor:NetProto.GS2CLogin)
  SharedDtor();
}

void GS2CLogin::SharedDtor() {
  ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GS2CLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2CLogin::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GS2CLogin& GS2CLogin::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

GS2CLogin* GS2CLogin::New(::google::protobuf::Arena* arena) const {
  GS2CLogin* n = new GS2CLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GS2CLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.GS2CLogin)
  robotlist_.Clear();
  ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&issuccess_, 0, reinterpret_cast<char*>(&robotflag_) -
    reinterpret_cast<char*>(&issuccess_) + sizeof(robotflag_));
}

bool GS2CLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.GS2CLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isSuccess = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ret().data(), this->ret().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.GS2CLogin.ret"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 robotFlag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robotflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.CreateRobotInfo robotList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robotlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.GS2CLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.GS2CLogin)
  return false;
#undef DO_
}

void GS2CLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.GS2CLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->issuccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // string ret = 2;
  if (this->ret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CLogin.ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ret(), output);
  }

  // uint32 robotFlag = 3;
  if (this->robotflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->robotflag(), output);
  }

  // repeated .NetProto.CreateRobotInfo robotList = 4;
  for (unsigned int i = 0, n = this->robotlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->robotlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.GS2CLogin)
}

::google::protobuf::uint8* GS2CLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.GS2CLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->issuccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // string ret = 2;
  if (this->ret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CLogin.ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ret(), target);
  }

  // uint32 robotFlag = 3;
  if (this->robotflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->robotflag(), target);
  }

  // repeated .NetProto.CreateRobotInfo robotList = 4;
  for (unsigned int i = 0, n = this->robotlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->robotlist(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.GS2CLogin)
  return target;
}

size_t GS2CLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.GS2CLogin)
  size_t total_size = 0;

  // repeated .NetProto.CreateRobotInfo robotList = 4;
  {
    unsigned int count = this->robotlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robotlist(i));
    }
  }

  // string ret = 2;
  if (this->ret().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ret());
  }

  // bool isSuccess = 1;
  if (this->issuccess() != 0) {
    total_size += 1 + 1;
  }

  // uint32 robotFlag = 3;
  if (this->robotflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robotflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2CLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.GS2CLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const GS2CLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GS2CLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.GS2CLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.GS2CLogin)
    MergeFrom(*source);
  }
}

void GS2CLogin::MergeFrom(const GS2CLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.GS2CLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robotlist_.MergeFrom(from.robotlist_);
  if (from.ret().size() > 0) {

    ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_);
  }
  if (from.issuccess() != 0) {
    set_issuccess(from.issuccess());
  }
  if (from.robotflag() != 0) {
    set_robotflag(from.robotflag());
  }
}

void GS2CLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.GS2CLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2CLogin::CopyFrom(const GS2CLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.GS2CLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2CLogin::IsInitialized() const {
  return true;
}

void GS2CLogin::Swap(GS2CLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GS2CLogin::InternalSwap(GS2CLogin* other) {
  robotlist_.InternalSwap(&other->robotlist_);
  ret_.Swap(&other->ret_);
  std::swap(issuccess_, other->issuccess_);
  std::swap(robotflag_, other->robotflag_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GS2CLogin::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GS2CLogin

// bool isSuccess = 1;
void GS2CLogin::clear_issuccess() {
  issuccess_ = false;
}
bool GS2CLogin::issuccess() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CLogin.isSuccess)
  return issuccess_;
}
void GS2CLogin::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2CLogin.isSuccess)
}

// string ret = 2;
void GS2CLogin::clear_ret() {
  ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GS2CLogin::ret() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CLogin.ret)
  return ret_.GetNoArena();
}
void GS2CLogin::set_ret(const ::std::string& value) {
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.GS2CLogin.ret)
}
#if LANG_CXX11
void GS2CLogin::set_ret(::std::string&& value) {
  
  ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.GS2CLogin.ret)
}
#endif
void GS2CLogin::set_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.GS2CLogin.ret)
}
void GS2CLogin::set_ret(const char* value, size_t size) {
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.GS2CLogin.ret)
}
::std::string* GS2CLogin::mutable_ret() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CLogin.ret)
  return ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GS2CLogin::release_ret() {
  // @@protoc_insertion_point(field_release:NetProto.GS2CLogin.ret)
  
  return ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GS2CLogin::set_allocated_ret(::std::string* ret) {
  if (ret != NULL) {
    
  } else {
    
  }
  ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret);
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2CLogin.ret)
}

// uint32 robotFlag = 3;
void GS2CLogin::clear_robotflag() {
  robotflag_ = 0u;
}
::google::protobuf::uint32 GS2CLogin::robotflag() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CLogin.robotFlag)
  return robotflag_;
}
void GS2CLogin::set_robotflag(::google::protobuf::uint32 value) {
  
  robotflag_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2CLogin.robotFlag)
}

// repeated .NetProto.CreateRobotInfo robotList = 4;
int GS2CLogin::robotlist_size() const {
  return robotlist_.size();
}
void GS2CLogin::clear_robotlist() {
  robotlist_.Clear();
}
const ::NetProto::CreateRobotInfo& GS2CLogin::robotlist(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CLogin.robotList)
  return robotlist_.Get(index);
}
::NetProto::CreateRobotInfo* GS2CLogin::mutable_robotlist(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CLogin.robotList)
  return robotlist_.Mutable(index);
}
::NetProto::CreateRobotInfo* GS2CLogin::add_robotlist() {
  // @@protoc_insertion_point(field_add:NetProto.GS2CLogin.robotList)
  return robotlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::CreateRobotInfo >*
GS2CLogin::mutable_robotlist() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.GS2CLogin.robotList)
  return &robotlist_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::CreateRobotInfo >&
GS2CLogin::robotlist() const {
  // @@protoc_insertion_point(field_list:NetProto.GS2CLogin.robotList)
  return robotlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GS2CCreateRobot::kIsSuccessFieldNumber;
const int GS2CCreateRobot::kRetFieldNumber;
const int GS2CCreateRobot::kRobotInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GS2CCreateRobot::GS2CCreateRobot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.GS2CCreateRobot)
}
GS2CCreateRobot::GS2CCreateRobot(const GS2CCreateRobot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ret().size() > 0) {
    ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_);
  }
  if (from.has_robotinfo()) {
    robotinfo_ = new ::NetProto::RobotInfo(*from.robotinfo_);
  } else {
    robotinfo_ = NULL;
  }
  issuccess_ = from.issuccess_;
  // @@protoc_insertion_point(copy_constructor:NetProto.GS2CCreateRobot)
}

void GS2CCreateRobot::SharedCtor() {
  ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&robotinfo_, 0, reinterpret_cast<char*>(&issuccess_) -
    reinterpret_cast<char*>(&robotinfo_) + sizeof(issuccess_));
  _cached_size_ = 0;
}

GS2CCreateRobot::~GS2CCreateRobot() {
  // @@protoc_insertion_point(destructor:NetProto.GS2CCreateRobot)
  SharedDtor();
}

void GS2CCreateRobot::SharedDtor() {
  ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete robotinfo_;
  }
}

void GS2CCreateRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2CCreateRobot::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GS2CCreateRobot& GS2CCreateRobot::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

GS2CCreateRobot* GS2CCreateRobot::New(::google::protobuf::Arena* arena) const {
  GS2CCreateRobot* n = new GS2CCreateRobot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GS2CCreateRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.GS2CCreateRobot)
  ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && robotinfo_ != NULL) {
    delete robotinfo_;
  }
  robotinfo_ = NULL;
  issuccess_ = false;
}

bool GS2CCreateRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.GS2CCreateRobot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isSuccess = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ret().data(), this->ret().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.GS2CCreateRobot.ret"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.RobotInfo robotInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robotinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.GS2CCreateRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.GS2CCreateRobot)
  return false;
#undef DO_
}

void GS2CCreateRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.GS2CCreateRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->issuccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // string ret = 2;
  if (this->ret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CCreateRobot.ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ret(), output);
  }

  // .NetProto.RobotInfo robotInfo = 3;
  if (this->has_robotinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->robotinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.GS2CCreateRobot)
}

::google::protobuf::uint8* GS2CCreateRobot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.GS2CCreateRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->issuccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // string ret = 2;
  if (this->ret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CCreateRobot.ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ret(), target);
  }

  // .NetProto.RobotInfo robotInfo = 3;
  if (this->has_robotinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->robotinfo_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.GS2CCreateRobot)
  return target;
}

size_t GS2CCreateRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.GS2CCreateRobot)
  size_t total_size = 0;

  // string ret = 2;
  if (this->ret().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ret());
  }

  // .NetProto.RobotInfo robotInfo = 3;
  if (this->has_robotinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->robotinfo_);
  }

  // bool isSuccess = 1;
  if (this->issuccess() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2CCreateRobot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.GS2CCreateRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const GS2CCreateRobot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GS2CCreateRobot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.GS2CCreateRobot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.GS2CCreateRobot)
    MergeFrom(*source);
  }
}

void GS2CCreateRobot::MergeFrom(const GS2CCreateRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.GS2CCreateRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret().size() > 0) {

    ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_);
  }
  if (from.has_robotinfo()) {
    mutable_robotinfo()->::NetProto::RobotInfo::MergeFrom(from.robotinfo());
  }
  if (from.issuccess() != 0) {
    set_issuccess(from.issuccess());
  }
}

void GS2CCreateRobot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.GS2CCreateRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2CCreateRobot::CopyFrom(const GS2CCreateRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.GS2CCreateRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2CCreateRobot::IsInitialized() const {
  return true;
}

void GS2CCreateRobot::Swap(GS2CCreateRobot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GS2CCreateRobot::InternalSwap(GS2CCreateRobot* other) {
  ret_.Swap(&other->ret_);
  std::swap(robotinfo_, other->robotinfo_);
  std::swap(issuccess_, other->issuccess_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GS2CCreateRobot::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GS2CCreateRobot

// bool isSuccess = 1;
void GS2CCreateRobot::clear_issuccess() {
  issuccess_ = false;
}
bool GS2CCreateRobot::issuccess() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CCreateRobot.isSuccess)
  return issuccess_;
}
void GS2CCreateRobot::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2CCreateRobot.isSuccess)
}

// string ret = 2;
void GS2CCreateRobot::clear_ret() {
  ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GS2CCreateRobot::ret() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CCreateRobot.ret)
  return ret_.GetNoArena();
}
void GS2CCreateRobot::set_ret(const ::std::string& value) {
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.GS2CCreateRobot.ret)
}
#if LANG_CXX11
void GS2CCreateRobot::set_ret(::std::string&& value) {
  
  ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.GS2CCreateRobot.ret)
}
#endif
void GS2CCreateRobot::set_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.GS2CCreateRobot.ret)
}
void GS2CCreateRobot::set_ret(const char* value, size_t size) {
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.GS2CCreateRobot.ret)
}
::std::string* GS2CCreateRobot::mutable_ret() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CCreateRobot.ret)
  return ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GS2CCreateRobot::release_ret() {
  // @@protoc_insertion_point(field_release:NetProto.GS2CCreateRobot.ret)
  
  return ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GS2CCreateRobot::set_allocated_ret(::std::string* ret) {
  if (ret != NULL) {
    
  } else {
    
  }
  ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret);
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2CCreateRobot.ret)
}

// .NetProto.RobotInfo robotInfo = 3;
bool GS2CCreateRobot::has_robotinfo() const {
  return this != internal_default_instance() && robotinfo_ != NULL;
}
void GS2CCreateRobot::clear_robotinfo() {
  if (GetArenaNoVirtual() == NULL && robotinfo_ != NULL) delete robotinfo_;
  robotinfo_ = NULL;
}
const ::NetProto::RobotInfo& GS2CCreateRobot::robotinfo() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CCreateRobot.robotInfo)
  return robotinfo_ != NULL ? *robotinfo_
                         : *::NetProto::RobotInfo::internal_default_instance();
}
::NetProto::RobotInfo* GS2CCreateRobot::mutable_robotinfo() {
  
  if (robotinfo_ == NULL) {
    robotinfo_ = new ::NetProto::RobotInfo;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CCreateRobot.robotInfo)
  return robotinfo_;
}
::NetProto::RobotInfo* GS2CCreateRobot::release_robotinfo() {
  // @@protoc_insertion_point(field_release:NetProto.GS2CCreateRobot.robotInfo)
  
  ::NetProto::RobotInfo* temp = robotinfo_;
  robotinfo_ = NULL;
  return temp;
}
void GS2CCreateRobot::set_allocated_robotinfo(::NetProto::RobotInfo* robotinfo) {
  delete robotinfo_;
  robotinfo_ = robotinfo;
  if (robotinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2CCreateRobot.robotInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GS2CGetSceneID::kMsgHeadFieldNumber;
const int GS2CGetSceneID::kRetFieldNumber;
const int GS2CGetSceneID::kSceneIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GS2CGetSceneID::GS2CGetSceneID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.GS2CGetSceneID)
}
GS2CGetSceneID::GS2CGetSceneID(const GS2CGetSceneID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ret().size() > 0) {
    ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_);
  }
  sceneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sceneid().size() > 0) {
    sceneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  if (from.has_msghead()) {
    msghead_ = new ::NetProto::MsgHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NetProto.GS2CGetSceneID)
}

void GS2CGetSceneID::SharedCtor() {
  ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sceneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  _cached_size_ = 0;
}

GS2CGetSceneID::~GS2CGetSceneID() {
  // @@protoc_insertion_point(destructor:NetProto.GS2CGetSceneID)
  SharedDtor();
}

void GS2CGetSceneID::SharedDtor() {
  ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sceneid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete msghead_;
  }
}

void GS2CGetSceneID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2CGetSceneID::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GS2CGetSceneID& GS2CGetSceneID::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

GS2CGetSceneID* GS2CGetSceneID::New(::google::protobuf::Arena* arena) const {
  GS2CGetSceneID* n = new GS2CGetSceneID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GS2CGetSceneID::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.GS2CGetSceneID)
  ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sceneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) {
    delete msghead_;
  }
  msghead_ = NULL;
}

bool GS2CGetSceneID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.GS2CGetSceneID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead msgHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ret().data(), this->ret().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.GS2CGetSceneID.ret"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sceneID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sceneid().data(), this->sceneid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.GS2CGetSceneID.sceneID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.GS2CGetSceneID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.GS2CGetSceneID)
  return false;
#undef DO_
}

void GS2CGetSceneID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.GS2CGetSceneID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // string ret = 2;
  if (this->ret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CGetSceneID.ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ret(), output);
  }

  // string sceneID = 3;
  if (this->sceneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CGetSceneID.sceneID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sceneid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.GS2CGetSceneID)
}

::google::protobuf::uint8* GS2CGetSceneID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.GS2CGetSceneID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msghead_, deterministic, target);
  }

  // string ret = 2;
  if (this->ret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CGetSceneID.ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ret(), target);
  }

  // string sceneID = 3;
  if (this->sceneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CGetSceneID.sceneID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sceneid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.GS2CGetSceneID)
  return target;
}

size_t GS2CGetSceneID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.GS2CGetSceneID)
  size_t total_size = 0;

  // string ret = 2;
  if (this->ret().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ret());
  }

  // string sceneID = 3;
  if (this->sceneid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sceneid());
  }

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2CGetSceneID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.GS2CGetSceneID)
  GOOGLE_DCHECK_NE(&from, this);
  const GS2CGetSceneID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GS2CGetSceneID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.GS2CGetSceneID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.GS2CGetSceneID)
    MergeFrom(*source);
  }
}

void GS2CGetSceneID::MergeFrom(const GS2CGetSceneID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.GS2CGetSceneID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret().size() > 0) {

    ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_);
  }
  if (from.sceneid().size() > 0) {

    sceneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  if (from.has_msghead()) {
    mutable_msghead()->::NetProto::MsgHead::MergeFrom(from.msghead());
  }
}

void GS2CGetSceneID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.GS2CGetSceneID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2CGetSceneID::CopyFrom(const GS2CGetSceneID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.GS2CGetSceneID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2CGetSceneID::IsInitialized() const {
  return true;
}

void GS2CGetSceneID::Swap(GS2CGetSceneID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GS2CGetSceneID::InternalSwap(GS2CGetSceneID* other) {
  ret_.Swap(&other->ret_);
  sceneid_.Swap(&other->sceneid_);
  std::swap(msghead_, other->msghead_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GS2CGetSceneID::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GS2CGetSceneID

// .NetProto.MsgHead msgHead = 1;
bool GS2CGetSceneID::has_msghead() const {
  return this != internal_default_instance() && msghead_ != NULL;
}
void GS2CGetSceneID::clear_msghead() {
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) delete msghead_;
  msghead_ = NULL;
}
const ::NetProto::MsgHead& GS2CGetSceneID::msghead() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CGetSceneID.msgHead)
  return msghead_ != NULL ? *msghead_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* GS2CGetSceneID::mutable_msghead() {
  
  if (msghead_ == NULL) {
    msghead_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CGetSceneID.msgHead)
  return msghead_;
}
::NetProto::MsgHead* GS2CGetSceneID::release_msghead() {
  // @@protoc_insertion_point(field_release:NetProto.GS2CGetSceneID.msgHead)
  
  ::NetProto::MsgHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void GS2CGetSceneID::set_allocated_msghead(::NetProto::MsgHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2CGetSceneID.msgHead)
}

// string ret = 2;
void GS2CGetSceneID::clear_ret() {
  ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GS2CGetSceneID::ret() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CGetSceneID.ret)
  return ret_.GetNoArena();
}
void GS2CGetSceneID::set_ret(const ::std::string& value) {
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.GS2CGetSceneID.ret)
}
#if LANG_CXX11
void GS2CGetSceneID::set_ret(::std::string&& value) {
  
  ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.GS2CGetSceneID.ret)
}
#endif
void GS2CGetSceneID::set_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.GS2CGetSceneID.ret)
}
void GS2CGetSceneID::set_ret(const char* value, size_t size) {
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.GS2CGetSceneID.ret)
}
::std::string* GS2CGetSceneID::mutable_ret() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CGetSceneID.ret)
  return ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GS2CGetSceneID::release_ret() {
  // @@protoc_insertion_point(field_release:NetProto.GS2CGetSceneID.ret)
  
  return ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GS2CGetSceneID::set_allocated_ret(::std::string* ret) {
  if (ret != NULL) {
    
  } else {
    
  }
  ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret);
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2CGetSceneID.ret)
}

// string sceneID = 3;
void GS2CGetSceneID::clear_sceneid() {
  sceneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GS2CGetSceneID::sceneid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CGetSceneID.sceneID)
  return sceneid_.GetNoArena();
}
void GS2CGetSceneID::set_sceneid(const ::std::string& value) {
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.GS2CGetSceneID.sceneID)
}
#if LANG_CXX11
void GS2CGetSceneID::set_sceneid(::std::string&& value) {
  
  sceneid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.GS2CGetSceneID.sceneID)
}
#endif
void GS2CGetSceneID::set_sceneid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.GS2CGetSceneID.sceneID)
}
void GS2CGetSceneID::set_sceneid(const char* value, size_t size) {
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.GS2CGetSceneID.sceneID)
}
::std::string* GS2CGetSceneID::mutable_sceneid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CGetSceneID.sceneID)
  return sceneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GS2CGetSceneID::release_sceneid() {
  // @@protoc_insertion_point(field_release:NetProto.GS2CGetSceneID.sceneID)
  
  return sceneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GS2CGetSceneID::set_allocated_sceneid(::std::string* sceneid) {
  if (sceneid != NULL) {
    
  } else {
    
  }
  sceneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sceneid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2CGetSceneID.sceneID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GS2CCreateScene_ObjInfo::kUuidFieldNumber;
const int GS2CCreateScene_ObjInfo::kClassIdFieldNumber;
const int GS2CCreateScene_ObjInfo::kItemIdFieldNumber;
const int GS2CCreateScene_ObjInfo::kPosRotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GS2CCreateScene_ObjInfo::GS2CCreateScene_ObjInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.GS2CCreateScene.ObjInfo)
}
GS2CCreateScene_ObjInfo::GS2CCreateScene_ObjInfo(const GS2CCreateScene_ObjInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_pos_rot()) {
    pos_rot_ = new ::NetProto::PosRot(*from.pos_rot_);
  } else {
    pos_rot_ = NULL;
  }
  ::memcpy(&class_id_, &from.class_id_,
    reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&class_id_) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:NetProto.GS2CCreateScene.ObjInfo)
}

void GS2CCreateScene_ObjInfo::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_rot_, 0, reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&pos_rot_) + sizeof(item_id_));
  _cached_size_ = 0;
}

GS2CCreateScene_ObjInfo::~GS2CCreateScene_ObjInfo() {
  // @@protoc_insertion_point(destructor:NetProto.GS2CCreateScene.ObjInfo)
  SharedDtor();
}

void GS2CCreateScene_ObjInfo::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete pos_rot_;
  }
}

void GS2CCreateScene_ObjInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2CCreateScene_ObjInfo::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GS2CCreateScene_ObjInfo& GS2CCreateScene_ObjInfo::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

GS2CCreateScene_ObjInfo* GS2CCreateScene_ObjInfo::New(::google::protobuf::Arena* arena) const {
  GS2CCreateScene_ObjInfo* n = new GS2CCreateScene_ObjInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GS2CCreateScene_ObjInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.GS2CCreateScene.ObjInfo)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pos_rot_ != NULL) {
    delete pos_rot_;
  }
  pos_rot_ = NULL;
  ::memset(&class_id_, 0, reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&class_id_) + sizeof(item_id_));
}

bool GS2CCreateScene_ObjInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.GS2CCreateScene.ObjInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.GS2CCreateScene.ObjInfo.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 class_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 item_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.PosRot pos_rot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos_rot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.GS2CCreateScene.ObjInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.GS2CCreateScene.ObjInfo)
  return false;
#undef DO_
}

void GS2CCreateScene_ObjInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.GS2CCreateScene.ObjInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CCreateScene.ObjInfo.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // uint32 class_id = 2;
  if (this->class_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->class_id(), output);
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_id(), output);
  }

  // .NetProto.PosRot pos_rot = 4;
  if (this->has_pos_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pos_rot_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.GS2CCreateScene.ObjInfo)
}

::google::protobuf::uint8* GS2CCreateScene_ObjInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.GS2CCreateScene.ObjInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CCreateScene.ObjInfo.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // uint32 class_id = 2;
  if (this->class_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->class_id(), target);
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_id(), target);
  }

  // .NetProto.PosRot pos_rot = 4;
  if (this->has_pos_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pos_rot_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.GS2CCreateScene.ObjInfo)
  return target;
}

size_t GS2CCreateScene_ObjInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.GS2CCreateScene.ObjInfo)
  size_t total_size = 0;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // .NetProto.PosRot pos_rot = 4;
  if (this->has_pos_rot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_rot_);
  }

  // uint32 class_id = 2;
  if (this->class_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->class_id());
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2CCreateScene_ObjInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.GS2CCreateScene.ObjInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GS2CCreateScene_ObjInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GS2CCreateScene_ObjInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.GS2CCreateScene.ObjInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.GS2CCreateScene.ObjInfo)
    MergeFrom(*source);
  }
}

void GS2CCreateScene_ObjInfo::MergeFrom(const GS2CCreateScene_ObjInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.GS2CCreateScene.ObjInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_pos_rot()) {
    mutable_pos_rot()->::NetProto::PosRot::MergeFrom(from.pos_rot());
  }
  if (from.class_id() != 0) {
    set_class_id(from.class_id());
  }
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
}

void GS2CCreateScene_ObjInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.GS2CCreateScene.ObjInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2CCreateScene_ObjInfo::CopyFrom(const GS2CCreateScene_ObjInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.GS2CCreateScene.ObjInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2CCreateScene_ObjInfo::IsInitialized() const {
  return true;
}

void GS2CCreateScene_ObjInfo::Swap(GS2CCreateScene_ObjInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GS2CCreateScene_ObjInfo::InternalSwap(GS2CCreateScene_ObjInfo* other) {
  uuid_.Swap(&other->uuid_);
  std::swap(pos_rot_, other->pos_rot_);
  std::swap(class_id_, other->class_id_);
  std::swap(item_id_, other->item_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GS2CCreateScene_ObjInfo::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GS2CCreateScene_ObjInfo

// string uuid = 1;
void GS2CCreateScene_ObjInfo::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GS2CCreateScene_ObjInfo::uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CCreateScene.ObjInfo.uuid)
  return uuid_.GetNoArena();
}
void GS2CCreateScene_ObjInfo::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.GS2CCreateScene.ObjInfo.uuid)
}
#if LANG_CXX11
void GS2CCreateScene_ObjInfo::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.GS2CCreateScene.ObjInfo.uuid)
}
#endif
void GS2CCreateScene_ObjInfo::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.GS2CCreateScene.ObjInfo.uuid)
}
void GS2CCreateScene_ObjInfo::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.GS2CCreateScene.ObjInfo.uuid)
}
::std::string* GS2CCreateScene_ObjInfo::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CCreateScene.ObjInfo.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GS2CCreateScene_ObjInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.GS2CCreateScene.ObjInfo.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GS2CCreateScene_ObjInfo::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2CCreateScene.ObjInfo.uuid)
}

// uint32 class_id = 2;
void GS2CCreateScene_ObjInfo::clear_class_id() {
  class_id_ = 0u;
}
::google::protobuf::uint32 GS2CCreateScene_ObjInfo::class_id() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CCreateScene.ObjInfo.class_id)
  return class_id_;
}
void GS2CCreateScene_ObjInfo::set_class_id(::google::protobuf::uint32 value) {
  
  class_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2CCreateScene.ObjInfo.class_id)
}

// uint32 item_id = 3;
void GS2CCreateScene_ObjInfo::clear_item_id() {
  item_id_ = 0u;
}
::google::protobuf::uint32 GS2CCreateScene_ObjInfo::item_id() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CCreateScene.ObjInfo.item_id)
  return item_id_;
}
void GS2CCreateScene_ObjInfo::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2CCreateScene.ObjInfo.item_id)
}

// .NetProto.PosRot pos_rot = 4;
bool GS2CCreateScene_ObjInfo::has_pos_rot() const {
  return this != internal_default_instance() && pos_rot_ != NULL;
}
void GS2CCreateScene_ObjInfo::clear_pos_rot() {
  if (GetArenaNoVirtual() == NULL && pos_rot_ != NULL) delete pos_rot_;
  pos_rot_ = NULL;
}
const ::NetProto::PosRot& GS2CCreateScene_ObjInfo::pos_rot() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CCreateScene.ObjInfo.pos_rot)
  return pos_rot_ != NULL ? *pos_rot_
                         : *::NetProto::PosRot::internal_default_instance();
}
::NetProto::PosRot* GS2CCreateScene_ObjInfo::mutable_pos_rot() {
  
  if (pos_rot_ == NULL) {
    pos_rot_ = new ::NetProto::PosRot;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CCreateScene.ObjInfo.pos_rot)
  return pos_rot_;
}
::NetProto::PosRot* GS2CCreateScene_ObjInfo::release_pos_rot() {
  // @@protoc_insertion_point(field_release:NetProto.GS2CCreateScene.ObjInfo.pos_rot)
  
  ::NetProto::PosRot* temp = pos_rot_;
  pos_rot_ = NULL;
  return temp;
}
void GS2CCreateScene_ObjInfo::set_allocated_pos_rot(::NetProto::PosRot* pos_rot) {
  delete pos_rot_;
  pos_rot_ = pos_rot;
  if (pos_rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2CCreateScene.ObjInfo.pos_rot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GS2CCreateScene::kOwnerUuidFieldNumber;
const int GS2CCreateScene::kMapIdFieldNumber;
const int GS2CCreateScene::kSceneIdFieldNumber;
const int GS2CCreateScene::kObjInfoFieldNumber;
const int GS2CCreateScene::kStatusVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GS2CCreateScene::GS2CCreateScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.GS2CCreateScene)
}
GS2CCreateScene::GS2CCreateScene(const GS2CCreateScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      obj_info_(from.obj_info_),
      status_vector_(from.status_vector_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner_uuid().size() > 0) {
    owner_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_uuid_);
  }
  scene_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.scene_id().size() > 0) {
    scene_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
  map_id_ = from.map_id_;
  // @@protoc_insertion_point(copy_constructor:NetProto.GS2CCreateScene)
}

void GS2CCreateScene::SharedCtor() {
  owner_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_id_ = 0u;
  _cached_size_ = 0;
}

GS2CCreateScene::~GS2CCreateScene() {
  // @@protoc_insertion_point(destructor:NetProto.GS2CCreateScene)
  SharedDtor();
}

void GS2CCreateScene::SharedDtor() {
  owner_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GS2CCreateScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2CCreateScene::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GS2CCreateScene& GS2CCreateScene::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

GS2CCreateScene* GS2CCreateScene::New(::google::protobuf::Arena* arena) const {
  GS2CCreateScene* n = new GS2CCreateScene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GS2CCreateScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.GS2CCreateScene)
  obj_info_.Clear();
  status_vector_.Clear();
  owner_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_id_ = 0u;
}

bool GS2CCreateScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.GS2CCreateScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string owner_uuid = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8002u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_uuid().data(), this->owner_uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.GS2CCreateScene.owner_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 map_id = 1001;
      case 1001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8008u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string scene_id = 1002;
      case 1002: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8018u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scene_id().data(), this->scene_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.GS2CCreateScene.scene_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.GS2CCreateScene.ObjInfo obj_info = 1003;
      case 1003: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8026u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obj_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
      case 1005: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8042u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.GS2CCreateScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.GS2CCreateScene)
  return false;
#undef DO_
}

void GS2CCreateScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.GS2CCreateScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_uuid = 1000;
  if (this->owner_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_uuid().data(), this->owner_uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CCreateScene.owner_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1000, this->owner_uuid(), output);
  }

  // uint32 map_id = 1001;
  if (this->map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1001, this->map_id(), output);
  }

  // string scene_id = 1002;
  if (this->scene_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene_id().data(), this->scene_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CCreateScene.scene_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1002, this->scene_id(), output);
  }

  // repeated .NetProto.GS2CCreateScene.ObjInfo obj_info = 1003;
  for (unsigned int i = 0, n = this->obj_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1003, this->obj_info(i), output);
  }

  // repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
  for (unsigned int i = 0, n = this->status_vector_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1005, this->status_vector(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.GS2CCreateScene)
}

::google::protobuf::uint8* GS2CCreateScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.GS2CCreateScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_uuid = 1000;
  if (this->owner_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_uuid().data(), this->owner_uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CCreateScene.owner_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1000, this->owner_uuid(), target);
  }

  // uint32 map_id = 1001;
  if (this->map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1001, this->map_id(), target);
  }

  // string scene_id = 1002;
  if (this->scene_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene_id().data(), this->scene_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CCreateScene.scene_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1002, this->scene_id(), target);
  }

  // repeated .NetProto.GS2CCreateScene.ObjInfo obj_info = 1003;
  for (unsigned int i = 0, n = this->obj_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1003, this->obj_info(i), deterministic, target);
  }

  // repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
  for (unsigned int i = 0, n = this->status_vector_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1005, this->status_vector(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.GS2CCreateScene)
  return target;
}

size_t GS2CCreateScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.GS2CCreateScene)
  size_t total_size = 0;

  // repeated .NetProto.GS2CCreateScene.ObjInfo obj_info = 1003;
  {
    unsigned int count = this->obj_info_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obj_info(i));
    }
  }

  // repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
  {
    unsigned int count = this->status_vector_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status_vector(i));
    }
  }

  // string owner_uuid = 1000;
  if (this->owner_uuid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner_uuid());
  }

  // string scene_id = 1002;
  if (this->scene_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scene_id());
  }

  // uint32 map_id = 1001;
  if (this->map_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->map_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2CCreateScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.GS2CCreateScene)
  GOOGLE_DCHECK_NE(&from, this);
  const GS2CCreateScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GS2CCreateScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.GS2CCreateScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.GS2CCreateScene)
    MergeFrom(*source);
  }
}

void GS2CCreateScene::MergeFrom(const GS2CCreateScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.GS2CCreateScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obj_info_.MergeFrom(from.obj_info_);
  status_vector_.MergeFrom(from.status_vector_);
  if (from.owner_uuid().size() > 0) {

    owner_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_uuid_);
  }
  if (from.scene_id().size() > 0) {

    scene_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
  if (from.map_id() != 0) {
    set_map_id(from.map_id());
  }
}

void GS2CCreateScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.GS2CCreateScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2CCreateScene::CopyFrom(const GS2CCreateScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.GS2CCreateScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2CCreateScene::IsInitialized() const {
  return true;
}

void GS2CCreateScene::Swap(GS2CCreateScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GS2CCreateScene::InternalSwap(GS2CCreateScene* other) {
  obj_info_.InternalSwap(&other->obj_info_);
  status_vector_.InternalSwap(&other->status_vector_);
  owner_uuid_.Swap(&other->owner_uuid_);
  scene_id_.Swap(&other->scene_id_);
  std::swap(map_id_, other->map_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GS2CCreateScene::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GS2CCreateScene

// string owner_uuid = 1000;
void GS2CCreateScene::clear_owner_uuid() {
  owner_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GS2CCreateScene::owner_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CCreateScene.owner_uuid)
  return owner_uuid_.GetNoArena();
}
void GS2CCreateScene::set_owner_uuid(const ::std::string& value) {
  
  owner_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.GS2CCreateScene.owner_uuid)
}
#if LANG_CXX11
void GS2CCreateScene::set_owner_uuid(::std::string&& value) {
  
  owner_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.GS2CCreateScene.owner_uuid)
}
#endif
void GS2CCreateScene::set_owner_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.GS2CCreateScene.owner_uuid)
}
void GS2CCreateScene::set_owner_uuid(const char* value, size_t size) {
  
  owner_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.GS2CCreateScene.owner_uuid)
}
::std::string* GS2CCreateScene::mutable_owner_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CCreateScene.owner_uuid)
  return owner_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GS2CCreateScene::release_owner_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.GS2CCreateScene.owner_uuid)
  
  return owner_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GS2CCreateScene::set_allocated_owner_uuid(::std::string* owner_uuid) {
  if (owner_uuid != NULL) {
    
  } else {
    
  }
  owner_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2CCreateScene.owner_uuid)
}

// uint32 map_id = 1001;
void GS2CCreateScene::clear_map_id() {
  map_id_ = 0u;
}
::google::protobuf::uint32 GS2CCreateScene::map_id() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CCreateScene.map_id)
  return map_id_;
}
void GS2CCreateScene::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2CCreateScene.map_id)
}

// string scene_id = 1002;
void GS2CCreateScene::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GS2CCreateScene::scene_id() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CCreateScene.scene_id)
  return scene_id_.GetNoArena();
}
void GS2CCreateScene::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.GS2CCreateScene.scene_id)
}
#if LANG_CXX11
void GS2CCreateScene::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.GS2CCreateScene.scene_id)
}
#endif
void GS2CCreateScene::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.GS2CCreateScene.scene_id)
}
void GS2CCreateScene::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.GS2CCreateScene.scene_id)
}
::std::string* GS2CCreateScene::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CCreateScene.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GS2CCreateScene::release_scene_id() {
  // @@protoc_insertion_point(field_release:NetProto.GS2CCreateScene.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GS2CCreateScene::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2CCreateScene.scene_id)
}

// repeated .NetProto.GS2CCreateScene.ObjInfo obj_info = 1003;
int GS2CCreateScene::obj_info_size() const {
  return obj_info_.size();
}
void GS2CCreateScene::clear_obj_info() {
  obj_info_.Clear();
}
const ::NetProto::GS2CCreateScene_ObjInfo& GS2CCreateScene::obj_info(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CCreateScene.obj_info)
  return obj_info_.Get(index);
}
::NetProto::GS2CCreateScene_ObjInfo* GS2CCreateScene::mutable_obj_info(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CCreateScene.obj_info)
  return obj_info_.Mutable(index);
}
::NetProto::GS2CCreateScene_ObjInfo* GS2CCreateScene::add_obj_info() {
  // @@protoc_insertion_point(field_add:NetProto.GS2CCreateScene.obj_info)
  return obj_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::GS2CCreateScene_ObjInfo >*
GS2CCreateScene::mutable_obj_info() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.GS2CCreateScene.obj_info)
  return &obj_info_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::GS2CCreateScene_ObjInfo >&
GS2CCreateScene::obj_info() const {
  // @@protoc_insertion_point(field_list:NetProto.GS2CCreateScene.obj_info)
  return obj_info_;
}

// repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
int GS2CCreateScene::status_vector_size() const {
  return status_vector_.size();
}
void GS2CCreateScene::clear_status_vector() {
  status_vector_.Clear();
}
const ::NetProto::Action::Status::NaturalActionStatus& GS2CCreateScene::status_vector(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CCreateScene.status_vector)
  return status_vector_.Get(index);
}
::NetProto::Action::Status::NaturalActionStatus* GS2CCreateScene::mutable_status_vector(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CCreateScene.status_vector)
  return status_vector_.Mutable(index);
}
::NetProto::Action::Status::NaturalActionStatus* GS2CCreateScene::add_status_vector() {
  // @@protoc_insertion_point(field_add:NetProto.GS2CCreateScene.status_vector)
  return status_vector_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >*
GS2CCreateScene::mutable_status_vector() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.GS2CCreateScene.status_vector)
  return &status_vector_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >&
GS2CCreateScene::status_vector() const {
  // @@protoc_insertion_point(field_list:NetProto.GS2CCreateScene.status_vector)
  return status_vector_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GS2CEnterScene_ObjInfo::kUuidFieldNumber;
const int GS2CEnterScene_ObjInfo::kClassIdFieldNumber;
const int GS2CEnterScene_ObjInfo::kItemIdFieldNumber;
const int GS2CEnterScene_ObjInfo::kPosRotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GS2CEnterScene_ObjInfo::GS2CEnterScene_ObjInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.GS2CEnterScene.ObjInfo)
}
GS2CEnterScene_ObjInfo::GS2CEnterScene_ObjInfo(const GS2CEnterScene_ObjInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_pos_rot()) {
    pos_rot_ = new ::NetProto::PosRot(*from.pos_rot_);
  } else {
    pos_rot_ = NULL;
  }
  ::memcpy(&class_id_, &from.class_id_,
    reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&class_id_) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:NetProto.GS2CEnterScene.ObjInfo)
}

void GS2CEnterScene_ObjInfo::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_rot_, 0, reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&pos_rot_) + sizeof(item_id_));
  _cached_size_ = 0;
}

GS2CEnterScene_ObjInfo::~GS2CEnterScene_ObjInfo() {
  // @@protoc_insertion_point(destructor:NetProto.GS2CEnterScene.ObjInfo)
  SharedDtor();
}

void GS2CEnterScene_ObjInfo::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete pos_rot_;
  }
}

void GS2CEnterScene_ObjInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2CEnterScene_ObjInfo::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GS2CEnterScene_ObjInfo& GS2CEnterScene_ObjInfo::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

GS2CEnterScene_ObjInfo* GS2CEnterScene_ObjInfo::New(::google::protobuf::Arena* arena) const {
  GS2CEnterScene_ObjInfo* n = new GS2CEnterScene_ObjInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GS2CEnterScene_ObjInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.GS2CEnterScene.ObjInfo)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pos_rot_ != NULL) {
    delete pos_rot_;
  }
  pos_rot_ = NULL;
  ::memset(&class_id_, 0, reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&class_id_) + sizeof(item_id_));
}

bool GS2CEnterScene_ObjInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.GS2CEnterScene.ObjInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.GS2CEnterScene.ObjInfo.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 class_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 item_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.PosRot pos_rot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos_rot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.GS2CEnterScene.ObjInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.GS2CEnterScene.ObjInfo)
  return false;
#undef DO_
}

void GS2CEnterScene_ObjInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.GS2CEnterScene.ObjInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CEnterScene.ObjInfo.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // uint32 class_id = 2;
  if (this->class_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->class_id(), output);
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_id(), output);
  }

  // .NetProto.PosRot pos_rot = 4;
  if (this->has_pos_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pos_rot_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.GS2CEnterScene.ObjInfo)
}

::google::protobuf::uint8* GS2CEnterScene_ObjInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.GS2CEnterScene.ObjInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CEnterScene.ObjInfo.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // uint32 class_id = 2;
  if (this->class_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->class_id(), target);
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_id(), target);
  }

  // .NetProto.PosRot pos_rot = 4;
  if (this->has_pos_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pos_rot_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.GS2CEnterScene.ObjInfo)
  return target;
}

size_t GS2CEnterScene_ObjInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.GS2CEnterScene.ObjInfo)
  size_t total_size = 0;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // .NetProto.PosRot pos_rot = 4;
  if (this->has_pos_rot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_rot_);
  }

  // uint32 class_id = 2;
  if (this->class_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->class_id());
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2CEnterScene_ObjInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.GS2CEnterScene.ObjInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GS2CEnterScene_ObjInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GS2CEnterScene_ObjInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.GS2CEnterScene.ObjInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.GS2CEnterScene.ObjInfo)
    MergeFrom(*source);
  }
}

void GS2CEnterScene_ObjInfo::MergeFrom(const GS2CEnterScene_ObjInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.GS2CEnterScene.ObjInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_pos_rot()) {
    mutable_pos_rot()->::NetProto::PosRot::MergeFrom(from.pos_rot());
  }
  if (from.class_id() != 0) {
    set_class_id(from.class_id());
  }
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
}

void GS2CEnterScene_ObjInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.GS2CEnterScene.ObjInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2CEnterScene_ObjInfo::CopyFrom(const GS2CEnterScene_ObjInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.GS2CEnterScene.ObjInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2CEnterScene_ObjInfo::IsInitialized() const {
  return true;
}

void GS2CEnterScene_ObjInfo::Swap(GS2CEnterScene_ObjInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GS2CEnterScene_ObjInfo::InternalSwap(GS2CEnterScene_ObjInfo* other) {
  uuid_.Swap(&other->uuid_);
  std::swap(pos_rot_, other->pos_rot_);
  std::swap(class_id_, other->class_id_);
  std::swap(item_id_, other->item_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GS2CEnterScene_ObjInfo::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GS2CEnterScene_ObjInfo

// string uuid = 1;
void GS2CEnterScene_ObjInfo::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GS2CEnterScene_ObjInfo::uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CEnterScene.ObjInfo.uuid)
  return uuid_.GetNoArena();
}
void GS2CEnterScene_ObjInfo::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.GS2CEnterScene.ObjInfo.uuid)
}
#if LANG_CXX11
void GS2CEnterScene_ObjInfo::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.GS2CEnterScene.ObjInfo.uuid)
}
#endif
void GS2CEnterScene_ObjInfo::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.GS2CEnterScene.ObjInfo.uuid)
}
void GS2CEnterScene_ObjInfo::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.GS2CEnterScene.ObjInfo.uuid)
}
::std::string* GS2CEnterScene_ObjInfo::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CEnterScene.ObjInfo.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GS2CEnterScene_ObjInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.GS2CEnterScene.ObjInfo.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GS2CEnterScene_ObjInfo::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2CEnterScene.ObjInfo.uuid)
}

// uint32 class_id = 2;
void GS2CEnterScene_ObjInfo::clear_class_id() {
  class_id_ = 0u;
}
::google::protobuf::uint32 GS2CEnterScene_ObjInfo::class_id() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CEnterScene.ObjInfo.class_id)
  return class_id_;
}
void GS2CEnterScene_ObjInfo::set_class_id(::google::protobuf::uint32 value) {
  
  class_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2CEnterScene.ObjInfo.class_id)
}

// uint32 item_id = 3;
void GS2CEnterScene_ObjInfo::clear_item_id() {
  item_id_ = 0u;
}
::google::protobuf::uint32 GS2CEnterScene_ObjInfo::item_id() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CEnterScene.ObjInfo.item_id)
  return item_id_;
}
void GS2CEnterScene_ObjInfo::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2CEnterScene.ObjInfo.item_id)
}

// .NetProto.PosRot pos_rot = 4;
bool GS2CEnterScene_ObjInfo::has_pos_rot() const {
  return this != internal_default_instance() && pos_rot_ != NULL;
}
void GS2CEnterScene_ObjInfo::clear_pos_rot() {
  if (GetArenaNoVirtual() == NULL && pos_rot_ != NULL) delete pos_rot_;
  pos_rot_ = NULL;
}
const ::NetProto::PosRot& GS2CEnterScene_ObjInfo::pos_rot() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CEnterScene.ObjInfo.pos_rot)
  return pos_rot_ != NULL ? *pos_rot_
                         : *::NetProto::PosRot::internal_default_instance();
}
::NetProto::PosRot* GS2CEnterScene_ObjInfo::mutable_pos_rot() {
  
  if (pos_rot_ == NULL) {
    pos_rot_ = new ::NetProto::PosRot;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CEnterScene.ObjInfo.pos_rot)
  return pos_rot_;
}
::NetProto::PosRot* GS2CEnterScene_ObjInfo::release_pos_rot() {
  // @@protoc_insertion_point(field_release:NetProto.GS2CEnterScene.ObjInfo.pos_rot)
  
  ::NetProto::PosRot* temp = pos_rot_;
  pos_rot_ = NULL;
  return temp;
}
void GS2CEnterScene_ObjInfo::set_allocated_pos_rot(::NetProto::PosRot* pos_rot) {
  delete pos_rot_;
  pos_rot_ = pos_rot;
  if (pos_rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2CEnterScene.ObjInfo.pos_rot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GS2CEnterScene::kOwnerUuidFieldNumber;
const int GS2CEnterScene::kMapIdFieldNumber;
const int GS2CEnterScene::kSceneIdFieldNumber;
const int GS2CEnterScene::kObjInfoFieldNumber;
const int GS2CEnterScene::kStatusVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GS2CEnterScene::GS2CEnterScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.GS2CEnterScene)
}
GS2CEnterScene::GS2CEnterScene(const GS2CEnterScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      obj_info_(from.obj_info_),
      status_vector_(from.status_vector_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner_uuid().size() > 0) {
    owner_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_uuid_);
  }
  scene_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.scene_id().size() > 0) {
    scene_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
  map_id_ = from.map_id_;
  // @@protoc_insertion_point(copy_constructor:NetProto.GS2CEnterScene)
}

void GS2CEnterScene::SharedCtor() {
  owner_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_id_ = 0u;
  _cached_size_ = 0;
}

GS2CEnterScene::~GS2CEnterScene() {
  // @@protoc_insertion_point(destructor:NetProto.GS2CEnterScene)
  SharedDtor();
}

void GS2CEnterScene::SharedDtor() {
  owner_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GS2CEnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2CEnterScene::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GS2CEnterScene& GS2CEnterScene::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

GS2CEnterScene* GS2CEnterScene::New(::google::protobuf::Arena* arena) const {
  GS2CEnterScene* n = new GS2CEnterScene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GS2CEnterScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.GS2CEnterScene)
  obj_info_.Clear();
  status_vector_.Clear();
  owner_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_id_ = 0u;
}

bool GS2CEnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.GS2CEnterScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string owner_uuid = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8002u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_uuid().data(), this->owner_uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.GS2CEnterScene.owner_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 map_id = 1001;
      case 1001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8008u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string scene_id = 1002;
      case 1002: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8018u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scene_id().data(), this->scene_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.GS2CEnterScene.scene_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.GS2CEnterScene.ObjInfo obj_info = 1003;
      case 1003: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8026u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obj_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
      case 1005: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8042u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.GS2CEnterScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.GS2CEnterScene)
  return false;
#undef DO_
}

void GS2CEnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.GS2CEnterScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_uuid = 1000;
  if (this->owner_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_uuid().data(), this->owner_uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CEnterScene.owner_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1000, this->owner_uuid(), output);
  }

  // uint32 map_id = 1001;
  if (this->map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1001, this->map_id(), output);
  }

  // string scene_id = 1002;
  if (this->scene_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene_id().data(), this->scene_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CEnterScene.scene_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1002, this->scene_id(), output);
  }

  // repeated .NetProto.GS2CEnterScene.ObjInfo obj_info = 1003;
  for (unsigned int i = 0, n = this->obj_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1003, this->obj_info(i), output);
  }

  // repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
  for (unsigned int i = 0, n = this->status_vector_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1005, this->status_vector(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.GS2CEnterScene)
}

::google::protobuf::uint8* GS2CEnterScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.GS2CEnterScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_uuid = 1000;
  if (this->owner_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_uuid().data(), this->owner_uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CEnterScene.owner_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1000, this->owner_uuid(), target);
  }

  // uint32 map_id = 1001;
  if (this->map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1001, this->map_id(), target);
  }

  // string scene_id = 1002;
  if (this->scene_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene_id().data(), this->scene_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2CEnterScene.scene_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1002, this->scene_id(), target);
  }

  // repeated .NetProto.GS2CEnterScene.ObjInfo obj_info = 1003;
  for (unsigned int i = 0, n = this->obj_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1003, this->obj_info(i), deterministic, target);
  }

  // repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
  for (unsigned int i = 0, n = this->status_vector_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1005, this->status_vector(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.GS2CEnterScene)
  return target;
}

size_t GS2CEnterScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.GS2CEnterScene)
  size_t total_size = 0;

  // repeated .NetProto.GS2CEnterScene.ObjInfo obj_info = 1003;
  {
    unsigned int count = this->obj_info_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obj_info(i));
    }
  }

  // repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
  {
    unsigned int count = this->status_vector_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status_vector(i));
    }
  }

  // string owner_uuid = 1000;
  if (this->owner_uuid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner_uuid());
  }

  // string scene_id = 1002;
  if (this->scene_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scene_id());
  }

  // uint32 map_id = 1001;
  if (this->map_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->map_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2CEnterScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.GS2CEnterScene)
  GOOGLE_DCHECK_NE(&from, this);
  const GS2CEnterScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GS2CEnterScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.GS2CEnterScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.GS2CEnterScene)
    MergeFrom(*source);
  }
}

void GS2CEnterScene::MergeFrom(const GS2CEnterScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.GS2CEnterScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obj_info_.MergeFrom(from.obj_info_);
  status_vector_.MergeFrom(from.status_vector_);
  if (from.owner_uuid().size() > 0) {

    owner_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_uuid_);
  }
  if (from.scene_id().size() > 0) {

    scene_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
  if (from.map_id() != 0) {
    set_map_id(from.map_id());
  }
}

void GS2CEnterScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.GS2CEnterScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2CEnterScene::CopyFrom(const GS2CEnterScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.GS2CEnterScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2CEnterScene::IsInitialized() const {
  return true;
}

void GS2CEnterScene::Swap(GS2CEnterScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GS2CEnterScene::InternalSwap(GS2CEnterScene* other) {
  obj_info_.InternalSwap(&other->obj_info_);
  status_vector_.InternalSwap(&other->status_vector_);
  owner_uuid_.Swap(&other->owner_uuid_);
  scene_id_.Swap(&other->scene_id_);
  std::swap(map_id_, other->map_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GS2CEnterScene::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GS2CEnterScene

// string owner_uuid = 1000;
void GS2CEnterScene::clear_owner_uuid() {
  owner_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GS2CEnterScene::owner_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CEnterScene.owner_uuid)
  return owner_uuid_.GetNoArena();
}
void GS2CEnterScene::set_owner_uuid(const ::std::string& value) {
  
  owner_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.GS2CEnterScene.owner_uuid)
}
#if LANG_CXX11
void GS2CEnterScene::set_owner_uuid(::std::string&& value) {
  
  owner_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.GS2CEnterScene.owner_uuid)
}
#endif
void GS2CEnterScene::set_owner_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.GS2CEnterScene.owner_uuid)
}
void GS2CEnterScene::set_owner_uuid(const char* value, size_t size) {
  
  owner_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.GS2CEnterScene.owner_uuid)
}
::std::string* GS2CEnterScene::mutable_owner_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CEnterScene.owner_uuid)
  return owner_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GS2CEnterScene::release_owner_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.GS2CEnterScene.owner_uuid)
  
  return owner_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GS2CEnterScene::set_allocated_owner_uuid(::std::string* owner_uuid) {
  if (owner_uuid != NULL) {
    
  } else {
    
  }
  owner_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2CEnterScene.owner_uuid)
}

// uint32 map_id = 1001;
void GS2CEnterScene::clear_map_id() {
  map_id_ = 0u;
}
::google::protobuf::uint32 GS2CEnterScene::map_id() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CEnterScene.map_id)
  return map_id_;
}
void GS2CEnterScene::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2CEnterScene.map_id)
}

// string scene_id = 1002;
void GS2CEnterScene::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GS2CEnterScene::scene_id() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CEnterScene.scene_id)
  return scene_id_.GetNoArena();
}
void GS2CEnterScene::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.GS2CEnterScene.scene_id)
}
#if LANG_CXX11
void GS2CEnterScene::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.GS2CEnterScene.scene_id)
}
#endif
void GS2CEnterScene::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.GS2CEnterScene.scene_id)
}
void GS2CEnterScene::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.GS2CEnterScene.scene_id)
}
::std::string* GS2CEnterScene::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CEnterScene.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GS2CEnterScene::release_scene_id() {
  // @@protoc_insertion_point(field_release:NetProto.GS2CEnterScene.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GS2CEnterScene::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2CEnterScene.scene_id)
}

// repeated .NetProto.GS2CEnterScene.ObjInfo obj_info = 1003;
int GS2CEnterScene::obj_info_size() const {
  return obj_info_.size();
}
void GS2CEnterScene::clear_obj_info() {
  obj_info_.Clear();
}
const ::NetProto::GS2CEnterScene_ObjInfo& GS2CEnterScene::obj_info(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CEnterScene.obj_info)
  return obj_info_.Get(index);
}
::NetProto::GS2CEnterScene_ObjInfo* GS2CEnterScene::mutable_obj_info(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CEnterScene.obj_info)
  return obj_info_.Mutable(index);
}
::NetProto::GS2CEnterScene_ObjInfo* GS2CEnterScene::add_obj_info() {
  // @@protoc_insertion_point(field_add:NetProto.GS2CEnterScene.obj_info)
  return obj_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::GS2CEnterScene_ObjInfo >*
GS2CEnterScene::mutable_obj_info() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.GS2CEnterScene.obj_info)
  return &obj_info_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::GS2CEnterScene_ObjInfo >&
GS2CEnterScene::obj_info() const {
  // @@protoc_insertion_point(field_list:NetProto.GS2CEnterScene.obj_info)
  return obj_info_;
}

// repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
int GS2CEnterScene::status_vector_size() const {
  return status_vector_.size();
}
void GS2CEnterScene::clear_status_vector() {
  status_vector_.Clear();
}
const ::NetProto::Action::Status::NaturalActionStatus& GS2CEnterScene::status_vector(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.GS2CEnterScene.status_vector)
  return status_vector_.Get(index);
}
::NetProto::Action::Status::NaturalActionStatus* GS2CEnterScene::mutable_status_vector(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.GS2CEnterScene.status_vector)
  return status_vector_.Mutable(index);
}
::NetProto::Action::Status::NaturalActionStatus* GS2CEnterScene::add_status_vector() {
  // @@protoc_insertion_point(field_add:NetProto.GS2CEnterScene.status_vector)
  return status_vector_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >*
GS2CEnterScene::mutable_status_vector() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.GS2CEnterScene.status_vector)
  return &status_vector_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >&
GS2CEnterScene::status_vector() const {
  // @@protoc_insertion_point(field_list:NetProto.GS2CEnterScene.status_vector)
  return status_vector_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GS2MTSHeart::kGameServerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GS2MTSHeart::GS2MTSHeart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.GS2MTSHeart)
}
GS2MTSHeart::GS2MTSHeart(const GS2MTSHeart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameserverid_ = from.gameserverid_;
  // @@protoc_insertion_point(copy_constructor:NetProto.GS2MTSHeart)
}

void GS2MTSHeart::SharedCtor() {
  gameserverid_ = 0u;
  _cached_size_ = 0;
}

GS2MTSHeart::~GS2MTSHeart() {
  // @@protoc_insertion_point(destructor:NetProto.GS2MTSHeart)
  SharedDtor();
}

void GS2MTSHeart::SharedDtor() {
}

void GS2MTSHeart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2MTSHeart::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GS2MTSHeart& GS2MTSHeart::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

GS2MTSHeart* GS2MTSHeart::New(::google::protobuf::Arena* arena) const {
  GS2MTSHeart* n = new GS2MTSHeart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GS2MTSHeart::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.GS2MTSHeart)
  gameserverid_ = 0u;
}

bool GS2MTSHeart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.GS2MTSHeart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gameServerID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameserverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.GS2MTSHeart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.GS2MTSHeart)
  return false;
#undef DO_
}

void GS2MTSHeart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.GS2MTSHeart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gameServerID = 1;
  if (this->gameserverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameserverid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.GS2MTSHeart)
}

::google::protobuf::uint8* GS2MTSHeart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.GS2MTSHeart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gameServerID = 1;
  if (this->gameserverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameserverid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.GS2MTSHeart)
  return target;
}

size_t GS2MTSHeart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.GS2MTSHeart)
  size_t total_size = 0;

  // uint32 gameServerID = 1;
  if (this->gameserverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameserverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2MTSHeart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.GS2MTSHeart)
  GOOGLE_DCHECK_NE(&from, this);
  const GS2MTSHeart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GS2MTSHeart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.GS2MTSHeart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.GS2MTSHeart)
    MergeFrom(*source);
  }
}

void GS2MTSHeart::MergeFrom(const GS2MTSHeart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.GS2MTSHeart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameserverid() != 0) {
    set_gameserverid(from.gameserverid());
  }
}

void GS2MTSHeart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.GS2MTSHeart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2MTSHeart::CopyFrom(const GS2MTSHeart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.GS2MTSHeart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2MTSHeart::IsInitialized() const {
  return true;
}

void GS2MTSHeart::Swap(GS2MTSHeart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GS2MTSHeart::InternalSwap(GS2MTSHeart* other) {
  std::swap(gameserverid_, other->gameserverid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GS2MTSHeart::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GS2MTSHeart

// uint32 gameServerID = 1;
void GS2MTSHeart::clear_gameserverid() {
  gameserverid_ = 0u;
}
::google::protobuf::uint32 GS2MTSHeart::gameserverid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSHeart.gameServerID)
  return gameserverid_;
}
void GS2MTSHeart::set_gameserverid(::google::protobuf::uint32 value) {
  
  gameserverid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2MTSHeart.gameServerID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GS2MTSGetRobotList::kMsgHeadFieldNumber;
const int GS2MTSGetRobotList::kAccountIDFieldNumber;
const int GS2MTSGetRobotList::kPlayerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GS2MTSGetRobotList::GS2MTSGetRobotList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.GS2MTSGetRobotList)
}
GS2MTSGetRobotList::GS2MTSGetRobotList(const GS2MTSGetRobotList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msghead()) {
    msghead_ = new ::NetProto::MsgHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:NetProto.GS2MTSGetRobotList)
}

void GS2MTSGetRobotList::SharedCtor() {
  ::memset(&msghead_, 0, reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&msghead_) + sizeof(playerid_));
  _cached_size_ = 0;
}

GS2MTSGetRobotList::~GS2MTSGetRobotList() {
  // @@protoc_insertion_point(destructor:NetProto.GS2MTSGetRobotList)
  SharedDtor();
}

void GS2MTSGetRobotList::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msghead_;
  }
}

void GS2MTSGetRobotList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2MTSGetRobotList::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GS2MTSGetRobotList& GS2MTSGetRobotList::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

GS2MTSGetRobotList* GS2MTSGetRobotList::New(::google::protobuf::Arena* arena) const {
  GS2MTSGetRobotList* n = new GS2MTSGetRobotList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GS2MTSGetRobotList::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.GS2MTSGetRobotList)
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) {
    delete msghead_;
  }
  msghead_ = NULL;
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(playerid_));
}

bool GS2MTSGetRobotList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.GS2MTSGetRobotList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead msgHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 accountID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 playerID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.GS2MTSGetRobotList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.GS2MTSGetRobotList)
  return false;
#undef DO_
}

void GS2MTSGetRobotList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.GS2MTSGetRobotList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.GS2MTSGetRobotList)
}

::google::protobuf::uint8* GS2MTSGetRobotList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.GS2MTSGetRobotList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msghead_, deterministic, target);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.GS2MTSGetRobotList)
  return target;
}

size_t GS2MTSGetRobotList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.GS2MTSGetRobotList)
  size_t total_size = 0;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2MTSGetRobotList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.GS2MTSGetRobotList)
  GOOGLE_DCHECK_NE(&from, this);
  const GS2MTSGetRobotList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GS2MTSGetRobotList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.GS2MTSGetRobotList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.GS2MTSGetRobotList)
    MergeFrom(*source);
  }
}

void GS2MTSGetRobotList::MergeFrom(const GS2MTSGetRobotList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.GS2MTSGetRobotList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msghead()) {
    mutable_msghead()->::NetProto::MsgHead::MergeFrom(from.msghead());
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void GS2MTSGetRobotList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.GS2MTSGetRobotList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2MTSGetRobotList::CopyFrom(const GS2MTSGetRobotList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.GS2MTSGetRobotList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2MTSGetRobotList::IsInitialized() const {
  return true;
}

void GS2MTSGetRobotList::Swap(GS2MTSGetRobotList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GS2MTSGetRobotList::InternalSwap(GS2MTSGetRobotList* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(accountid_, other->accountid_);
  std::swap(playerid_, other->playerid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GS2MTSGetRobotList::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GS2MTSGetRobotList

// .NetProto.MsgHead msgHead = 1;
bool GS2MTSGetRobotList::has_msghead() const {
  return this != internal_default_instance() && msghead_ != NULL;
}
void GS2MTSGetRobotList::clear_msghead() {
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) delete msghead_;
  msghead_ = NULL;
}
const ::NetProto::MsgHead& GS2MTSGetRobotList::msghead() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSGetRobotList.msgHead)
  return msghead_ != NULL ? *msghead_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* GS2MTSGetRobotList::mutable_msghead() {
  
  if (msghead_ == NULL) {
    msghead_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.GS2MTSGetRobotList.msgHead)
  return msghead_;
}
::NetProto::MsgHead* GS2MTSGetRobotList::release_msghead() {
  // @@protoc_insertion_point(field_release:NetProto.GS2MTSGetRobotList.msgHead)
  
  ::NetProto::MsgHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void GS2MTSGetRobotList::set_allocated_msghead(::NetProto::MsgHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2MTSGetRobotList.msgHead)
}

// uint32 accountID = 2;
void GS2MTSGetRobotList::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 GS2MTSGetRobotList::accountid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSGetRobotList.accountID)
  return accountid_;
}
void GS2MTSGetRobotList::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2MTSGetRobotList.accountID)
}

// uint32 playerID = 3;
void GS2MTSGetRobotList::clear_playerid() {
  playerid_ = 0u;
}
::google::protobuf::uint32 GS2MTSGetRobotList::playerid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSGetRobotList.playerID)
  return playerid_;
}
void GS2MTSGetRobotList::set_playerid(::google::protobuf::uint32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2MTSGetRobotList.playerID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GS2MTSCreateRobot::kMsgHeadFieldNumber;
const int GS2MTSCreateRobot::kAccountIDFieldNumber;
const int GS2MTSCreateRobot::kPlayerIDFieldNumber;
const int GS2MTSCreateRobot::kRobotPrototypeIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GS2MTSCreateRobot::GS2MTSCreateRobot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.GS2MTSCreateRobot)
}
GS2MTSCreateRobot::GS2MTSCreateRobot(const GS2MTSCreateRobot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msghead()) {
    msghead_ = new ::NetProto::MsgHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&robotprototypeid_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(robotprototypeid_));
  // @@protoc_insertion_point(copy_constructor:NetProto.GS2MTSCreateRobot)
}

void GS2MTSCreateRobot::SharedCtor() {
  ::memset(&msghead_, 0, reinterpret_cast<char*>(&robotprototypeid_) -
    reinterpret_cast<char*>(&msghead_) + sizeof(robotprototypeid_));
  _cached_size_ = 0;
}

GS2MTSCreateRobot::~GS2MTSCreateRobot() {
  // @@protoc_insertion_point(destructor:NetProto.GS2MTSCreateRobot)
  SharedDtor();
}

void GS2MTSCreateRobot::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msghead_;
  }
}

void GS2MTSCreateRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2MTSCreateRobot::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GS2MTSCreateRobot& GS2MTSCreateRobot::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

GS2MTSCreateRobot* GS2MTSCreateRobot::New(::google::protobuf::Arena* arena) const {
  GS2MTSCreateRobot* n = new GS2MTSCreateRobot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GS2MTSCreateRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.GS2MTSCreateRobot)
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) {
    delete msghead_;
  }
  msghead_ = NULL;
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&robotprototypeid_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(robotprototypeid_));
}

bool GS2MTSCreateRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.GS2MTSCreateRobot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead msgHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 accountID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 playerID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 robotPrototypeID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robotprototypeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.GS2MTSCreateRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.GS2MTSCreateRobot)
  return false;
#undef DO_
}

void GS2MTSCreateRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.GS2MTSCreateRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  // uint32 robotPrototypeID = 4;
  if (this->robotprototypeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->robotprototypeid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.GS2MTSCreateRobot)
}

::google::protobuf::uint8* GS2MTSCreateRobot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.GS2MTSCreateRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msghead_, deterministic, target);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  // uint32 robotPrototypeID = 4;
  if (this->robotprototypeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->robotprototypeid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.GS2MTSCreateRobot)
  return target;
}

size_t GS2MTSCreateRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.GS2MTSCreateRobot)
  size_t total_size = 0;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  // uint32 robotPrototypeID = 4;
  if (this->robotprototypeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robotprototypeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2MTSCreateRobot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.GS2MTSCreateRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const GS2MTSCreateRobot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GS2MTSCreateRobot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.GS2MTSCreateRobot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.GS2MTSCreateRobot)
    MergeFrom(*source);
  }
}

void GS2MTSCreateRobot::MergeFrom(const GS2MTSCreateRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.GS2MTSCreateRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msghead()) {
    mutable_msghead()->::NetProto::MsgHead::MergeFrom(from.msghead());
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.robotprototypeid() != 0) {
    set_robotprototypeid(from.robotprototypeid());
  }
}

void GS2MTSCreateRobot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.GS2MTSCreateRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2MTSCreateRobot::CopyFrom(const GS2MTSCreateRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.GS2MTSCreateRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2MTSCreateRobot::IsInitialized() const {
  return true;
}

void GS2MTSCreateRobot::Swap(GS2MTSCreateRobot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GS2MTSCreateRobot::InternalSwap(GS2MTSCreateRobot* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(accountid_, other->accountid_);
  std::swap(playerid_, other->playerid_);
  std::swap(robotprototypeid_, other->robotprototypeid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GS2MTSCreateRobot::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GS2MTSCreateRobot

// .NetProto.MsgHead msgHead = 1;
bool GS2MTSCreateRobot::has_msghead() const {
  return this != internal_default_instance() && msghead_ != NULL;
}
void GS2MTSCreateRobot::clear_msghead() {
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) delete msghead_;
  msghead_ = NULL;
}
const ::NetProto::MsgHead& GS2MTSCreateRobot::msghead() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSCreateRobot.msgHead)
  return msghead_ != NULL ? *msghead_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* GS2MTSCreateRobot::mutable_msghead() {
  
  if (msghead_ == NULL) {
    msghead_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.GS2MTSCreateRobot.msgHead)
  return msghead_;
}
::NetProto::MsgHead* GS2MTSCreateRobot::release_msghead() {
  // @@protoc_insertion_point(field_release:NetProto.GS2MTSCreateRobot.msgHead)
  
  ::NetProto::MsgHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void GS2MTSCreateRobot::set_allocated_msghead(::NetProto::MsgHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2MTSCreateRobot.msgHead)
}

// uint32 accountID = 2;
void GS2MTSCreateRobot::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 GS2MTSCreateRobot::accountid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSCreateRobot.accountID)
  return accountid_;
}
void GS2MTSCreateRobot::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2MTSCreateRobot.accountID)
}

// uint32 playerID = 3;
void GS2MTSCreateRobot::clear_playerid() {
  playerid_ = 0u;
}
::google::protobuf::uint32 GS2MTSCreateRobot::playerid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSCreateRobot.playerID)
  return playerid_;
}
void GS2MTSCreateRobot::set_playerid(::google::protobuf::uint32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2MTSCreateRobot.playerID)
}

// uint32 robotPrototypeID = 4;
void GS2MTSCreateRobot::clear_robotprototypeid() {
  robotprototypeid_ = 0u;
}
::google::protobuf::uint32 GS2MTSCreateRobot::robotprototypeid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSCreateRobot.robotPrototypeID)
  return robotprototypeid_;
}
void GS2MTSCreateRobot::set_robotprototypeid(::google::protobuf::uint32 value) {
  
  robotprototypeid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2MTSCreateRobot.robotPrototypeID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GS2MTSGetSceneItem::kMsgHeadFieldNumber;
const int GS2MTSGetSceneItem::kAccountIDFieldNumber;
const int GS2MTSGetSceneItem::kPlayerIDFieldNumber;
const int GS2MTSGetSceneItem::kSceneTypeFieldNumber;
const int GS2MTSGetSceneItem::kSceneIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GS2MTSGetSceneItem::GS2MTSGetSceneItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.GS2MTSGetSceneItem)
}
GS2MTSGetSceneItem::GS2MTSGetSceneItem(const GS2MTSGetSceneItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sceneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sceneid().size() > 0) {
    sceneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  if (from.has_msghead()) {
    msghead_ = new ::NetProto::MsgHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&scenetype_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(scenetype_));
  // @@protoc_insertion_point(copy_constructor:NetProto.GS2MTSGetSceneItem)
}

void GS2MTSGetSceneItem::SharedCtor() {
  sceneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msghead_, 0, reinterpret_cast<char*>(&scenetype_) -
    reinterpret_cast<char*>(&msghead_) + sizeof(scenetype_));
  _cached_size_ = 0;
}

GS2MTSGetSceneItem::~GS2MTSGetSceneItem() {
  // @@protoc_insertion_point(destructor:NetProto.GS2MTSGetSceneItem)
  SharedDtor();
}

void GS2MTSGetSceneItem::SharedDtor() {
  sceneid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete msghead_;
  }
}

void GS2MTSGetSceneItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2MTSGetSceneItem::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GS2MTSGetSceneItem& GS2MTSGetSceneItem::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

GS2MTSGetSceneItem* GS2MTSGetSceneItem::New(::google::protobuf::Arena* arena) const {
  GS2MTSGetSceneItem* n = new GS2MTSGetSceneItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GS2MTSGetSceneItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.GS2MTSGetSceneItem)
  sceneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) {
    delete msghead_;
  }
  msghead_ = NULL;
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&scenetype_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(scenetype_));
}

bool GS2MTSGetSceneItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.GS2MTSGetSceneItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead msgHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 accountID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 playerID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sceneType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sceneID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sceneid().data(), this->sceneid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.GS2MTSGetSceneItem.sceneID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.GS2MTSGetSceneItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.GS2MTSGetSceneItem)
  return false;
#undef DO_
}

void GS2MTSGetSceneItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.GS2MTSGetSceneItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  // uint32 sceneType = 4;
  if (this->scenetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scenetype(), output);
  }

  // string sceneID = 5;
  if (this->sceneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2MTSGetSceneItem.sceneID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sceneid(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.GS2MTSGetSceneItem)
}

::google::protobuf::uint8* GS2MTSGetSceneItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.GS2MTSGetSceneItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msghead_, deterministic, target);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  // uint32 sceneType = 4;
  if (this->scenetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scenetype(), target);
  }

  // string sceneID = 5;
  if (this->sceneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.GS2MTSGetSceneItem.sceneID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sceneid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.GS2MTSGetSceneItem)
  return target;
}

size_t GS2MTSGetSceneItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.GS2MTSGetSceneItem)
  size_t total_size = 0;

  // string sceneID = 5;
  if (this->sceneid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sceneid());
  }

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  // uint32 sceneType = 4;
  if (this->scenetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scenetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2MTSGetSceneItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.GS2MTSGetSceneItem)
  GOOGLE_DCHECK_NE(&from, this);
  const GS2MTSGetSceneItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GS2MTSGetSceneItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.GS2MTSGetSceneItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.GS2MTSGetSceneItem)
    MergeFrom(*source);
  }
}

void GS2MTSGetSceneItem::MergeFrom(const GS2MTSGetSceneItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.GS2MTSGetSceneItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sceneid().size() > 0) {

    sceneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  if (from.has_msghead()) {
    mutable_msghead()->::NetProto::MsgHead::MergeFrom(from.msghead());
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.scenetype() != 0) {
    set_scenetype(from.scenetype());
  }
}

void GS2MTSGetSceneItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.GS2MTSGetSceneItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2MTSGetSceneItem::CopyFrom(const GS2MTSGetSceneItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.GS2MTSGetSceneItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2MTSGetSceneItem::IsInitialized() const {
  return true;
}

void GS2MTSGetSceneItem::Swap(GS2MTSGetSceneItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GS2MTSGetSceneItem::InternalSwap(GS2MTSGetSceneItem* other) {
  sceneid_.Swap(&other->sceneid_);
  std::swap(msghead_, other->msghead_);
  std::swap(accountid_, other->accountid_);
  std::swap(playerid_, other->playerid_);
  std::swap(scenetype_, other->scenetype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GS2MTSGetSceneItem::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GS2MTSGetSceneItem

// .NetProto.MsgHead msgHead = 1;
bool GS2MTSGetSceneItem::has_msghead() const {
  return this != internal_default_instance() && msghead_ != NULL;
}
void GS2MTSGetSceneItem::clear_msghead() {
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) delete msghead_;
  msghead_ = NULL;
}
const ::NetProto::MsgHead& GS2MTSGetSceneItem::msghead() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSGetSceneItem.msgHead)
  return msghead_ != NULL ? *msghead_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* GS2MTSGetSceneItem::mutable_msghead() {
  
  if (msghead_ == NULL) {
    msghead_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.GS2MTSGetSceneItem.msgHead)
  return msghead_;
}
::NetProto::MsgHead* GS2MTSGetSceneItem::release_msghead() {
  // @@protoc_insertion_point(field_release:NetProto.GS2MTSGetSceneItem.msgHead)
  
  ::NetProto::MsgHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void GS2MTSGetSceneItem::set_allocated_msghead(::NetProto::MsgHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2MTSGetSceneItem.msgHead)
}

// uint32 accountID = 2;
void GS2MTSGetSceneItem::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 GS2MTSGetSceneItem::accountid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSGetSceneItem.accountID)
  return accountid_;
}
void GS2MTSGetSceneItem::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2MTSGetSceneItem.accountID)
}

// uint32 playerID = 3;
void GS2MTSGetSceneItem::clear_playerid() {
  playerid_ = 0u;
}
::google::protobuf::uint32 GS2MTSGetSceneItem::playerid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSGetSceneItem.playerID)
  return playerid_;
}
void GS2MTSGetSceneItem::set_playerid(::google::protobuf::uint32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2MTSGetSceneItem.playerID)
}

// uint32 sceneType = 4;
void GS2MTSGetSceneItem::clear_scenetype() {
  scenetype_ = 0u;
}
::google::protobuf::uint32 GS2MTSGetSceneItem::scenetype() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSGetSceneItem.sceneType)
  return scenetype_;
}
void GS2MTSGetSceneItem::set_scenetype(::google::protobuf::uint32 value) {
  
  scenetype_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2MTSGetSceneItem.sceneType)
}

// string sceneID = 5;
void GS2MTSGetSceneItem::clear_sceneid() {
  sceneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GS2MTSGetSceneItem::sceneid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSGetSceneItem.sceneID)
  return sceneid_.GetNoArena();
}
void GS2MTSGetSceneItem::set_sceneid(const ::std::string& value) {
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.GS2MTSGetSceneItem.sceneID)
}
#if LANG_CXX11
void GS2MTSGetSceneItem::set_sceneid(::std::string&& value) {
  
  sceneid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.GS2MTSGetSceneItem.sceneID)
}
#endif
void GS2MTSGetSceneItem::set_sceneid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.GS2MTSGetSceneItem.sceneID)
}
void GS2MTSGetSceneItem::set_sceneid(const char* value, size_t size) {
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.GS2MTSGetSceneItem.sceneID)
}
::std::string* GS2MTSGetSceneItem::mutable_sceneid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.GS2MTSGetSceneItem.sceneID)
  return sceneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GS2MTSGetSceneItem::release_sceneid() {
  // @@protoc_insertion_point(field_release:NetProto.GS2MTSGetSceneItem.sceneID)
  
  return sceneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GS2MTSGetSceneItem::set_allocated_sceneid(::std::string* sceneid) {
  if (sceneid != NULL) {
    
  } else {
    
  }
  sceneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sceneid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2MTSGetSceneItem.sceneID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GS2MTSCreateScene::kMsgHeadFieldNumber;
const int GS2MTSCreateScene::kAccountIDFieldNumber;
const int GS2MTSCreateScene::kPlayerIDFieldNumber;
const int GS2MTSCreateScene::kSceneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GS2MTSCreateScene::GS2MTSCreateScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.GS2MTSCreateScene)
}
GS2MTSCreateScene::GS2MTSCreateScene(const GS2MTSCreateScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msghead()) {
    msghead_ = new ::NetProto::MsgHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&scenetype_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(scenetype_));
  // @@protoc_insertion_point(copy_constructor:NetProto.GS2MTSCreateScene)
}

void GS2MTSCreateScene::SharedCtor() {
  ::memset(&msghead_, 0, reinterpret_cast<char*>(&scenetype_) -
    reinterpret_cast<char*>(&msghead_) + sizeof(scenetype_));
  _cached_size_ = 0;
}

GS2MTSCreateScene::~GS2MTSCreateScene() {
  // @@protoc_insertion_point(destructor:NetProto.GS2MTSCreateScene)
  SharedDtor();
}

void GS2MTSCreateScene::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msghead_;
  }
}

void GS2MTSCreateScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2MTSCreateScene::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GS2MTSCreateScene& GS2MTSCreateScene::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

GS2MTSCreateScene* GS2MTSCreateScene::New(::google::protobuf::Arena* arena) const {
  GS2MTSCreateScene* n = new GS2MTSCreateScene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GS2MTSCreateScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.GS2MTSCreateScene)
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) {
    delete msghead_;
  }
  msghead_ = NULL;
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&scenetype_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(scenetype_));
}

bool GS2MTSCreateScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.GS2MTSCreateScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead msgHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 accountID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 playerID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sceneType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.GS2MTSCreateScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.GS2MTSCreateScene)
  return false;
#undef DO_
}

void GS2MTSCreateScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.GS2MTSCreateScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  // uint32 sceneType = 4;
  if (this->scenetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scenetype(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.GS2MTSCreateScene)
}

::google::protobuf::uint8* GS2MTSCreateScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.GS2MTSCreateScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msghead_, deterministic, target);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  // uint32 sceneType = 4;
  if (this->scenetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scenetype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.GS2MTSCreateScene)
  return target;
}

size_t GS2MTSCreateScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.GS2MTSCreateScene)
  size_t total_size = 0;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  // uint32 sceneType = 4;
  if (this->scenetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scenetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2MTSCreateScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.GS2MTSCreateScene)
  GOOGLE_DCHECK_NE(&from, this);
  const GS2MTSCreateScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GS2MTSCreateScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.GS2MTSCreateScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.GS2MTSCreateScene)
    MergeFrom(*source);
  }
}

void GS2MTSCreateScene::MergeFrom(const GS2MTSCreateScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.GS2MTSCreateScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msghead()) {
    mutable_msghead()->::NetProto::MsgHead::MergeFrom(from.msghead());
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.scenetype() != 0) {
    set_scenetype(from.scenetype());
  }
}

void GS2MTSCreateScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.GS2MTSCreateScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2MTSCreateScene::CopyFrom(const GS2MTSCreateScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.GS2MTSCreateScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2MTSCreateScene::IsInitialized() const {
  return true;
}

void GS2MTSCreateScene::Swap(GS2MTSCreateScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GS2MTSCreateScene::InternalSwap(GS2MTSCreateScene* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(accountid_, other->accountid_);
  std::swap(playerid_, other->playerid_);
  std::swap(scenetype_, other->scenetype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GS2MTSCreateScene::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GS2MTSCreateScene

// .NetProto.MsgHead msgHead = 1;
bool GS2MTSCreateScene::has_msghead() const {
  return this != internal_default_instance() && msghead_ != NULL;
}
void GS2MTSCreateScene::clear_msghead() {
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) delete msghead_;
  msghead_ = NULL;
}
const ::NetProto::MsgHead& GS2MTSCreateScene::msghead() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSCreateScene.msgHead)
  return msghead_ != NULL ? *msghead_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* GS2MTSCreateScene::mutable_msghead() {
  
  if (msghead_ == NULL) {
    msghead_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.GS2MTSCreateScene.msgHead)
  return msghead_;
}
::NetProto::MsgHead* GS2MTSCreateScene::release_msghead() {
  // @@protoc_insertion_point(field_release:NetProto.GS2MTSCreateScene.msgHead)
  
  ::NetProto::MsgHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void GS2MTSCreateScene::set_allocated_msghead(::NetProto::MsgHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.GS2MTSCreateScene.msgHead)
}

// uint32 accountID = 2;
void GS2MTSCreateScene::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 GS2MTSCreateScene::accountid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSCreateScene.accountID)
  return accountid_;
}
void GS2MTSCreateScene::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2MTSCreateScene.accountID)
}

// uint32 playerID = 3;
void GS2MTSCreateScene::clear_playerid() {
  playerid_ = 0u;
}
::google::protobuf::uint32 GS2MTSCreateScene::playerid() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSCreateScene.playerID)
  return playerid_;
}
void GS2MTSCreateScene::set_playerid(::google::protobuf::uint32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2MTSCreateScene.playerID)
}

// uint32 sceneType = 4;
void GS2MTSCreateScene::clear_scenetype() {
  scenetype_ = 0u;
}
::google::protobuf::uint32 GS2MTSCreateScene::scenetype() const {
  // @@protoc_insertion_point(field_get:NetProto.GS2MTSCreateScene.sceneType)
  return scenetype_;
}
void GS2MTSCreateScene::set_scenetype(::google::protobuf::uint32 value) {
  
  scenetype_ = value;
  // @@protoc_insertion_point(field_set:NetProto.GS2MTSCreateScene.sceneType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MTS2GSGetRobotList::kMsgHeadFieldNumber;
const int MTS2GSGetRobotList::kAccountIDFieldNumber;
const int MTS2GSGetRobotList::kPlayerIDFieldNumber;
const int MTS2GSGetRobotList::kRobotFlagFieldNumber;
const int MTS2GSGetRobotList::kRobotListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MTS2GSGetRobotList::MTS2GSGetRobotList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.MTS2GSGetRobotList)
}
MTS2GSGetRobotList::MTS2GSGetRobotList(const MTS2GSGetRobotList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      robotlist_(from.robotlist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msghead()) {
    msghead_ = new ::NetProto::MsgHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&robotflag_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(robotflag_));
  // @@protoc_insertion_point(copy_constructor:NetProto.MTS2GSGetRobotList)
}

void MTS2GSGetRobotList::SharedCtor() {
  ::memset(&msghead_, 0, reinterpret_cast<char*>(&robotflag_) -
    reinterpret_cast<char*>(&msghead_) + sizeof(robotflag_));
  _cached_size_ = 0;
}

MTS2GSGetRobotList::~MTS2GSGetRobotList() {
  // @@protoc_insertion_point(destructor:NetProto.MTS2GSGetRobotList)
  SharedDtor();
}

void MTS2GSGetRobotList::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msghead_;
  }
}

void MTS2GSGetRobotList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS2GSGetRobotList::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MTS2GSGetRobotList& MTS2GSGetRobotList::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

MTS2GSGetRobotList* MTS2GSGetRobotList::New(::google::protobuf::Arena* arena) const {
  MTS2GSGetRobotList* n = new MTS2GSGetRobotList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MTS2GSGetRobotList::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.MTS2GSGetRobotList)
  robotlist_.Clear();
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) {
    delete msghead_;
  }
  msghead_ = NULL;
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&robotflag_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(robotflag_));
}

bool MTS2GSGetRobotList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.MTS2GSGetRobotList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead msgHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 accountID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 playerID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 robotFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robotflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.CreateRobotInfo robotList = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robotlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.MTS2GSGetRobotList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.MTS2GSGetRobotList)
  return false;
#undef DO_
}

void MTS2GSGetRobotList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.MTS2GSGetRobotList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  // uint32 robotFlag = 4;
  if (this->robotflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->robotflag(), output);
  }

  // repeated .NetProto.CreateRobotInfo robotList = 5;
  for (unsigned int i = 0, n = this->robotlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->robotlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.MTS2GSGetRobotList)
}

::google::protobuf::uint8* MTS2GSGetRobotList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.MTS2GSGetRobotList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msghead_, deterministic, target);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  // uint32 robotFlag = 4;
  if (this->robotflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->robotflag(), target);
  }

  // repeated .NetProto.CreateRobotInfo robotList = 5;
  for (unsigned int i = 0, n = this->robotlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->robotlist(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.MTS2GSGetRobotList)
  return target;
}

size_t MTS2GSGetRobotList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.MTS2GSGetRobotList)
  size_t total_size = 0;

  // repeated .NetProto.CreateRobotInfo robotList = 5;
  {
    unsigned int count = this->robotlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robotlist(i));
    }
  }

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  // uint32 robotFlag = 4;
  if (this->robotflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robotflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS2GSGetRobotList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.MTS2GSGetRobotList)
  GOOGLE_DCHECK_NE(&from, this);
  const MTS2GSGetRobotList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MTS2GSGetRobotList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.MTS2GSGetRobotList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.MTS2GSGetRobotList)
    MergeFrom(*source);
  }
}

void MTS2GSGetRobotList::MergeFrom(const MTS2GSGetRobotList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.MTS2GSGetRobotList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robotlist_.MergeFrom(from.robotlist_);
  if (from.has_msghead()) {
    mutable_msghead()->::NetProto::MsgHead::MergeFrom(from.msghead());
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.robotflag() != 0) {
    set_robotflag(from.robotflag());
  }
}

void MTS2GSGetRobotList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.MTS2GSGetRobotList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS2GSGetRobotList::CopyFrom(const MTS2GSGetRobotList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.MTS2GSGetRobotList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS2GSGetRobotList::IsInitialized() const {
  return true;
}

void MTS2GSGetRobotList::Swap(MTS2GSGetRobotList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MTS2GSGetRobotList::InternalSwap(MTS2GSGetRobotList* other) {
  robotlist_.InternalSwap(&other->robotlist_);
  std::swap(msghead_, other->msghead_);
  std::swap(accountid_, other->accountid_);
  std::swap(playerid_, other->playerid_);
  std::swap(robotflag_, other->robotflag_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MTS2GSGetRobotList::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MTS2GSGetRobotList

// .NetProto.MsgHead msgHead = 1;
bool MTS2GSGetRobotList::has_msghead() const {
  return this != internal_default_instance() && msghead_ != NULL;
}
void MTS2GSGetRobotList::clear_msghead() {
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) delete msghead_;
  msghead_ = NULL;
}
const ::NetProto::MsgHead& MTS2GSGetRobotList::msghead() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSGetRobotList.msgHead)
  return msghead_ != NULL ? *msghead_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* MTS2GSGetRobotList::mutable_msghead() {
  
  if (msghead_ == NULL) {
    msghead_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.MTS2GSGetRobotList.msgHead)
  return msghead_;
}
::NetProto::MsgHead* MTS2GSGetRobotList::release_msghead() {
  // @@protoc_insertion_point(field_release:NetProto.MTS2GSGetRobotList.msgHead)
  
  ::NetProto::MsgHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void MTS2GSGetRobotList::set_allocated_msghead(::NetProto::MsgHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.MTS2GSGetRobotList.msgHead)
}

// uint32 accountID = 2;
void MTS2GSGetRobotList::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 MTS2GSGetRobotList::accountid() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSGetRobotList.accountID)
  return accountid_;
}
void MTS2GSGetRobotList::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MTS2GSGetRobotList.accountID)
}

// uint32 playerID = 3;
void MTS2GSGetRobotList::clear_playerid() {
  playerid_ = 0u;
}
::google::protobuf::uint32 MTS2GSGetRobotList::playerid() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSGetRobotList.playerID)
  return playerid_;
}
void MTS2GSGetRobotList::set_playerid(::google::protobuf::uint32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MTS2GSGetRobotList.playerID)
}

// uint32 robotFlag = 4;
void MTS2GSGetRobotList::clear_robotflag() {
  robotflag_ = 0u;
}
::google::protobuf::uint32 MTS2GSGetRobotList::robotflag() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSGetRobotList.robotFlag)
  return robotflag_;
}
void MTS2GSGetRobotList::set_robotflag(::google::protobuf::uint32 value) {
  
  robotflag_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MTS2GSGetRobotList.robotFlag)
}

// repeated .NetProto.CreateRobotInfo robotList = 5;
int MTS2GSGetRobotList::robotlist_size() const {
  return robotlist_.size();
}
void MTS2GSGetRobotList::clear_robotlist() {
  robotlist_.Clear();
}
const ::NetProto::CreateRobotInfo& MTS2GSGetRobotList::robotlist(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSGetRobotList.robotList)
  return robotlist_.Get(index);
}
::NetProto::CreateRobotInfo* MTS2GSGetRobotList::mutable_robotlist(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.MTS2GSGetRobotList.robotList)
  return robotlist_.Mutable(index);
}
::NetProto::CreateRobotInfo* MTS2GSGetRobotList::add_robotlist() {
  // @@protoc_insertion_point(field_add:NetProto.MTS2GSGetRobotList.robotList)
  return robotlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::CreateRobotInfo >*
MTS2GSGetRobotList::mutable_robotlist() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.MTS2GSGetRobotList.robotList)
  return &robotlist_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::CreateRobotInfo >&
MTS2GSGetRobotList::robotlist() const {
  // @@protoc_insertion_point(field_list:NetProto.MTS2GSGetRobotList.robotList)
  return robotlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MTS2GSCreateRobot::kMsgHeadFieldNumber;
const int MTS2GSCreateRobot::kAccountIDFieldNumber;
const int MTS2GSCreateRobot::kPlayerIDFieldNumber;
const int MTS2GSCreateRobot::kRobotListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MTS2GSCreateRobot::MTS2GSCreateRobot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.MTS2GSCreateRobot)
}
MTS2GSCreateRobot::MTS2GSCreateRobot(const MTS2GSCreateRobot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      robotlist_(from.robotlist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msghead()) {
    msghead_ = new ::NetProto::MsgHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:NetProto.MTS2GSCreateRobot)
}

void MTS2GSCreateRobot::SharedCtor() {
  ::memset(&msghead_, 0, reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&msghead_) + sizeof(playerid_));
  _cached_size_ = 0;
}

MTS2GSCreateRobot::~MTS2GSCreateRobot() {
  // @@protoc_insertion_point(destructor:NetProto.MTS2GSCreateRobot)
  SharedDtor();
}

void MTS2GSCreateRobot::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msghead_;
  }
}

void MTS2GSCreateRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS2GSCreateRobot::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MTS2GSCreateRobot& MTS2GSCreateRobot::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

MTS2GSCreateRobot* MTS2GSCreateRobot::New(::google::protobuf::Arena* arena) const {
  MTS2GSCreateRobot* n = new MTS2GSCreateRobot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MTS2GSCreateRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.MTS2GSCreateRobot)
  robotlist_.Clear();
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) {
    delete msghead_;
  }
  msghead_ = NULL;
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(playerid_));
}

bool MTS2GSCreateRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.MTS2GSCreateRobot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead msgHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 accountID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 playerID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.CreateRobotInfo robotList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robotlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.MTS2GSCreateRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.MTS2GSCreateRobot)
  return false;
#undef DO_
}

void MTS2GSCreateRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.MTS2GSCreateRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  // repeated .NetProto.CreateRobotInfo robotList = 4;
  for (unsigned int i = 0, n = this->robotlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->robotlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.MTS2GSCreateRobot)
}

::google::protobuf::uint8* MTS2GSCreateRobot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.MTS2GSCreateRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msghead_, deterministic, target);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  // repeated .NetProto.CreateRobotInfo robotList = 4;
  for (unsigned int i = 0, n = this->robotlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->robotlist(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.MTS2GSCreateRobot)
  return target;
}

size_t MTS2GSCreateRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.MTS2GSCreateRobot)
  size_t total_size = 0;

  // repeated .NetProto.CreateRobotInfo robotList = 4;
  {
    unsigned int count = this->robotlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robotlist(i));
    }
  }

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS2GSCreateRobot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.MTS2GSCreateRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const MTS2GSCreateRobot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MTS2GSCreateRobot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.MTS2GSCreateRobot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.MTS2GSCreateRobot)
    MergeFrom(*source);
  }
}

void MTS2GSCreateRobot::MergeFrom(const MTS2GSCreateRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.MTS2GSCreateRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robotlist_.MergeFrom(from.robotlist_);
  if (from.has_msghead()) {
    mutable_msghead()->::NetProto::MsgHead::MergeFrom(from.msghead());
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void MTS2GSCreateRobot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.MTS2GSCreateRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS2GSCreateRobot::CopyFrom(const MTS2GSCreateRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.MTS2GSCreateRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS2GSCreateRobot::IsInitialized() const {
  return true;
}

void MTS2GSCreateRobot::Swap(MTS2GSCreateRobot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MTS2GSCreateRobot::InternalSwap(MTS2GSCreateRobot* other) {
  robotlist_.InternalSwap(&other->robotlist_);
  std::swap(msghead_, other->msghead_);
  std::swap(accountid_, other->accountid_);
  std::swap(playerid_, other->playerid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MTS2GSCreateRobot::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MTS2GSCreateRobot

// .NetProto.MsgHead msgHead = 1;
bool MTS2GSCreateRobot::has_msghead() const {
  return this != internal_default_instance() && msghead_ != NULL;
}
void MTS2GSCreateRobot::clear_msghead() {
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) delete msghead_;
  msghead_ = NULL;
}
const ::NetProto::MsgHead& MTS2GSCreateRobot::msghead() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSCreateRobot.msgHead)
  return msghead_ != NULL ? *msghead_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* MTS2GSCreateRobot::mutable_msghead() {
  
  if (msghead_ == NULL) {
    msghead_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.MTS2GSCreateRobot.msgHead)
  return msghead_;
}
::NetProto::MsgHead* MTS2GSCreateRobot::release_msghead() {
  // @@protoc_insertion_point(field_release:NetProto.MTS2GSCreateRobot.msgHead)
  
  ::NetProto::MsgHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void MTS2GSCreateRobot::set_allocated_msghead(::NetProto::MsgHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.MTS2GSCreateRobot.msgHead)
}

// uint32 accountID = 2;
void MTS2GSCreateRobot::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 MTS2GSCreateRobot::accountid() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSCreateRobot.accountID)
  return accountid_;
}
void MTS2GSCreateRobot::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MTS2GSCreateRobot.accountID)
}

// uint32 playerID = 3;
void MTS2GSCreateRobot::clear_playerid() {
  playerid_ = 0u;
}
::google::protobuf::uint32 MTS2GSCreateRobot::playerid() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSCreateRobot.playerID)
  return playerid_;
}
void MTS2GSCreateRobot::set_playerid(::google::protobuf::uint32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MTS2GSCreateRobot.playerID)
}

// repeated .NetProto.CreateRobotInfo robotList = 4;
int MTS2GSCreateRobot::robotlist_size() const {
  return robotlist_.size();
}
void MTS2GSCreateRobot::clear_robotlist() {
  robotlist_.Clear();
}
const ::NetProto::CreateRobotInfo& MTS2GSCreateRobot::robotlist(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSCreateRobot.robotList)
  return robotlist_.Get(index);
}
::NetProto::CreateRobotInfo* MTS2GSCreateRobot::mutable_robotlist(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.MTS2GSCreateRobot.robotList)
  return robotlist_.Mutable(index);
}
::NetProto::CreateRobotInfo* MTS2GSCreateRobot::add_robotlist() {
  // @@protoc_insertion_point(field_add:NetProto.MTS2GSCreateRobot.robotList)
  return robotlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::CreateRobotInfo >*
MTS2GSCreateRobot::mutable_robotlist() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.MTS2GSCreateRobot.robotList)
  return &robotlist_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::CreateRobotInfo >&
MTS2GSCreateRobot::robotlist() const {
  // @@protoc_insertion_point(field_list:NetProto.MTS2GSCreateRobot.robotList)
  return robotlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MTS2GSGetSceneItem::kMsgHeadFieldNumber;
const int MTS2GSGetSceneItem::kAccountIDFieldNumber;
const int MTS2GSGetSceneItem::kPlayerIDFieldNumber;
const int MTS2GSGetSceneItem::kSceneIDFieldNumber;
const int MTS2GSGetSceneItem::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MTS2GSGetSceneItem::MTS2GSGetSceneItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.MTS2GSGetSceneItem)
}
MTS2GSGetSceneItem::MTS2GSGetSceneItem(const MTS2GSGetSceneItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      itemlist_(from.itemlist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sceneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sceneid().size() > 0) {
    sceneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  if (from.has_msghead()) {
    msghead_ = new ::NetProto::MsgHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:NetProto.MTS2GSGetSceneItem)
}

void MTS2GSGetSceneItem::SharedCtor() {
  sceneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msghead_, 0, reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&msghead_) + sizeof(playerid_));
  _cached_size_ = 0;
}

MTS2GSGetSceneItem::~MTS2GSGetSceneItem() {
  // @@protoc_insertion_point(destructor:NetProto.MTS2GSGetSceneItem)
  SharedDtor();
}

void MTS2GSGetSceneItem::SharedDtor() {
  sceneid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete msghead_;
  }
}

void MTS2GSGetSceneItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS2GSGetSceneItem::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MTS2GSGetSceneItem& MTS2GSGetSceneItem::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

MTS2GSGetSceneItem* MTS2GSGetSceneItem::New(::google::protobuf::Arena* arena) const {
  MTS2GSGetSceneItem* n = new MTS2GSGetSceneItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MTS2GSGetSceneItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.MTS2GSGetSceneItem)
  itemlist_.Clear();
  sceneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) {
    delete msghead_;
  }
  msghead_ = NULL;
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(playerid_));
}

bool MTS2GSGetSceneItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.MTS2GSGetSceneItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead msgHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 accountID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 playerID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sceneID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sceneid().data(), this->sceneid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.MTS2GSGetSceneItem.sceneID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.CreateSceneItem itemList = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.MTS2GSGetSceneItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.MTS2GSGetSceneItem)
  return false;
#undef DO_
}

void MTS2GSGetSceneItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.MTS2GSGetSceneItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  // string sceneID = 4;
  if (this->sceneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.MTS2GSGetSceneItem.sceneID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sceneid(), output);
  }

  // repeated .NetProto.CreateSceneItem itemList = 5;
  for (unsigned int i = 0, n = this->itemlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->itemlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.MTS2GSGetSceneItem)
}

::google::protobuf::uint8* MTS2GSGetSceneItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.MTS2GSGetSceneItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msghead_, deterministic, target);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  // string sceneID = 4;
  if (this->sceneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.MTS2GSGetSceneItem.sceneID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sceneid(), target);
  }

  // repeated .NetProto.CreateSceneItem itemList = 5;
  for (unsigned int i = 0, n = this->itemlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->itemlist(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.MTS2GSGetSceneItem)
  return target;
}

size_t MTS2GSGetSceneItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.MTS2GSGetSceneItem)
  size_t total_size = 0;

  // repeated .NetProto.CreateSceneItem itemList = 5;
  {
    unsigned int count = this->itemlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemlist(i));
    }
  }

  // string sceneID = 4;
  if (this->sceneid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sceneid());
  }

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS2GSGetSceneItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.MTS2GSGetSceneItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MTS2GSGetSceneItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MTS2GSGetSceneItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.MTS2GSGetSceneItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.MTS2GSGetSceneItem)
    MergeFrom(*source);
  }
}

void MTS2GSGetSceneItem::MergeFrom(const MTS2GSGetSceneItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.MTS2GSGetSceneItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemlist_.MergeFrom(from.itemlist_);
  if (from.sceneid().size() > 0) {

    sceneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  if (from.has_msghead()) {
    mutable_msghead()->::NetProto::MsgHead::MergeFrom(from.msghead());
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void MTS2GSGetSceneItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.MTS2GSGetSceneItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS2GSGetSceneItem::CopyFrom(const MTS2GSGetSceneItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.MTS2GSGetSceneItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS2GSGetSceneItem::IsInitialized() const {
  return true;
}

void MTS2GSGetSceneItem::Swap(MTS2GSGetSceneItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MTS2GSGetSceneItem::InternalSwap(MTS2GSGetSceneItem* other) {
  itemlist_.InternalSwap(&other->itemlist_);
  sceneid_.Swap(&other->sceneid_);
  std::swap(msghead_, other->msghead_);
  std::swap(accountid_, other->accountid_);
  std::swap(playerid_, other->playerid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MTS2GSGetSceneItem::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MTS2GSGetSceneItem

// .NetProto.MsgHead msgHead = 1;
bool MTS2GSGetSceneItem::has_msghead() const {
  return this != internal_default_instance() && msghead_ != NULL;
}
void MTS2GSGetSceneItem::clear_msghead() {
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) delete msghead_;
  msghead_ = NULL;
}
const ::NetProto::MsgHead& MTS2GSGetSceneItem::msghead() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSGetSceneItem.msgHead)
  return msghead_ != NULL ? *msghead_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* MTS2GSGetSceneItem::mutable_msghead() {
  
  if (msghead_ == NULL) {
    msghead_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.MTS2GSGetSceneItem.msgHead)
  return msghead_;
}
::NetProto::MsgHead* MTS2GSGetSceneItem::release_msghead() {
  // @@protoc_insertion_point(field_release:NetProto.MTS2GSGetSceneItem.msgHead)
  
  ::NetProto::MsgHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void MTS2GSGetSceneItem::set_allocated_msghead(::NetProto::MsgHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.MTS2GSGetSceneItem.msgHead)
}

// uint32 accountID = 2;
void MTS2GSGetSceneItem::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 MTS2GSGetSceneItem::accountid() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSGetSceneItem.accountID)
  return accountid_;
}
void MTS2GSGetSceneItem::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MTS2GSGetSceneItem.accountID)
}

// uint32 playerID = 3;
void MTS2GSGetSceneItem::clear_playerid() {
  playerid_ = 0u;
}
::google::protobuf::uint32 MTS2GSGetSceneItem::playerid() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSGetSceneItem.playerID)
  return playerid_;
}
void MTS2GSGetSceneItem::set_playerid(::google::protobuf::uint32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MTS2GSGetSceneItem.playerID)
}

// string sceneID = 4;
void MTS2GSGetSceneItem::clear_sceneid() {
  sceneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MTS2GSGetSceneItem::sceneid() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSGetSceneItem.sceneID)
  return sceneid_.GetNoArena();
}
void MTS2GSGetSceneItem::set_sceneid(const ::std::string& value) {
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.MTS2GSGetSceneItem.sceneID)
}
#if LANG_CXX11
void MTS2GSGetSceneItem::set_sceneid(::std::string&& value) {
  
  sceneid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.MTS2GSGetSceneItem.sceneID)
}
#endif
void MTS2GSGetSceneItem::set_sceneid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.MTS2GSGetSceneItem.sceneID)
}
void MTS2GSGetSceneItem::set_sceneid(const char* value, size_t size) {
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.MTS2GSGetSceneItem.sceneID)
}
::std::string* MTS2GSGetSceneItem::mutable_sceneid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.MTS2GSGetSceneItem.sceneID)
  return sceneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MTS2GSGetSceneItem::release_sceneid() {
  // @@protoc_insertion_point(field_release:NetProto.MTS2GSGetSceneItem.sceneID)
  
  return sceneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MTS2GSGetSceneItem::set_allocated_sceneid(::std::string* sceneid) {
  if (sceneid != NULL) {
    
  } else {
    
  }
  sceneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sceneid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.MTS2GSGetSceneItem.sceneID)
}

// repeated .NetProto.CreateSceneItem itemList = 5;
int MTS2GSGetSceneItem::itemlist_size() const {
  return itemlist_.size();
}
void MTS2GSGetSceneItem::clear_itemlist() {
  itemlist_.Clear();
}
const ::NetProto::CreateSceneItem& MTS2GSGetSceneItem::itemlist(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSGetSceneItem.itemList)
  return itemlist_.Get(index);
}
::NetProto::CreateSceneItem* MTS2GSGetSceneItem::mutable_itemlist(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.MTS2GSGetSceneItem.itemList)
  return itemlist_.Mutable(index);
}
::NetProto::CreateSceneItem* MTS2GSGetSceneItem::add_itemlist() {
  // @@protoc_insertion_point(field_add:NetProto.MTS2GSGetSceneItem.itemList)
  return itemlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::CreateSceneItem >*
MTS2GSGetSceneItem::mutable_itemlist() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.MTS2GSGetSceneItem.itemList)
  return &itemlist_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::CreateSceneItem >&
MTS2GSGetSceneItem::itemlist() const {
  // @@protoc_insertion_point(field_list:NetProto.MTS2GSGetSceneItem.itemList)
  return itemlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MTS2GSCreateScene::kMsgHeadFieldNumber;
const int MTS2GSCreateScene::kAccountIDFieldNumber;
const int MTS2GSCreateScene::kPlayerIDFieldNumber;
const int MTS2GSCreateScene::kSceneIDFieldNumber;
const int MTS2GSCreateScene::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MTS2GSCreateScene::MTS2GSCreateScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.MTS2GSCreateScene)
}
MTS2GSCreateScene::MTS2GSCreateScene(const MTS2GSCreateScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      itemlist_(from.itemlist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sceneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sceneid().size() > 0) {
    sceneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  if (from.has_msghead()) {
    msghead_ = new ::NetProto::MsgHead(*from.msghead_);
  } else {
    msghead_ = NULL;
  }
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:NetProto.MTS2GSCreateScene)
}

void MTS2GSCreateScene::SharedCtor() {
  sceneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msghead_, 0, reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&msghead_) + sizeof(playerid_));
  _cached_size_ = 0;
}

MTS2GSCreateScene::~MTS2GSCreateScene() {
  // @@protoc_insertion_point(destructor:NetProto.MTS2GSCreateScene)
  SharedDtor();
}

void MTS2GSCreateScene::SharedDtor() {
  sceneid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete msghead_;
  }
}

void MTS2GSCreateScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTS2GSCreateScene::descriptor() {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MTS2GSCreateScene& MTS2GSCreateScene::default_instance() {
  protobuf_Protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

MTS2GSCreateScene* MTS2GSCreateScene::New(::google::protobuf::Arena* arena) const {
  MTS2GSCreateScene* n = new MTS2GSCreateScene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MTS2GSCreateScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.MTS2GSCreateScene)
  itemlist_.Clear();
  sceneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) {
    delete msghead_;
  }
  msghead_ = NULL;
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(playerid_));
}

bool MTS2GSCreateScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.MTS2GSCreateScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead msgHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 accountID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 playerID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sceneID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sceneid().data(), this->sceneid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.MTS2GSCreateScene.sceneID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.CreateSceneItem itemList = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.MTS2GSCreateScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.MTS2GSCreateScene)
  return false;
#undef DO_
}

void MTS2GSCreateScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.MTS2GSCreateScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msghead_, output);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  // string sceneID = 4;
  if (this->sceneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.MTS2GSCreateScene.sceneID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sceneid(), output);
  }

  // repeated .NetProto.CreateSceneItem itemList = 5;
  for (unsigned int i = 0, n = this->itemlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->itemlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.MTS2GSCreateScene)
}

::google::protobuf::uint8* MTS2GSCreateScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.MTS2GSCreateScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msghead_, deterministic, target);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  // string sceneID = 4;
  if (this->sceneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.MTS2GSCreateScene.sceneID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sceneid(), target);
  }

  // repeated .NetProto.CreateSceneItem itemList = 5;
  for (unsigned int i = 0, n = this->itemlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->itemlist(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.MTS2GSCreateScene)
  return target;
}

size_t MTS2GSCreateScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.MTS2GSCreateScene)
  size_t total_size = 0;

  // repeated .NetProto.CreateSceneItem itemList = 5;
  {
    unsigned int count = this->itemlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemlist(i));
    }
  }

  // string sceneID = 4;
  if (this->sceneid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sceneid());
  }

  // .NetProto.MsgHead msgHead = 1;
  if (this->has_msghead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  // uint32 accountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // uint32 playerID = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTS2GSCreateScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.MTS2GSCreateScene)
  GOOGLE_DCHECK_NE(&from, this);
  const MTS2GSCreateScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MTS2GSCreateScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.MTS2GSCreateScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.MTS2GSCreateScene)
    MergeFrom(*source);
  }
}

void MTS2GSCreateScene::MergeFrom(const MTS2GSCreateScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.MTS2GSCreateScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemlist_.MergeFrom(from.itemlist_);
  if (from.sceneid().size() > 0) {

    sceneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  if (from.has_msghead()) {
    mutable_msghead()->::NetProto::MsgHead::MergeFrom(from.msghead());
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void MTS2GSCreateScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.MTS2GSCreateScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTS2GSCreateScene::CopyFrom(const MTS2GSCreateScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.MTS2GSCreateScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTS2GSCreateScene::IsInitialized() const {
  return true;
}

void MTS2GSCreateScene::Swap(MTS2GSCreateScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MTS2GSCreateScene::InternalSwap(MTS2GSCreateScene* other) {
  itemlist_.InternalSwap(&other->itemlist_);
  sceneid_.Swap(&other->sceneid_);
  std::swap(msghead_, other->msghead_);
  std::swap(accountid_, other->accountid_);
  std::swap(playerid_, other->playerid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MTS2GSCreateScene::GetMetadata() const {
  protobuf_Protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MTS2GSCreateScene

// .NetProto.MsgHead msgHead = 1;
bool MTS2GSCreateScene::has_msghead() const {
  return this != internal_default_instance() && msghead_ != NULL;
}
void MTS2GSCreateScene::clear_msghead() {
  if (GetArenaNoVirtual() == NULL && msghead_ != NULL) delete msghead_;
  msghead_ = NULL;
}
const ::NetProto::MsgHead& MTS2GSCreateScene::msghead() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSCreateScene.msgHead)
  return msghead_ != NULL ? *msghead_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* MTS2GSCreateScene::mutable_msghead() {
  
  if (msghead_ == NULL) {
    msghead_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.MTS2GSCreateScene.msgHead)
  return msghead_;
}
::NetProto::MsgHead* MTS2GSCreateScene::release_msghead() {
  // @@protoc_insertion_point(field_release:NetProto.MTS2GSCreateScene.msgHead)
  
  ::NetProto::MsgHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void MTS2GSCreateScene::set_allocated_msghead(::NetProto::MsgHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.MTS2GSCreateScene.msgHead)
}

// uint32 accountID = 2;
void MTS2GSCreateScene::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 MTS2GSCreateScene::accountid() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSCreateScene.accountID)
  return accountid_;
}
void MTS2GSCreateScene::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MTS2GSCreateScene.accountID)
}

// uint32 playerID = 3;
void MTS2GSCreateScene::clear_playerid() {
  playerid_ = 0u;
}
::google::protobuf::uint32 MTS2GSCreateScene::playerid() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSCreateScene.playerID)
  return playerid_;
}
void MTS2GSCreateScene::set_playerid(::google::protobuf::uint32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MTS2GSCreateScene.playerID)
}

// string sceneID = 4;
void MTS2GSCreateScene::clear_sceneid() {
  sceneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MTS2GSCreateScene::sceneid() const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSCreateScene.sceneID)
  return sceneid_.GetNoArena();
}
void MTS2GSCreateScene::set_sceneid(const ::std::string& value) {
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.MTS2GSCreateScene.sceneID)
}
#if LANG_CXX11
void MTS2GSCreateScene::set_sceneid(::std::string&& value) {
  
  sceneid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.MTS2GSCreateScene.sceneID)
}
#endif
void MTS2GSCreateScene::set_sceneid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.MTS2GSCreateScene.sceneID)
}
void MTS2GSCreateScene::set_sceneid(const char* value, size_t size) {
  
  sceneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.MTS2GSCreateScene.sceneID)
}
::std::string* MTS2GSCreateScene::mutable_sceneid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.MTS2GSCreateScene.sceneID)
  return sceneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MTS2GSCreateScene::release_sceneid() {
  // @@protoc_insertion_point(field_release:NetProto.MTS2GSCreateScene.sceneID)
  
  return sceneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MTS2GSCreateScene::set_allocated_sceneid(::std::string* sceneid) {
  if (sceneid != NULL) {
    
  } else {
    
  }
  sceneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sceneid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.MTS2GSCreateScene.sceneID)
}

// repeated .NetProto.CreateSceneItem itemList = 5;
int MTS2GSCreateScene::itemlist_size() const {
  return itemlist_.size();
}
void MTS2GSCreateScene::clear_itemlist() {
  itemlist_.Clear();
}
const ::NetProto::CreateSceneItem& MTS2GSCreateScene::itemlist(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.MTS2GSCreateScene.itemList)
  return itemlist_.Get(index);
}
::NetProto::CreateSceneItem* MTS2GSCreateScene::mutable_itemlist(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.MTS2GSCreateScene.itemList)
  return itemlist_.Mutable(index);
}
::NetProto::CreateSceneItem* MTS2GSCreateScene::add_itemlist() {
  // @@protoc_insertion_point(field_add:NetProto.MTS2GSCreateScene.itemList)
  return itemlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::CreateSceneItem >*
MTS2GSCreateScene::mutable_itemlist() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.MTS2GSCreateScene.itemList)
  return &itemlist_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::CreateSceneItem >&
MTS2GSCreateScene::itemlist() const {
  // @@protoc_insertion_point(field_list:NetProto.MTS2GSCreateScene.itemList)
  return itemlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
