// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weather_item.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "weather_item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
class WeatherItemSeeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeatherItemSee> {
} _WeatherItemSee_default_instance_;
class WeatherItemHeardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeatherItemHeard> {
} _WeatherItemHeard_default_instance_;
class WeatherItemFeelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeatherItemFeel> {
} _WeatherItemFeel_default_instance_;
class WeatherSummaryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeatherSummary> {
} _WeatherSummary_default_instance_;
class WeatherEmotion_EmotionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeatherEmotion_Emotion> {
} _WeatherEmotion_Emotion_default_instance_;
class WeatherEmotionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeatherEmotion> {
} _WeatherEmotion_default_instance_;
class CResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CResult> {
} _CResult_default_instance_;

namespace protobuf_weather_5fitem_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, sun_shine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, cloud_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, rain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, hail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, moon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, thunder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, snow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, sun_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, wind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, typhoon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, meteor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, ice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, vegetation_leaf_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, vegetation_leaf_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, vegetation_flower_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemSee, vegetation_flower_b_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemHeard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemHeard, rain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemHeard, hail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemHeard, thunder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemHeard, wind_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemFeel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemFeel, temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemFeel, warmwinter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItemFeel, humidity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherSummary, weather_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherEmotion_Emotion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherEmotion_Emotion, emotion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherEmotion_Emotion, degree_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherEmotion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherEmotion, emotion_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CResult, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CResult, see_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CResult, heard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CResult, feel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CResult, summary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CResult, emotion_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(WeatherItemSee)},
  { 21, -1, sizeof(WeatherItemHeard)},
  { 30, -1, sizeof(WeatherItemFeel)},
  { 38, -1, sizeof(WeatherSummary)},
  { 44, -1, sizeof(WeatherEmotion_Emotion)},
  { 51, -1, sizeof(WeatherEmotion)},
  { 57, -1, sizeof(CResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeatherItemSee_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeatherItemHeard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeatherItemFeel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeatherSummary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeatherEmotion_Emotion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeatherEmotion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CResult_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "weather_item.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _WeatherItemSee_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _WeatherItemHeard_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _WeatherItemFeel_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _WeatherSummary_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _WeatherEmotion_Emotion_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _WeatherEmotion_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CResult_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::NetProto::protobuf_msg_5fhead_2eproto::InitDefaults();
  _WeatherItemSee_default_instance_.DefaultConstruct();
  _WeatherItemHeard_default_instance_.DefaultConstruct();
  _WeatherItemFeel_default_instance_.DefaultConstruct();
  _WeatherSummary_default_instance_.DefaultConstruct();
  _WeatherEmotion_Emotion_default_instance_.DefaultConstruct();
  _WeatherEmotion_default_instance_.DefaultConstruct();
  _CResult_default_instance_.DefaultConstruct();
  _CResult_default_instance_.get_mutable()->head_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
  _CResult_default_instance_.get_mutable()->see_ = const_cast< ::NetProto::WeatherItemSee*>(
      ::NetProto::WeatherItemSee::internal_default_instance());
  _CResult_default_instance_.get_mutable()->heard_ = const_cast< ::NetProto::WeatherItemHeard*>(
      ::NetProto::WeatherItemHeard::internal_default_instance());
  _CResult_default_instance_.get_mutable()->feel_ = const_cast< ::NetProto::WeatherItemFeel*>(
      ::NetProto::WeatherItemFeel::internal_default_instance());
  _CResult_default_instance_.get_mutable()->summary_ = const_cast< ::NetProto::WeatherSummary*>(
      ::NetProto::WeatherSummary::internal_default_instance());
  _CResult_default_instance_.get_mutable()->emotion_ = const_cast< ::NetProto::WeatherEmotion*>(
      ::NetProto::WeatherEmotion::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022weather_item.proto\022\010NetProto\032\016msg_head"
      ".proto\"\264\002\n\016WeatherItemSee\022\021\n\tsun_shine\030\001"
      " \001(\t\022\r\n\005cloud\030\002 \001(\t\022\014\n\004rain\030\004 \001(\t\022\014\n\004hai"
      "l\030\005 \001(\t\022\014\n\004moon\030\006 \001(\t\022\017\n\007thunder\030\007 \001(\t\022\014"
      "\n\004snow\030\010 \001(\t\022\013\n\003sun\030\013 \001(\t\022\014\n\004wind\030\014 \001(\t\022"
      "\017\n\007typhoon\030\r \001(\t\022\016\n\006meteor\030\016 \001(\t\022\013\n\003ice\030"
      "\017 \001(\t\022\031\n\021vegetation_leaf_a\030\022 \001(\t\022\031\n\021vege"
      "tation_leaf_b\030\023 \001(\t\022\033\n\023vegetation_flower"
      "_a\030\024 \001(\t\022\033\n\023vegetation_flower_b\030\025 \001(\t\"M\n"
      "\020WeatherItemHeard\022\014\n\004rain\030\004 \001(\t\022\014\n\004hail\030"
      "\005 \001(\t\022\017\n\007thunder\030\007 \001(\t\022\014\n\004wind\030\014 \001(\t\"L\n\017"
      "WeatherItemFeel\022\023\n\013temperature\030\003 \001(\t\022\022\n\n"
      "warmwinter\030\020 \001(\t\022\020\n\010humidity\030\021 \001(\t\"!\n\016We"
      "atherSummary\022\017\n\007weather\030\001 \001(\t\"o\n\016Weather"
      "Emotion\0221\n\007emotion\030\001 \003(\0132 .NetProto.Weat"
      "herEmotion.Emotion\032*\n\007Emotion\022\017\n\007emotion"
      "\030\001 \001(\t\022\016\n\006degree\030\002 \001(\002\"\373\001\n\007CResult\022\037\n\004he"
      "ad\030\001 \001(\0132\021.NetProto.MsgHead\022%\n\003see\030\002 \001(\013"
      "2\030.NetProto.WeatherItemSee\022)\n\005heard\030\003 \001("
      "\0132\032.NetProto.WeatherItemHeard\022\'\n\004feel\030\004 "
      "\001(\0132\031.NetProto.WeatherItemFeel\022)\n\007summar"
      "y\030\005 \001(\0132\030.NetProto.WeatherSummary\022)\n\007emo"
      "tion\030\006 \001(\0132\030.NetProto.WeatherEmotionb\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 924);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "weather_item.proto", &protobuf_RegisterTypes);
  ::NetProto::protobuf_msg_5fhead_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_weather_5fitem_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeatherItemSee::kSunShineFieldNumber;
const int WeatherItemSee::kCloudFieldNumber;
const int WeatherItemSee::kRainFieldNumber;
const int WeatherItemSee::kHailFieldNumber;
const int WeatherItemSee::kMoonFieldNumber;
const int WeatherItemSee::kThunderFieldNumber;
const int WeatherItemSee::kSnowFieldNumber;
const int WeatherItemSee::kSunFieldNumber;
const int WeatherItemSee::kWindFieldNumber;
const int WeatherItemSee::kTyphoonFieldNumber;
const int WeatherItemSee::kMeteorFieldNumber;
const int WeatherItemSee::kIceFieldNumber;
const int WeatherItemSee::kVegetationLeafAFieldNumber;
const int WeatherItemSee::kVegetationLeafBFieldNumber;
const int WeatherItemSee::kVegetationFlowerAFieldNumber;
const int WeatherItemSee::kVegetationFlowerBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeatherItemSee::WeatherItemSee()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_weather_5fitem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.WeatherItemSee)
}
WeatherItemSee::WeatherItemSee(const WeatherItemSee& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sun_shine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sun_shine().size() > 0) {
    sun_shine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sun_shine_);
  }
  cloud_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cloud().size() > 0) {
    cloud_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cloud_);
  }
  rain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rain().size() > 0) {
    rain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rain_);
  }
  hail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hail().size() > 0) {
    hail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hail_);
  }
  moon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.moon().size() > 0) {
    moon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moon_);
  }
  thunder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.thunder().size() > 0) {
    thunder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thunder_);
  }
  snow_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.snow().size() > 0) {
    snow_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snow_);
  }
  sun_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sun().size() > 0) {
    sun_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sun_);
  }
  wind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.wind().size() > 0) {
    wind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wind_);
  }
  typhoon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.typhoon().size() > 0) {
    typhoon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.typhoon_);
  }
  meteor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.meteor().size() > 0) {
    meteor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meteor_);
  }
  ice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ice().size() > 0) {
    ice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_);
  }
  vegetation_leaf_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vegetation_leaf_a().size() > 0) {
    vegetation_leaf_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vegetation_leaf_a_);
  }
  vegetation_leaf_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vegetation_leaf_b().size() > 0) {
    vegetation_leaf_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vegetation_leaf_b_);
  }
  vegetation_flower_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vegetation_flower_a().size() > 0) {
    vegetation_flower_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vegetation_flower_a_);
  }
  vegetation_flower_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vegetation_flower_b().size() > 0) {
    vegetation_flower_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vegetation_flower_b_);
  }
  // @@protoc_insertion_point(copy_constructor:NetProto.WeatherItemSee)
}

void WeatherItemSee::SharedCtor() {
  sun_shine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cloud_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  moon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thunder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snow_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sun_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  typhoon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meteor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegetation_leaf_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegetation_leaf_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegetation_flower_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegetation_flower_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

WeatherItemSee::~WeatherItemSee() {
  // @@protoc_insertion_point(destructor:NetProto.WeatherItemSee)
  SharedDtor();
}

void WeatherItemSee::SharedDtor() {
  sun_shine_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cloud_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  moon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thunder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snow_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sun_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  typhoon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meteor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegetation_leaf_a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegetation_leaf_b_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegetation_flower_a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegetation_flower_b_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WeatherItemSee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherItemSee::descriptor() {
  protobuf_weather_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeatherItemSee& WeatherItemSee::default_instance() {
  protobuf_weather_5fitem_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeatherItemSee* WeatherItemSee::New(::google::protobuf::Arena* arena) const {
  WeatherItemSee* n = new WeatherItemSee;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeatherItemSee::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.WeatherItemSee)
  sun_shine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cloud_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  moon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thunder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sun_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  typhoon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meteor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegetation_leaf_a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegetation_leaf_b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegetation_flower_a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegetation_flower_b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool WeatherItemSee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.WeatherItemSee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sun_shine = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sun_shine()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sun_shine().data(), this->sun_shine().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.sun_shine"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cloud = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cloud()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cloud().data(), this->cloud().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.cloud"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rain().data(), this->rain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.rain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hail = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hail().data(), this->hail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.hail"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string moon = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moon()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->moon().data(), this->moon().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.moon"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string thunder = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thunder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->thunder().data(), this->thunder().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.thunder"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string snow = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snow()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snow().data(), this->snow().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.snow"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sun = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sun()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sun().data(), this->sun().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.sun"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string wind = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wind().data(), this->wind().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.wind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string typhoon = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typhoon()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->typhoon().data(), this->typhoon().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.typhoon"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string meteor = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meteor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->meteor().data(), this->meteor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.meteor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ice = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ice()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ice().data(), this->ice().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.ice"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vegetation_leaf_a = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vegetation_leaf_a()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vegetation_leaf_a().data(), this->vegetation_leaf_a().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.vegetation_leaf_a"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vegetation_leaf_b = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vegetation_leaf_b()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vegetation_leaf_b().data(), this->vegetation_leaf_b().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.vegetation_leaf_b"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vegetation_flower_a = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vegetation_flower_a()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vegetation_flower_a().data(), this->vegetation_flower_a().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.vegetation_flower_a"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vegetation_flower_b = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vegetation_flower_b()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vegetation_flower_b().data(), this->vegetation_flower_b().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemSee.vegetation_flower_b"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.WeatherItemSee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.WeatherItemSee)
  return false;
#undef DO_
}

void WeatherItemSee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.WeatherItemSee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sun_shine = 1;
  if (this->sun_shine().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sun_shine().data(), this->sun_shine().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.sun_shine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sun_shine(), output);
  }

  // string cloud = 2;
  if (this->cloud().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cloud().data(), this->cloud().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.cloud");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cloud(), output);
  }

  // string rain = 4;
  if (this->rain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rain().data(), this->rain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.rain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rain(), output);
  }

  // string hail = 5;
  if (this->hail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hail().data(), this->hail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.hail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hail(), output);
  }

  // string moon = 6;
  if (this->moon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->moon().data(), this->moon().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.moon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->moon(), output);
  }

  // string thunder = 7;
  if (this->thunder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thunder().data(), this->thunder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.thunder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->thunder(), output);
  }

  // string snow = 8;
  if (this->snow().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snow().data(), this->snow().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.snow");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->snow(), output);
  }

  // string sun = 11;
  if (this->sun().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sun().data(), this->sun().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.sun");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sun(), output);
  }

  // string wind = 12;
  if (this->wind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wind().data(), this->wind().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.wind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->wind(), output);
  }

  // string typhoon = 13;
  if (this->typhoon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->typhoon().data(), this->typhoon().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.typhoon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->typhoon(), output);
  }

  // string meteor = 14;
  if (this->meteor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->meteor().data(), this->meteor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.meteor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->meteor(), output);
  }

  // string ice = 15;
  if (this->ice().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice().data(), this->ice().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.ice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->ice(), output);
  }

  // string vegetation_leaf_a = 18;
  if (this->vegetation_leaf_a().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vegetation_leaf_a().data(), this->vegetation_leaf_a().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.vegetation_leaf_a");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->vegetation_leaf_a(), output);
  }

  // string vegetation_leaf_b = 19;
  if (this->vegetation_leaf_b().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vegetation_leaf_b().data(), this->vegetation_leaf_b().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.vegetation_leaf_b");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->vegetation_leaf_b(), output);
  }

  // string vegetation_flower_a = 20;
  if (this->vegetation_flower_a().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vegetation_flower_a().data(), this->vegetation_flower_a().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.vegetation_flower_a");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->vegetation_flower_a(), output);
  }

  // string vegetation_flower_b = 21;
  if (this->vegetation_flower_b().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vegetation_flower_b().data(), this->vegetation_flower_b().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.vegetation_flower_b");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->vegetation_flower_b(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.WeatherItemSee)
}

::google::protobuf::uint8* WeatherItemSee::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.WeatherItemSee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sun_shine = 1;
  if (this->sun_shine().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sun_shine().data(), this->sun_shine().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.sun_shine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sun_shine(), target);
  }

  // string cloud = 2;
  if (this->cloud().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cloud().data(), this->cloud().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.cloud");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cloud(), target);
  }

  // string rain = 4;
  if (this->rain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rain().data(), this->rain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.rain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rain(), target);
  }

  // string hail = 5;
  if (this->hail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hail().data(), this->hail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.hail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hail(), target);
  }

  // string moon = 6;
  if (this->moon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->moon().data(), this->moon().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.moon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->moon(), target);
  }

  // string thunder = 7;
  if (this->thunder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thunder().data(), this->thunder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.thunder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->thunder(), target);
  }

  // string snow = 8;
  if (this->snow().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snow().data(), this->snow().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.snow");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->snow(), target);
  }

  // string sun = 11;
  if (this->sun().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sun().data(), this->sun().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.sun");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sun(), target);
  }

  // string wind = 12;
  if (this->wind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wind().data(), this->wind().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.wind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->wind(), target);
  }

  // string typhoon = 13;
  if (this->typhoon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->typhoon().data(), this->typhoon().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.typhoon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->typhoon(), target);
  }

  // string meteor = 14;
  if (this->meteor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->meteor().data(), this->meteor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.meteor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->meteor(), target);
  }

  // string ice = 15;
  if (this->ice().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice().data(), this->ice().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.ice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->ice(), target);
  }

  // string vegetation_leaf_a = 18;
  if (this->vegetation_leaf_a().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vegetation_leaf_a().data(), this->vegetation_leaf_a().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.vegetation_leaf_a");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->vegetation_leaf_a(), target);
  }

  // string vegetation_leaf_b = 19;
  if (this->vegetation_leaf_b().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vegetation_leaf_b().data(), this->vegetation_leaf_b().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.vegetation_leaf_b");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->vegetation_leaf_b(), target);
  }

  // string vegetation_flower_a = 20;
  if (this->vegetation_flower_a().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vegetation_flower_a().data(), this->vegetation_flower_a().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.vegetation_flower_a");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->vegetation_flower_a(), target);
  }

  // string vegetation_flower_b = 21;
  if (this->vegetation_flower_b().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vegetation_flower_b().data(), this->vegetation_flower_b().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemSee.vegetation_flower_b");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->vegetation_flower_b(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.WeatherItemSee)
  return target;
}

size_t WeatherItemSee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.WeatherItemSee)
  size_t total_size = 0;

  // string sun_shine = 1;
  if (this->sun_shine().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sun_shine());
  }

  // string cloud = 2;
  if (this->cloud().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cloud());
  }

  // string rain = 4;
  if (this->rain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rain());
  }

  // string hail = 5;
  if (this->hail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hail());
  }

  // string moon = 6;
  if (this->moon().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->moon());
  }

  // string thunder = 7;
  if (this->thunder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thunder());
  }

  // string snow = 8;
  if (this->snow().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snow());
  }

  // string sun = 11;
  if (this->sun().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sun());
  }

  // string wind = 12;
  if (this->wind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wind());
  }

  // string typhoon = 13;
  if (this->typhoon().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->typhoon());
  }

  // string meteor = 14;
  if (this->meteor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->meteor());
  }

  // string ice = 15;
  if (this->ice().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ice());
  }

  // string vegetation_leaf_a = 18;
  if (this->vegetation_leaf_a().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vegetation_leaf_a());
  }

  // string vegetation_leaf_b = 19;
  if (this->vegetation_leaf_b().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vegetation_leaf_b());
  }

  // string vegetation_flower_a = 20;
  if (this->vegetation_flower_a().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vegetation_flower_a());
  }

  // string vegetation_flower_b = 21;
  if (this->vegetation_flower_b().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vegetation_flower_b());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherItemSee::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.WeatherItemSee)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherItemSee* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeatherItemSee>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.WeatherItemSee)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.WeatherItemSee)
    MergeFrom(*source);
  }
}

void WeatherItemSee::MergeFrom(const WeatherItemSee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.WeatherItemSee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sun_shine().size() > 0) {

    sun_shine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sun_shine_);
  }
  if (from.cloud().size() > 0) {

    cloud_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cloud_);
  }
  if (from.rain().size() > 0) {

    rain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rain_);
  }
  if (from.hail().size() > 0) {

    hail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hail_);
  }
  if (from.moon().size() > 0) {

    moon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moon_);
  }
  if (from.thunder().size() > 0) {

    thunder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thunder_);
  }
  if (from.snow().size() > 0) {

    snow_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snow_);
  }
  if (from.sun().size() > 0) {

    sun_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sun_);
  }
  if (from.wind().size() > 0) {

    wind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wind_);
  }
  if (from.typhoon().size() > 0) {

    typhoon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.typhoon_);
  }
  if (from.meteor().size() > 0) {

    meteor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meteor_);
  }
  if (from.ice().size() > 0) {

    ice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_);
  }
  if (from.vegetation_leaf_a().size() > 0) {

    vegetation_leaf_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vegetation_leaf_a_);
  }
  if (from.vegetation_leaf_b().size() > 0) {

    vegetation_leaf_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vegetation_leaf_b_);
  }
  if (from.vegetation_flower_a().size() > 0) {

    vegetation_flower_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vegetation_flower_a_);
  }
  if (from.vegetation_flower_b().size() > 0) {

    vegetation_flower_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vegetation_flower_b_);
  }
}

void WeatherItemSee::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.WeatherItemSee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherItemSee::CopyFrom(const WeatherItemSee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.WeatherItemSee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherItemSee::IsInitialized() const {
  return true;
}

void WeatherItemSee::Swap(WeatherItemSee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeatherItemSee::InternalSwap(WeatherItemSee* other) {
  sun_shine_.Swap(&other->sun_shine_);
  cloud_.Swap(&other->cloud_);
  rain_.Swap(&other->rain_);
  hail_.Swap(&other->hail_);
  moon_.Swap(&other->moon_);
  thunder_.Swap(&other->thunder_);
  snow_.Swap(&other->snow_);
  sun_.Swap(&other->sun_);
  wind_.Swap(&other->wind_);
  typhoon_.Swap(&other->typhoon_);
  meteor_.Swap(&other->meteor_);
  ice_.Swap(&other->ice_);
  vegetation_leaf_a_.Swap(&other->vegetation_leaf_a_);
  vegetation_leaf_b_.Swap(&other->vegetation_leaf_b_);
  vegetation_flower_a_.Swap(&other->vegetation_flower_a_);
  vegetation_flower_b_.Swap(&other->vegetation_flower_b_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeatherItemSee::GetMetadata() const {
  protobuf_weather_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeatherItemSee

// string sun_shine = 1;
void WeatherItemSee::clear_sun_shine() {
  sun_shine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::sun_shine() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.sun_shine)
  return sun_shine_.GetNoArena();
}
void WeatherItemSee::set_sun_shine(const ::std::string& value) {
  
  sun_shine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.sun_shine)
}
#if LANG_CXX11
void WeatherItemSee::set_sun_shine(::std::string&& value) {
  
  sun_shine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.sun_shine)
}
#endif
void WeatherItemSee::set_sun_shine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sun_shine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.sun_shine)
}
void WeatherItemSee::set_sun_shine(const char* value, size_t size) {
  
  sun_shine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.sun_shine)
}
::std::string* WeatherItemSee::mutable_sun_shine() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.sun_shine)
  return sun_shine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_sun_shine() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.sun_shine)
  
  return sun_shine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_sun_shine(::std::string* sun_shine) {
  if (sun_shine != NULL) {
    
  } else {
    
  }
  sun_shine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sun_shine);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.sun_shine)
}

// string cloud = 2;
void WeatherItemSee::clear_cloud() {
  cloud_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::cloud() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.cloud)
  return cloud_.GetNoArena();
}
void WeatherItemSee::set_cloud(const ::std::string& value) {
  
  cloud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.cloud)
}
#if LANG_CXX11
void WeatherItemSee::set_cloud(::std::string&& value) {
  
  cloud_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.cloud)
}
#endif
void WeatherItemSee::set_cloud(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cloud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.cloud)
}
void WeatherItemSee::set_cloud(const char* value, size_t size) {
  
  cloud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.cloud)
}
::std::string* WeatherItemSee::mutable_cloud() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.cloud)
  return cloud_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_cloud() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.cloud)
  
  return cloud_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_cloud(::std::string* cloud) {
  if (cloud != NULL) {
    
  } else {
    
  }
  cloud_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cloud);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.cloud)
}

// string rain = 4;
void WeatherItemSee::clear_rain() {
  rain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::rain() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.rain)
  return rain_.GetNoArena();
}
void WeatherItemSee::set_rain(const ::std::string& value) {
  
  rain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.rain)
}
#if LANG_CXX11
void WeatherItemSee::set_rain(::std::string&& value) {
  
  rain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.rain)
}
#endif
void WeatherItemSee::set_rain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.rain)
}
void WeatherItemSee::set_rain(const char* value, size_t size) {
  
  rain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.rain)
}
::std::string* WeatherItemSee::mutable_rain() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.rain)
  return rain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_rain() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.rain)
  
  return rain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_rain(::std::string* rain) {
  if (rain != NULL) {
    
  } else {
    
  }
  rain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rain);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.rain)
}

// string hail = 5;
void WeatherItemSee::clear_hail() {
  hail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::hail() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.hail)
  return hail_.GetNoArena();
}
void WeatherItemSee::set_hail(const ::std::string& value) {
  
  hail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.hail)
}
#if LANG_CXX11
void WeatherItemSee::set_hail(::std::string&& value) {
  
  hail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.hail)
}
#endif
void WeatherItemSee::set_hail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.hail)
}
void WeatherItemSee::set_hail(const char* value, size_t size) {
  
  hail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.hail)
}
::std::string* WeatherItemSee::mutable_hail() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.hail)
  return hail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_hail() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.hail)
  
  return hail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_hail(::std::string* hail) {
  if (hail != NULL) {
    
  } else {
    
  }
  hail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hail);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.hail)
}

// string moon = 6;
void WeatherItemSee::clear_moon() {
  moon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::moon() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.moon)
  return moon_.GetNoArena();
}
void WeatherItemSee::set_moon(const ::std::string& value) {
  
  moon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.moon)
}
#if LANG_CXX11
void WeatherItemSee::set_moon(::std::string&& value) {
  
  moon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.moon)
}
#endif
void WeatherItemSee::set_moon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  moon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.moon)
}
void WeatherItemSee::set_moon(const char* value, size_t size) {
  
  moon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.moon)
}
::std::string* WeatherItemSee::mutable_moon() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.moon)
  return moon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_moon() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.moon)
  
  return moon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_moon(::std::string* moon) {
  if (moon != NULL) {
    
  } else {
    
  }
  moon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moon);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.moon)
}

// string thunder = 7;
void WeatherItemSee::clear_thunder() {
  thunder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::thunder() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.thunder)
  return thunder_.GetNoArena();
}
void WeatherItemSee::set_thunder(const ::std::string& value) {
  
  thunder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.thunder)
}
#if LANG_CXX11
void WeatherItemSee::set_thunder(::std::string&& value) {
  
  thunder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.thunder)
}
#endif
void WeatherItemSee::set_thunder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thunder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.thunder)
}
void WeatherItemSee::set_thunder(const char* value, size_t size) {
  
  thunder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.thunder)
}
::std::string* WeatherItemSee::mutable_thunder() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.thunder)
  return thunder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_thunder() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.thunder)
  
  return thunder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_thunder(::std::string* thunder) {
  if (thunder != NULL) {
    
  } else {
    
  }
  thunder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thunder);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.thunder)
}

// string snow = 8;
void WeatherItemSee::clear_snow() {
  snow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::snow() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.snow)
  return snow_.GetNoArena();
}
void WeatherItemSee::set_snow(const ::std::string& value) {
  
  snow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.snow)
}
#if LANG_CXX11
void WeatherItemSee::set_snow(::std::string&& value) {
  
  snow_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.snow)
}
#endif
void WeatherItemSee::set_snow(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  snow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.snow)
}
void WeatherItemSee::set_snow(const char* value, size_t size) {
  
  snow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.snow)
}
::std::string* WeatherItemSee::mutable_snow() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.snow)
  return snow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_snow() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.snow)
  
  return snow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_snow(::std::string* snow) {
  if (snow != NULL) {
    
  } else {
    
  }
  snow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snow);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.snow)
}

// string sun = 11;
void WeatherItemSee::clear_sun() {
  sun_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::sun() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.sun)
  return sun_.GetNoArena();
}
void WeatherItemSee::set_sun(const ::std::string& value) {
  
  sun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.sun)
}
#if LANG_CXX11
void WeatherItemSee::set_sun(::std::string&& value) {
  
  sun_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.sun)
}
#endif
void WeatherItemSee::set_sun(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.sun)
}
void WeatherItemSee::set_sun(const char* value, size_t size) {
  
  sun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.sun)
}
::std::string* WeatherItemSee::mutable_sun() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.sun)
  return sun_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_sun() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.sun)
  
  return sun_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_sun(::std::string* sun) {
  if (sun != NULL) {
    
  } else {
    
  }
  sun_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sun);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.sun)
}

// string wind = 12;
void WeatherItemSee::clear_wind() {
  wind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::wind() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.wind)
  return wind_.GetNoArena();
}
void WeatherItemSee::set_wind(const ::std::string& value) {
  
  wind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.wind)
}
#if LANG_CXX11
void WeatherItemSee::set_wind(::std::string&& value) {
  
  wind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.wind)
}
#endif
void WeatherItemSee::set_wind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.wind)
}
void WeatherItemSee::set_wind(const char* value, size_t size) {
  
  wind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.wind)
}
::std::string* WeatherItemSee::mutable_wind() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.wind)
  return wind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_wind() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.wind)
  
  return wind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_wind(::std::string* wind) {
  if (wind != NULL) {
    
  } else {
    
  }
  wind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wind);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.wind)
}

// string typhoon = 13;
void WeatherItemSee::clear_typhoon() {
  typhoon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::typhoon() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.typhoon)
  return typhoon_.GetNoArena();
}
void WeatherItemSee::set_typhoon(const ::std::string& value) {
  
  typhoon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.typhoon)
}
#if LANG_CXX11
void WeatherItemSee::set_typhoon(::std::string&& value) {
  
  typhoon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.typhoon)
}
#endif
void WeatherItemSee::set_typhoon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  typhoon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.typhoon)
}
void WeatherItemSee::set_typhoon(const char* value, size_t size) {
  
  typhoon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.typhoon)
}
::std::string* WeatherItemSee::mutable_typhoon() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.typhoon)
  return typhoon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_typhoon() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.typhoon)
  
  return typhoon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_typhoon(::std::string* typhoon) {
  if (typhoon != NULL) {
    
  } else {
    
  }
  typhoon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), typhoon);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.typhoon)
}

// string meteor = 14;
void WeatherItemSee::clear_meteor() {
  meteor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::meteor() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.meteor)
  return meteor_.GetNoArena();
}
void WeatherItemSee::set_meteor(const ::std::string& value) {
  
  meteor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.meteor)
}
#if LANG_CXX11
void WeatherItemSee::set_meteor(::std::string&& value) {
  
  meteor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.meteor)
}
#endif
void WeatherItemSee::set_meteor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  meteor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.meteor)
}
void WeatherItemSee::set_meteor(const char* value, size_t size) {
  
  meteor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.meteor)
}
::std::string* WeatherItemSee::mutable_meteor() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.meteor)
  return meteor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_meteor() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.meteor)
  
  return meteor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_meteor(::std::string* meteor) {
  if (meteor != NULL) {
    
  } else {
    
  }
  meteor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meteor);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.meteor)
}

// string ice = 15;
void WeatherItemSee::clear_ice() {
  ice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::ice() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.ice)
  return ice_.GetNoArena();
}
void WeatherItemSee::set_ice(const ::std::string& value) {
  
  ice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.ice)
}
#if LANG_CXX11
void WeatherItemSee::set_ice(::std::string&& value) {
  
  ice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.ice)
}
#endif
void WeatherItemSee::set_ice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.ice)
}
void WeatherItemSee::set_ice(const char* value, size_t size) {
  
  ice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.ice)
}
::std::string* WeatherItemSee::mutable_ice() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.ice)
  return ice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_ice() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.ice)
  
  return ice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_ice(::std::string* ice) {
  if (ice != NULL) {
    
  } else {
    
  }
  ice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.ice)
}

// string vegetation_leaf_a = 18;
void WeatherItemSee::clear_vegetation_leaf_a() {
  vegetation_leaf_a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::vegetation_leaf_a() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.vegetation_leaf_a)
  return vegetation_leaf_a_.GetNoArena();
}
void WeatherItemSee::set_vegetation_leaf_a(const ::std::string& value) {
  
  vegetation_leaf_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.vegetation_leaf_a)
}
#if LANG_CXX11
void WeatherItemSee::set_vegetation_leaf_a(::std::string&& value) {
  
  vegetation_leaf_a_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.vegetation_leaf_a)
}
#endif
void WeatherItemSee::set_vegetation_leaf_a(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vegetation_leaf_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.vegetation_leaf_a)
}
void WeatherItemSee::set_vegetation_leaf_a(const char* value, size_t size) {
  
  vegetation_leaf_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.vegetation_leaf_a)
}
::std::string* WeatherItemSee::mutable_vegetation_leaf_a() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.vegetation_leaf_a)
  return vegetation_leaf_a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_vegetation_leaf_a() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.vegetation_leaf_a)
  
  return vegetation_leaf_a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_vegetation_leaf_a(::std::string* vegetation_leaf_a) {
  if (vegetation_leaf_a != NULL) {
    
  } else {
    
  }
  vegetation_leaf_a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vegetation_leaf_a);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.vegetation_leaf_a)
}

// string vegetation_leaf_b = 19;
void WeatherItemSee::clear_vegetation_leaf_b() {
  vegetation_leaf_b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::vegetation_leaf_b() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.vegetation_leaf_b)
  return vegetation_leaf_b_.GetNoArena();
}
void WeatherItemSee::set_vegetation_leaf_b(const ::std::string& value) {
  
  vegetation_leaf_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.vegetation_leaf_b)
}
#if LANG_CXX11
void WeatherItemSee::set_vegetation_leaf_b(::std::string&& value) {
  
  vegetation_leaf_b_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.vegetation_leaf_b)
}
#endif
void WeatherItemSee::set_vegetation_leaf_b(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vegetation_leaf_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.vegetation_leaf_b)
}
void WeatherItemSee::set_vegetation_leaf_b(const char* value, size_t size) {
  
  vegetation_leaf_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.vegetation_leaf_b)
}
::std::string* WeatherItemSee::mutable_vegetation_leaf_b() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.vegetation_leaf_b)
  return vegetation_leaf_b_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_vegetation_leaf_b() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.vegetation_leaf_b)
  
  return vegetation_leaf_b_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_vegetation_leaf_b(::std::string* vegetation_leaf_b) {
  if (vegetation_leaf_b != NULL) {
    
  } else {
    
  }
  vegetation_leaf_b_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vegetation_leaf_b);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.vegetation_leaf_b)
}

// string vegetation_flower_a = 20;
void WeatherItemSee::clear_vegetation_flower_a() {
  vegetation_flower_a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::vegetation_flower_a() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.vegetation_flower_a)
  return vegetation_flower_a_.GetNoArena();
}
void WeatherItemSee::set_vegetation_flower_a(const ::std::string& value) {
  
  vegetation_flower_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.vegetation_flower_a)
}
#if LANG_CXX11
void WeatherItemSee::set_vegetation_flower_a(::std::string&& value) {
  
  vegetation_flower_a_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.vegetation_flower_a)
}
#endif
void WeatherItemSee::set_vegetation_flower_a(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vegetation_flower_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.vegetation_flower_a)
}
void WeatherItemSee::set_vegetation_flower_a(const char* value, size_t size) {
  
  vegetation_flower_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.vegetation_flower_a)
}
::std::string* WeatherItemSee::mutable_vegetation_flower_a() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.vegetation_flower_a)
  return vegetation_flower_a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_vegetation_flower_a() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.vegetation_flower_a)
  
  return vegetation_flower_a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_vegetation_flower_a(::std::string* vegetation_flower_a) {
  if (vegetation_flower_a != NULL) {
    
  } else {
    
  }
  vegetation_flower_a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vegetation_flower_a);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.vegetation_flower_a)
}

// string vegetation_flower_b = 21;
void WeatherItemSee::clear_vegetation_flower_b() {
  vegetation_flower_b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemSee::vegetation_flower_b() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.vegetation_flower_b)
  return vegetation_flower_b_.GetNoArena();
}
void WeatherItemSee::set_vegetation_flower_b(const ::std::string& value) {
  
  vegetation_flower_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.vegetation_flower_b)
}
#if LANG_CXX11
void WeatherItemSee::set_vegetation_flower_b(::std::string&& value) {
  
  vegetation_flower_b_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.vegetation_flower_b)
}
#endif
void WeatherItemSee::set_vegetation_flower_b(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vegetation_flower_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.vegetation_flower_b)
}
void WeatherItemSee::set_vegetation_flower_b(const char* value, size_t size) {
  
  vegetation_flower_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.vegetation_flower_b)
}
::std::string* WeatherItemSee::mutable_vegetation_flower_b() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.vegetation_flower_b)
  return vegetation_flower_b_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemSee::release_vegetation_flower_b() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.vegetation_flower_b)
  
  return vegetation_flower_b_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemSee::set_allocated_vegetation_flower_b(::std::string* vegetation_flower_b) {
  if (vegetation_flower_b != NULL) {
    
  } else {
    
  }
  vegetation_flower_b_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vegetation_flower_b);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.vegetation_flower_b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeatherItemHeard::kRainFieldNumber;
const int WeatherItemHeard::kHailFieldNumber;
const int WeatherItemHeard::kThunderFieldNumber;
const int WeatherItemHeard::kWindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeatherItemHeard::WeatherItemHeard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_weather_5fitem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.WeatherItemHeard)
}
WeatherItemHeard::WeatherItemHeard(const WeatherItemHeard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rain().size() > 0) {
    rain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rain_);
  }
  hail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hail().size() > 0) {
    hail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hail_);
  }
  thunder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.thunder().size() > 0) {
    thunder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thunder_);
  }
  wind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.wind().size() > 0) {
    wind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wind_);
  }
  // @@protoc_insertion_point(copy_constructor:NetProto.WeatherItemHeard)
}

void WeatherItemHeard::SharedCtor() {
  rain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thunder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

WeatherItemHeard::~WeatherItemHeard() {
  // @@protoc_insertion_point(destructor:NetProto.WeatherItemHeard)
  SharedDtor();
}

void WeatherItemHeard::SharedDtor() {
  rain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thunder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WeatherItemHeard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherItemHeard::descriptor() {
  protobuf_weather_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeatherItemHeard& WeatherItemHeard::default_instance() {
  protobuf_weather_5fitem_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeatherItemHeard* WeatherItemHeard::New(::google::protobuf::Arena* arena) const {
  WeatherItemHeard* n = new WeatherItemHeard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeatherItemHeard::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.WeatherItemHeard)
  rain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thunder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool WeatherItemHeard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.WeatherItemHeard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rain().data(), this->rain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemHeard.rain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hail = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hail().data(), this->hail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemHeard.hail"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string thunder = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thunder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->thunder().data(), this->thunder().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemHeard.thunder"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string wind = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wind().data(), this->wind().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemHeard.wind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.WeatherItemHeard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.WeatherItemHeard)
  return false;
#undef DO_
}

void WeatherItemHeard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.WeatherItemHeard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rain = 4;
  if (this->rain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rain().data(), this->rain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemHeard.rain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rain(), output);
  }

  // string hail = 5;
  if (this->hail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hail().data(), this->hail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemHeard.hail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hail(), output);
  }

  // string thunder = 7;
  if (this->thunder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thunder().data(), this->thunder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemHeard.thunder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->thunder(), output);
  }

  // string wind = 12;
  if (this->wind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wind().data(), this->wind().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemHeard.wind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->wind(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.WeatherItemHeard)
}

::google::protobuf::uint8* WeatherItemHeard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.WeatherItemHeard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rain = 4;
  if (this->rain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rain().data(), this->rain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemHeard.rain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rain(), target);
  }

  // string hail = 5;
  if (this->hail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hail().data(), this->hail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemHeard.hail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hail(), target);
  }

  // string thunder = 7;
  if (this->thunder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thunder().data(), this->thunder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemHeard.thunder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->thunder(), target);
  }

  // string wind = 12;
  if (this->wind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wind().data(), this->wind().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemHeard.wind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->wind(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.WeatherItemHeard)
  return target;
}

size_t WeatherItemHeard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.WeatherItemHeard)
  size_t total_size = 0;

  // string rain = 4;
  if (this->rain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rain());
  }

  // string hail = 5;
  if (this->hail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hail());
  }

  // string thunder = 7;
  if (this->thunder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thunder());
  }

  // string wind = 12;
  if (this->wind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherItemHeard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.WeatherItemHeard)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherItemHeard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeatherItemHeard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.WeatherItemHeard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.WeatherItemHeard)
    MergeFrom(*source);
  }
}

void WeatherItemHeard::MergeFrom(const WeatherItemHeard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.WeatherItemHeard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rain().size() > 0) {

    rain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rain_);
  }
  if (from.hail().size() > 0) {

    hail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hail_);
  }
  if (from.thunder().size() > 0) {

    thunder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thunder_);
  }
  if (from.wind().size() > 0) {

    wind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wind_);
  }
}

void WeatherItemHeard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.WeatherItemHeard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherItemHeard::CopyFrom(const WeatherItemHeard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.WeatherItemHeard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherItemHeard::IsInitialized() const {
  return true;
}

void WeatherItemHeard::Swap(WeatherItemHeard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeatherItemHeard::InternalSwap(WeatherItemHeard* other) {
  rain_.Swap(&other->rain_);
  hail_.Swap(&other->hail_);
  thunder_.Swap(&other->thunder_);
  wind_.Swap(&other->wind_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeatherItemHeard::GetMetadata() const {
  protobuf_weather_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeatherItemHeard

// string rain = 4;
void WeatherItemHeard::clear_rain() {
  rain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemHeard::rain() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemHeard.rain)
  return rain_.GetNoArena();
}
void WeatherItemHeard::set_rain(const ::std::string& value) {
  
  rain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemHeard.rain)
}
#if LANG_CXX11
void WeatherItemHeard::set_rain(::std::string&& value) {
  
  rain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemHeard.rain)
}
#endif
void WeatherItemHeard::set_rain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemHeard.rain)
}
void WeatherItemHeard::set_rain(const char* value, size_t size) {
  
  rain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemHeard.rain)
}
::std::string* WeatherItemHeard::mutable_rain() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemHeard.rain)
  return rain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemHeard::release_rain() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemHeard.rain)
  
  return rain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemHeard::set_allocated_rain(::std::string* rain) {
  if (rain != NULL) {
    
  } else {
    
  }
  rain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rain);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemHeard.rain)
}

// string hail = 5;
void WeatherItemHeard::clear_hail() {
  hail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemHeard::hail() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemHeard.hail)
  return hail_.GetNoArena();
}
void WeatherItemHeard::set_hail(const ::std::string& value) {
  
  hail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemHeard.hail)
}
#if LANG_CXX11
void WeatherItemHeard::set_hail(::std::string&& value) {
  
  hail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemHeard.hail)
}
#endif
void WeatherItemHeard::set_hail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemHeard.hail)
}
void WeatherItemHeard::set_hail(const char* value, size_t size) {
  
  hail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemHeard.hail)
}
::std::string* WeatherItemHeard::mutable_hail() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemHeard.hail)
  return hail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemHeard::release_hail() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemHeard.hail)
  
  return hail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemHeard::set_allocated_hail(::std::string* hail) {
  if (hail != NULL) {
    
  } else {
    
  }
  hail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hail);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemHeard.hail)
}

// string thunder = 7;
void WeatherItemHeard::clear_thunder() {
  thunder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemHeard::thunder() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemHeard.thunder)
  return thunder_.GetNoArena();
}
void WeatherItemHeard::set_thunder(const ::std::string& value) {
  
  thunder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemHeard.thunder)
}
#if LANG_CXX11
void WeatherItemHeard::set_thunder(::std::string&& value) {
  
  thunder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemHeard.thunder)
}
#endif
void WeatherItemHeard::set_thunder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thunder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemHeard.thunder)
}
void WeatherItemHeard::set_thunder(const char* value, size_t size) {
  
  thunder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemHeard.thunder)
}
::std::string* WeatherItemHeard::mutable_thunder() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemHeard.thunder)
  return thunder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemHeard::release_thunder() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemHeard.thunder)
  
  return thunder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemHeard::set_allocated_thunder(::std::string* thunder) {
  if (thunder != NULL) {
    
  } else {
    
  }
  thunder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thunder);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemHeard.thunder)
}

// string wind = 12;
void WeatherItemHeard::clear_wind() {
  wind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemHeard::wind() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemHeard.wind)
  return wind_.GetNoArena();
}
void WeatherItemHeard::set_wind(const ::std::string& value) {
  
  wind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemHeard.wind)
}
#if LANG_CXX11
void WeatherItemHeard::set_wind(::std::string&& value) {
  
  wind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemHeard.wind)
}
#endif
void WeatherItemHeard::set_wind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemHeard.wind)
}
void WeatherItemHeard::set_wind(const char* value, size_t size) {
  
  wind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemHeard.wind)
}
::std::string* WeatherItemHeard::mutable_wind() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemHeard.wind)
  return wind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemHeard::release_wind() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemHeard.wind)
  
  return wind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemHeard::set_allocated_wind(::std::string* wind) {
  if (wind != NULL) {
    
  } else {
    
  }
  wind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wind);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemHeard.wind)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeatherItemFeel::kTemperatureFieldNumber;
const int WeatherItemFeel::kWarmwinterFieldNumber;
const int WeatherItemFeel::kHumidityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeatherItemFeel::WeatherItemFeel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_weather_5fitem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.WeatherItemFeel)
}
WeatherItemFeel::WeatherItemFeel(const WeatherItemFeel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  temperature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.temperature().size() > 0) {
    temperature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.temperature_);
  }
  warmwinter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.warmwinter().size() > 0) {
    warmwinter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.warmwinter_);
  }
  humidity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.humidity().size() > 0) {
    humidity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.humidity_);
  }
  // @@protoc_insertion_point(copy_constructor:NetProto.WeatherItemFeel)
}

void WeatherItemFeel::SharedCtor() {
  temperature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  warmwinter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  humidity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

WeatherItemFeel::~WeatherItemFeel() {
  // @@protoc_insertion_point(destructor:NetProto.WeatherItemFeel)
  SharedDtor();
}

void WeatherItemFeel::SharedDtor() {
  temperature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  warmwinter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  humidity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WeatherItemFeel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherItemFeel::descriptor() {
  protobuf_weather_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeatherItemFeel& WeatherItemFeel::default_instance() {
  protobuf_weather_5fitem_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeatherItemFeel* WeatherItemFeel::New(::google::protobuf::Arena* arena) const {
  WeatherItemFeel* n = new WeatherItemFeel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeatherItemFeel::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.WeatherItemFeel)
  temperature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  warmwinter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  humidity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool WeatherItemFeel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.WeatherItemFeel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string temperature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_temperature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->temperature().data(), this->temperature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemFeel.temperature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string warmwinter = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warmwinter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->warmwinter().data(), this->warmwinter().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemFeel.warmwinter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string humidity = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_humidity()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->humidity().data(), this->humidity().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherItemFeel.humidity"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.WeatherItemFeel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.WeatherItemFeel)
  return false;
#undef DO_
}

void WeatherItemFeel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.WeatherItemFeel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string temperature = 3;
  if (this->temperature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->temperature().data(), this->temperature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemFeel.temperature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->temperature(), output);
  }

  // string warmwinter = 16;
  if (this->warmwinter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->warmwinter().data(), this->warmwinter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemFeel.warmwinter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->warmwinter(), output);
  }

  // string humidity = 17;
  if (this->humidity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->humidity().data(), this->humidity().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemFeel.humidity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->humidity(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.WeatherItemFeel)
}

::google::protobuf::uint8* WeatherItemFeel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.WeatherItemFeel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string temperature = 3;
  if (this->temperature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->temperature().data(), this->temperature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemFeel.temperature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->temperature(), target);
  }

  // string warmwinter = 16;
  if (this->warmwinter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->warmwinter().data(), this->warmwinter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemFeel.warmwinter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->warmwinter(), target);
  }

  // string humidity = 17;
  if (this->humidity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->humidity().data(), this->humidity().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherItemFeel.humidity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->humidity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.WeatherItemFeel)
  return target;
}

size_t WeatherItemFeel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.WeatherItemFeel)
  size_t total_size = 0;

  // string temperature = 3;
  if (this->temperature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->temperature());
  }

  // string warmwinter = 16;
  if (this->warmwinter().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->warmwinter());
  }

  // string humidity = 17;
  if (this->humidity().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->humidity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherItemFeel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.WeatherItemFeel)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherItemFeel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeatherItemFeel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.WeatherItemFeel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.WeatherItemFeel)
    MergeFrom(*source);
  }
}

void WeatherItemFeel::MergeFrom(const WeatherItemFeel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.WeatherItemFeel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.temperature().size() > 0) {

    temperature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.temperature_);
  }
  if (from.warmwinter().size() > 0) {

    warmwinter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.warmwinter_);
  }
  if (from.humidity().size() > 0) {

    humidity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.humidity_);
  }
}

void WeatherItemFeel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.WeatherItemFeel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherItemFeel::CopyFrom(const WeatherItemFeel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.WeatherItemFeel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherItemFeel::IsInitialized() const {
  return true;
}

void WeatherItemFeel::Swap(WeatherItemFeel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeatherItemFeel::InternalSwap(WeatherItemFeel* other) {
  temperature_.Swap(&other->temperature_);
  warmwinter_.Swap(&other->warmwinter_);
  humidity_.Swap(&other->humidity_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeatherItemFeel::GetMetadata() const {
  protobuf_weather_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeatherItemFeel

// string temperature = 3;
void WeatherItemFeel::clear_temperature() {
  temperature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemFeel::temperature() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemFeel.temperature)
  return temperature_.GetNoArena();
}
void WeatherItemFeel::set_temperature(const ::std::string& value) {
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemFeel.temperature)
}
#if LANG_CXX11
void WeatherItemFeel::set_temperature(::std::string&& value) {
  
  temperature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemFeel.temperature)
}
#endif
void WeatherItemFeel::set_temperature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemFeel.temperature)
}
void WeatherItemFeel::set_temperature(const char* value, size_t size) {
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemFeel.temperature)
}
::std::string* WeatherItemFeel::mutable_temperature() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemFeel.temperature)
  return temperature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemFeel::release_temperature() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemFeel.temperature)
  
  return temperature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemFeel::set_allocated_temperature(::std::string* temperature) {
  if (temperature != NULL) {
    
  } else {
    
  }
  temperature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), temperature);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemFeel.temperature)
}

// string warmwinter = 16;
void WeatherItemFeel::clear_warmwinter() {
  warmwinter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemFeel::warmwinter() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemFeel.warmwinter)
  return warmwinter_.GetNoArena();
}
void WeatherItemFeel::set_warmwinter(const ::std::string& value) {
  
  warmwinter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemFeel.warmwinter)
}
#if LANG_CXX11
void WeatherItemFeel::set_warmwinter(::std::string&& value) {
  
  warmwinter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemFeel.warmwinter)
}
#endif
void WeatherItemFeel::set_warmwinter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  warmwinter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemFeel.warmwinter)
}
void WeatherItemFeel::set_warmwinter(const char* value, size_t size) {
  
  warmwinter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemFeel.warmwinter)
}
::std::string* WeatherItemFeel::mutable_warmwinter() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemFeel.warmwinter)
  return warmwinter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemFeel::release_warmwinter() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemFeel.warmwinter)
  
  return warmwinter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemFeel::set_allocated_warmwinter(::std::string* warmwinter) {
  if (warmwinter != NULL) {
    
  } else {
    
  }
  warmwinter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warmwinter);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemFeel.warmwinter)
}

// string humidity = 17;
void WeatherItemFeel::clear_humidity() {
  humidity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherItemFeel::humidity() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemFeel.humidity)
  return humidity_.GetNoArena();
}
void WeatherItemFeel::set_humidity(const ::std::string& value) {
  
  humidity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemFeel.humidity)
}
#if LANG_CXX11
void WeatherItemFeel::set_humidity(::std::string&& value) {
  
  humidity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemFeel.humidity)
}
#endif
void WeatherItemFeel::set_humidity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  humidity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemFeel.humidity)
}
void WeatherItemFeel::set_humidity(const char* value, size_t size) {
  
  humidity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemFeel.humidity)
}
::std::string* WeatherItemFeel::mutable_humidity() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemFeel.humidity)
  return humidity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherItemFeel::release_humidity() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemFeel.humidity)
  
  return humidity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherItemFeel::set_allocated_humidity(::std::string* humidity) {
  if (humidity != NULL) {
    
  } else {
    
  }
  humidity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), humidity);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemFeel.humidity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeatherSummary::kWeatherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeatherSummary::WeatherSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_weather_5fitem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.WeatherSummary)
}
WeatherSummary::WeatherSummary(const WeatherSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weather_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.weather().size() > 0) {
    weather_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weather_);
  }
  // @@protoc_insertion_point(copy_constructor:NetProto.WeatherSummary)
}

void WeatherSummary::SharedCtor() {
  weather_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

WeatherSummary::~WeatherSummary() {
  // @@protoc_insertion_point(destructor:NetProto.WeatherSummary)
  SharedDtor();
}

void WeatherSummary::SharedDtor() {
  weather_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WeatherSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherSummary::descriptor() {
  protobuf_weather_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeatherSummary& WeatherSummary::default_instance() {
  protobuf_weather_5fitem_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeatherSummary* WeatherSummary::New(::google::protobuf::Arena* arena) const {
  WeatherSummary* n = new WeatherSummary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeatherSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.WeatherSummary)
  weather_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool WeatherSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.WeatherSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string weather = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weather()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->weather().data(), this->weather().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherSummary.weather"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.WeatherSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.WeatherSummary)
  return false;
#undef DO_
}

void WeatherSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.WeatherSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string weather = 1;
  if (this->weather().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weather().data(), this->weather().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherSummary.weather");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->weather(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.WeatherSummary)
}

::google::protobuf::uint8* WeatherSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.WeatherSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string weather = 1;
  if (this->weather().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weather().data(), this->weather().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherSummary.weather");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->weather(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.WeatherSummary)
  return target;
}

size_t WeatherSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.WeatherSummary)
  size_t total_size = 0;

  // string weather = 1;
  if (this->weather().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->weather());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.WeatherSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherSummary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeatherSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.WeatherSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.WeatherSummary)
    MergeFrom(*source);
  }
}

void WeatherSummary::MergeFrom(const WeatherSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.WeatherSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.weather().size() > 0) {

    weather_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weather_);
  }
}

void WeatherSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.WeatherSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherSummary::CopyFrom(const WeatherSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.WeatherSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherSummary::IsInitialized() const {
  return true;
}

void WeatherSummary::Swap(WeatherSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeatherSummary::InternalSwap(WeatherSummary* other) {
  weather_.Swap(&other->weather_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeatherSummary::GetMetadata() const {
  protobuf_weather_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeatherSummary

// string weather = 1;
void WeatherSummary::clear_weather() {
  weather_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherSummary::weather() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherSummary.weather)
  return weather_.GetNoArena();
}
void WeatherSummary::set_weather(const ::std::string& value) {
  
  weather_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherSummary.weather)
}
#if LANG_CXX11
void WeatherSummary::set_weather(::std::string&& value) {
  
  weather_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherSummary.weather)
}
#endif
void WeatherSummary::set_weather(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  weather_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherSummary.weather)
}
void WeatherSummary::set_weather(const char* value, size_t size) {
  
  weather_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherSummary.weather)
}
::std::string* WeatherSummary::mutable_weather() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherSummary.weather)
  return weather_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherSummary::release_weather() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherSummary.weather)
  
  return weather_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherSummary::set_allocated_weather(::std::string* weather) {
  if (weather != NULL) {
    
  } else {
    
  }
  weather_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weather);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherSummary.weather)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeatherEmotion_Emotion::kEmotionFieldNumber;
const int WeatherEmotion_Emotion::kDegreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeatherEmotion_Emotion::WeatherEmotion_Emotion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_weather_5fitem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.WeatherEmotion.Emotion)
}
WeatherEmotion_Emotion::WeatherEmotion_Emotion(const WeatherEmotion_Emotion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  emotion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.emotion().size() > 0) {
    emotion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emotion_);
  }
  degree_ = from.degree_;
  // @@protoc_insertion_point(copy_constructor:NetProto.WeatherEmotion.Emotion)
}

void WeatherEmotion_Emotion::SharedCtor() {
  emotion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  degree_ = 0;
  _cached_size_ = 0;
}

WeatherEmotion_Emotion::~WeatherEmotion_Emotion() {
  // @@protoc_insertion_point(destructor:NetProto.WeatherEmotion.Emotion)
  SharedDtor();
}

void WeatherEmotion_Emotion::SharedDtor() {
  emotion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WeatherEmotion_Emotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherEmotion_Emotion::descriptor() {
  protobuf_weather_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeatherEmotion_Emotion& WeatherEmotion_Emotion::default_instance() {
  protobuf_weather_5fitem_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeatherEmotion_Emotion* WeatherEmotion_Emotion::New(::google::protobuf::Arena* arena) const {
  WeatherEmotion_Emotion* n = new WeatherEmotion_Emotion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeatherEmotion_Emotion::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.WeatherEmotion.Emotion)
  emotion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  degree_ = 0;
}

bool WeatherEmotion_Emotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.WeatherEmotion.Emotion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string emotion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emotion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->emotion().data(), this->emotion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.WeatherEmotion.Emotion.emotion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float degree = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.WeatherEmotion.Emotion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.WeatherEmotion.Emotion)
  return false;
#undef DO_
}

void WeatherEmotion_Emotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.WeatherEmotion.Emotion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string emotion = 1;
  if (this->emotion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->emotion().data(), this->emotion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherEmotion.Emotion.emotion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->emotion(), output);
  }

  // float degree = 2;
  if (this->degree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->degree(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.WeatherEmotion.Emotion)
}

::google::protobuf::uint8* WeatherEmotion_Emotion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.WeatherEmotion.Emotion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string emotion = 1;
  if (this->emotion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->emotion().data(), this->emotion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.WeatherEmotion.Emotion.emotion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->emotion(), target);
  }

  // float degree = 2;
  if (this->degree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->degree(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.WeatherEmotion.Emotion)
  return target;
}

size_t WeatherEmotion_Emotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.WeatherEmotion.Emotion)
  size_t total_size = 0;

  // string emotion = 1;
  if (this->emotion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->emotion());
  }

  // float degree = 2;
  if (this->degree() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherEmotion_Emotion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.WeatherEmotion.Emotion)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherEmotion_Emotion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeatherEmotion_Emotion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.WeatherEmotion.Emotion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.WeatherEmotion.Emotion)
    MergeFrom(*source);
  }
}

void WeatherEmotion_Emotion::MergeFrom(const WeatherEmotion_Emotion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.WeatherEmotion.Emotion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.emotion().size() > 0) {

    emotion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emotion_);
  }
  if (from.degree() != 0) {
    set_degree(from.degree());
  }
}

void WeatherEmotion_Emotion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.WeatherEmotion.Emotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherEmotion_Emotion::CopyFrom(const WeatherEmotion_Emotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.WeatherEmotion.Emotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherEmotion_Emotion::IsInitialized() const {
  return true;
}

void WeatherEmotion_Emotion::Swap(WeatherEmotion_Emotion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeatherEmotion_Emotion::InternalSwap(WeatherEmotion_Emotion* other) {
  emotion_.Swap(&other->emotion_);
  std::swap(degree_, other->degree_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeatherEmotion_Emotion::GetMetadata() const {
  protobuf_weather_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeatherEmotion_Emotion

// string emotion = 1;
void WeatherEmotion_Emotion::clear_emotion() {
  emotion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeatherEmotion_Emotion::emotion() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherEmotion.Emotion.emotion)
  return emotion_.GetNoArena();
}
void WeatherEmotion_Emotion::set_emotion(const ::std::string& value) {
  
  emotion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherEmotion.Emotion.emotion)
}
#if LANG_CXX11
void WeatherEmotion_Emotion::set_emotion(::std::string&& value) {
  
  emotion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherEmotion.Emotion.emotion)
}
#endif
void WeatherEmotion_Emotion::set_emotion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  emotion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherEmotion.Emotion.emotion)
}
void WeatherEmotion_Emotion::set_emotion(const char* value, size_t size) {
  
  emotion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherEmotion.Emotion.emotion)
}
::std::string* WeatherEmotion_Emotion::mutable_emotion() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherEmotion.Emotion.emotion)
  return emotion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherEmotion_Emotion::release_emotion() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherEmotion.Emotion.emotion)
  
  return emotion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherEmotion_Emotion::set_allocated_emotion(::std::string* emotion) {
  if (emotion != NULL) {
    
  } else {
    
  }
  emotion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emotion);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherEmotion.Emotion.emotion)
}

// float degree = 2;
void WeatherEmotion_Emotion::clear_degree() {
  degree_ = 0;
}
float WeatherEmotion_Emotion::degree() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherEmotion.Emotion.degree)
  return degree_;
}
void WeatherEmotion_Emotion::set_degree(float value) {
  
  degree_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherEmotion.Emotion.degree)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeatherEmotion::kEmotionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeatherEmotion::WeatherEmotion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_weather_5fitem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.WeatherEmotion)
}
WeatherEmotion::WeatherEmotion(const WeatherEmotion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      emotion_(from.emotion_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetProto.WeatherEmotion)
}

void WeatherEmotion::SharedCtor() {
  _cached_size_ = 0;
}

WeatherEmotion::~WeatherEmotion() {
  // @@protoc_insertion_point(destructor:NetProto.WeatherEmotion)
  SharedDtor();
}

void WeatherEmotion::SharedDtor() {
}

void WeatherEmotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherEmotion::descriptor() {
  protobuf_weather_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeatherEmotion& WeatherEmotion::default_instance() {
  protobuf_weather_5fitem_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeatherEmotion* WeatherEmotion::New(::google::protobuf::Arena* arena) const {
  WeatherEmotion* n = new WeatherEmotion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeatherEmotion::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.WeatherEmotion)
  emotion_.Clear();
}

bool WeatherEmotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.WeatherEmotion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetProto.WeatherEmotion.Emotion emotion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emotion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.WeatherEmotion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.WeatherEmotion)
  return false;
#undef DO_
}

void WeatherEmotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.WeatherEmotion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NetProto.WeatherEmotion.Emotion emotion = 1;
  for (unsigned int i = 0, n = this->emotion_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->emotion(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.WeatherEmotion)
}

::google::protobuf::uint8* WeatherEmotion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.WeatherEmotion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NetProto.WeatherEmotion.Emotion emotion = 1;
  for (unsigned int i = 0, n = this->emotion_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->emotion(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.WeatherEmotion)
  return target;
}

size_t WeatherEmotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.WeatherEmotion)
  size_t total_size = 0;

  // repeated .NetProto.WeatherEmotion.Emotion emotion = 1;
  {
    unsigned int count = this->emotion_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emotion(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherEmotion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.WeatherEmotion)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherEmotion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeatherEmotion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.WeatherEmotion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.WeatherEmotion)
    MergeFrom(*source);
  }
}

void WeatherEmotion::MergeFrom(const WeatherEmotion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.WeatherEmotion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emotion_.MergeFrom(from.emotion_);
}

void WeatherEmotion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.WeatherEmotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherEmotion::CopyFrom(const WeatherEmotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.WeatherEmotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherEmotion::IsInitialized() const {
  return true;
}

void WeatherEmotion::Swap(WeatherEmotion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeatherEmotion::InternalSwap(WeatherEmotion* other) {
  emotion_.InternalSwap(&other->emotion_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeatherEmotion::GetMetadata() const {
  protobuf_weather_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeatherEmotion

// repeated .NetProto.WeatherEmotion.Emotion emotion = 1;
int WeatherEmotion::emotion_size() const {
  return emotion_.size();
}
void WeatherEmotion::clear_emotion() {
  emotion_.Clear();
}
const ::NetProto::WeatherEmotion_Emotion& WeatherEmotion::emotion(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherEmotion.emotion)
  return emotion_.Get(index);
}
::NetProto::WeatherEmotion_Emotion* WeatherEmotion::mutable_emotion(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherEmotion.emotion)
  return emotion_.Mutable(index);
}
::NetProto::WeatherEmotion_Emotion* WeatherEmotion::add_emotion() {
  // @@protoc_insertion_point(field_add:NetProto.WeatherEmotion.emotion)
  return emotion_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::WeatherEmotion_Emotion >*
WeatherEmotion::mutable_emotion() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.WeatherEmotion.emotion)
  return &emotion_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::WeatherEmotion_Emotion >&
WeatherEmotion::emotion() const {
  // @@protoc_insertion_point(field_list:NetProto.WeatherEmotion.emotion)
  return emotion_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CResult::kHeadFieldNumber;
const int CResult::kSeeFieldNumber;
const int CResult::kHeardFieldNumber;
const int CResult::kFeelFieldNumber;
const int CResult::kSummaryFieldNumber;
const int CResult::kEmotionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CResult::CResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_weather_5fitem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.CResult)
}
CResult::CResult(const CResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::NetProto::MsgHead(*from.head_);
  } else {
    head_ = NULL;
  }
  if (from.has_see()) {
    see_ = new ::NetProto::WeatherItemSee(*from.see_);
  } else {
    see_ = NULL;
  }
  if (from.has_heard()) {
    heard_ = new ::NetProto::WeatherItemHeard(*from.heard_);
  } else {
    heard_ = NULL;
  }
  if (from.has_feel()) {
    feel_ = new ::NetProto::WeatherItemFeel(*from.feel_);
  } else {
    feel_ = NULL;
  }
  if (from.has_summary()) {
    summary_ = new ::NetProto::WeatherSummary(*from.summary_);
  } else {
    summary_ = NULL;
  }
  if (from.has_emotion()) {
    emotion_ = new ::NetProto::WeatherEmotion(*from.emotion_);
  } else {
    emotion_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NetProto.CResult)
}

void CResult::SharedCtor() {
  ::memset(&head_, 0, reinterpret_cast<char*>(&emotion_) -
    reinterpret_cast<char*>(&head_) + sizeof(emotion_));
  _cached_size_ = 0;
}

CResult::~CResult() {
  // @@protoc_insertion_point(destructor:NetProto.CResult)
  SharedDtor();
}

void CResult::SharedDtor() {
  if (this != internal_default_instance()) {
    delete head_;
  }
  if (this != internal_default_instance()) {
    delete see_;
  }
  if (this != internal_default_instance()) {
    delete heard_;
  }
  if (this != internal_default_instance()) {
    delete feel_;
  }
  if (this != internal_default_instance()) {
    delete summary_;
  }
  if (this != internal_default_instance()) {
    delete emotion_;
  }
}

void CResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CResult::descriptor() {
  protobuf_weather_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CResult& CResult::default_instance() {
  protobuf_weather_5fitem_2eproto::InitDefaults();
  return *internal_default_instance();
}

CResult* CResult::New(::google::protobuf::Arena* arena) const {
  CResult* n = new CResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CResult::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.CResult)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  if (GetArenaNoVirtual() == NULL && see_ != NULL) {
    delete see_;
  }
  see_ = NULL;
  if (GetArenaNoVirtual() == NULL && heard_ != NULL) {
    delete heard_;
  }
  heard_ = NULL;
  if (GetArenaNoVirtual() == NULL && feel_ != NULL) {
    delete feel_;
  }
  feel_ = NULL;
  if (GetArenaNoVirtual() == NULL && summary_ != NULL) {
    delete summary_;
  }
  summary_ = NULL;
  if (GetArenaNoVirtual() == NULL && emotion_ != NULL) {
    delete emotion_;
  }
  emotion_ = NULL;
}

bool CResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.CResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.WeatherItemSee see = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_see()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.WeatherItemHeard heard = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.WeatherItemFeel feel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.WeatherSummary summary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.WeatherEmotion emotion = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emotion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.CResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.CResult)
  return false;
#undef DO_
}

void CResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.CResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // .NetProto.WeatherItemSee see = 2;
  if (this->has_see()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->see_, output);
  }

  // .NetProto.WeatherItemHeard heard = 3;
  if (this->has_heard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->heard_, output);
  }

  // .NetProto.WeatherItemFeel feel = 4;
  if (this->has_feel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->feel_, output);
  }

  // .NetProto.WeatherSummary summary = 5;
  if (this->has_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->summary_, output);
  }

  // .NetProto.WeatherEmotion emotion = 6;
  if (this->has_emotion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->emotion_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.CResult)
}

::google::protobuf::uint8* CResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.CResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // .NetProto.WeatherItemSee see = 2;
  if (this->has_see()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->see_, deterministic, target);
  }

  // .NetProto.WeatherItemHeard heard = 3;
  if (this->has_heard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->heard_, deterministic, target);
  }

  // .NetProto.WeatherItemFeel feel = 4;
  if (this->has_feel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->feel_, deterministic, target);
  }

  // .NetProto.WeatherSummary summary = 5;
  if (this->has_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->summary_, deterministic, target);
  }

  // .NetProto.WeatherEmotion emotion = 6;
  if (this->has_emotion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->emotion_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.CResult)
  return target;
}

size_t CResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.CResult)
  size_t total_size = 0;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // .NetProto.WeatherItemSee see = 2;
  if (this->has_see()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->see_);
  }

  // .NetProto.WeatherItemHeard heard = 3;
  if (this->has_heard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heard_);
  }

  // .NetProto.WeatherItemFeel feel = 4;
  if (this->has_feel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->feel_);
  }

  // .NetProto.WeatherSummary summary = 5;
  if (this->has_summary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->summary_);
  }

  // .NetProto.WeatherEmotion emotion = 6;
  if (this->has_emotion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->emotion_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.CResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.CResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.CResult)
    MergeFrom(*source);
  }
}

void CResult::MergeFrom(const CResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.CResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::NetProto::MsgHead::MergeFrom(from.head());
  }
  if (from.has_see()) {
    mutable_see()->::NetProto::WeatherItemSee::MergeFrom(from.see());
  }
  if (from.has_heard()) {
    mutable_heard()->::NetProto::WeatherItemHeard::MergeFrom(from.heard());
  }
  if (from.has_feel()) {
    mutable_feel()->::NetProto::WeatherItemFeel::MergeFrom(from.feel());
  }
  if (from.has_summary()) {
    mutable_summary()->::NetProto::WeatherSummary::MergeFrom(from.summary());
  }
  if (from.has_emotion()) {
    mutable_emotion()->::NetProto::WeatherEmotion::MergeFrom(from.emotion());
  }
}

void CResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.CResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CResult::CopyFrom(const CResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.CResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CResult::IsInitialized() const {
  return true;
}

void CResult::Swap(CResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CResult::InternalSwap(CResult* other) {
  std::swap(head_, other->head_);
  std::swap(see_, other->see_);
  std::swap(heard_, other->heard_);
  std::swap(feel_, other->feel_);
  std::swap(summary_, other->summary_);
  std::swap(emotion_, other->emotion_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CResult::GetMetadata() const {
  protobuf_weather_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CResult

// .NetProto.MsgHead head = 1;
bool CResult::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void CResult::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::NetProto::MsgHead& CResult::head() const {
  // @@protoc_insertion_point(field_get:NetProto.CResult.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* CResult::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CResult.head)
  return head_;
}
::NetProto::MsgHead* CResult::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.CResult.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
void CResult::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CResult.head)
}

// .NetProto.WeatherItemSee see = 2;
bool CResult::has_see() const {
  return this != internal_default_instance() && see_ != NULL;
}
void CResult::clear_see() {
  if (GetArenaNoVirtual() == NULL && see_ != NULL) delete see_;
  see_ = NULL;
}
const ::NetProto::WeatherItemSee& CResult::see() const {
  // @@protoc_insertion_point(field_get:NetProto.CResult.see)
  return see_ != NULL ? *see_
                         : *::NetProto::WeatherItemSee::internal_default_instance();
}
::NetProto::WeatherItemSee* CResult::mutable_see() {
  
  if (see_ == NULL) {
    see_ = new ::NetProto::WeatherItemSee;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CResult.see)
  return see_;
}
::NetProto::WeatherItemSee* CResult::release_see() {
  // @@protoc_insertion_point(field_release:NetProto.CResult.see)
  
  ::NetProto::WeatherItemSee* temp = see_;
  see_ = NULL;
  return temp;
}
void CResult::set_allocated_see(::NetProto::WeatherItemSee* see) {
  delete see_;
  see_ = see;
  if (see) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CResult.see)
}

// .NetProto.WeatherItemHeard heard = 3;
bool CResult::has_heard() const {
  return this != internal_default_instance() && heard_ != NULL;
}
void CResult::clear_heard() {
  if (GetArenaNoVirtual() == NULL && heard_ != NULL) delete heard_;
  heard_ = NULL;
}
const ::NetProto::WeatherItemHeard& CResult::heard() const {
  // @@protoc_insertion_point(field_get:NetProto.CResult.heard)
  return heard_ != NULL ? *heard_
                         : *::NetProto::WeatherItemHeard::internal_default_instance();
}
::NetProto::WeatherItemHeard* CResult::mutable_heard() {
  
  if (heard_ == NULL) {
    heard_ = new ::NetProto::WeatherItemHeard;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CResult.heard)
  return heard_;
}
::NetProto::WeatherItemHeard* CResult::release_heard() {
  // @@protoc_insertion_point(field_release:NetProto.CResult.heard)
  
  ::NetProto::WeatherItemHeard* temp = heard_;
  heard_ = NULL;
  return temp;
}
void CResult::set_allocated_heard(::NetProto::WeatherItemHeard* heard) {
  delete heard_;
  heard_ = heard;
  if (heard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CResult.heard)
}

// .NetProto.WeatherItemFeel feel = 4;
bool CResult::has_feel() const {
  return this != internal_default_instance() && feel_ != NULL;
}
void CResult::clear_feel() {
  if (GetArenaNoVirtual() == NULL && feel_ != NULL) delete feel_;
  feel_ = NULL;
}
const ::NetProto::WeatherItemFeel& CResult::feel() const {
  // @@protoc_insertion_point(field_get:NetProto.CResult.feel)
  return feel_ != NULL ? *feel_
                         : *::NetProto::WeatherItemFeel::internal_default_instance();
}
::NetProto::WeatherItemFeel* CResult::mutable_feel() {
  
  if (feel_ == NULL) {
    feel_ = new ::NetProto::WeatherItemFeel;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CResult.feel)
  return feel_;
}
::NetProto::WeatherItemFeel* CResult::release_feel() {
  // @@protoc_insertion_point(field_release:NetProto.CResult.feel)
  
  ::NetProto::WeatherItemFeel* temp = feel_;
  feel_ = NULL;
  return temp;
}
void CResult::set_allocated_feel(::NetProto::WeatherItemFeel* feel) {
  delete feel_;
  feel_ = feel;
  if (feel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CResult.feel)
}

// .NetProto.WeatherSummary summary = 5;
bool CResult::has_summary() const {
  return this != internal_default_instance() && summary_ != NULL;
}
void CResult::clear_summary() {
  if (GetArenaNoVirtual() == NULL && summary_ != NULL) delete summary_;
  summary_ = NULL;
}
const ::NetProto::WeatherSummary& CResult::summary() const {
  // @@protoc_insertion_point(field_get:NetProto.CResult.summary)
  return summary_ != NULL ? *summary_
                         : *::NetProto::WeatherSummary::internal_default_instance();
}
::NetProto::WeatherSummary* CResult::mutable_summary() {
  
  if (summary_ == NULL) {
    summary_ = new ::NetProto::WeatherSummary;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CResult.summary)
  return summary_;
}
::NetProto::WeatherSummary* CResult::release_summary() {
  // @@protoc_insertion_point(field_release:NetProto.CResult.summary)
  
  ::NetProto::WeatherSummary* temp = summary_;
  summary_ = NULL;
  return temp;
}
void CResult::set_allocated_summary(::NetProto::WeatherSummary* summary) {
  delete summary_;
  summary_ = summary;
  if (summary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CResult.summary)
}

// .NetProto.WeatherEmotion emotion = 6;
bool CResult::has_emotion() const {
  return this != internal_default_instance() && emotion_ != NULL;
}
void CResult::clear_emotion() {
  if (GetArenaNoVirtual() == NULL && emotion_ != NULL) delete emotion_;
  emotion_ = NULL;
}
const ::NetProto::WeatherEmotion& CResult::emotion() const {
  // @@protoc_insertion_point(field_get:NetProto.CResult.emotion)
  return emotion_ != NULL ? *emotion_
                         : *::NetProto::WeatherEmotion::internal_default_instance();
}
::NetProto::WeatherEmotion* CResult::mutable_emotion() {
  
  if (emotion_ == NULL) {
    emotion_ = new ::NetProto::WeatherEmotion;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CResult.emotion)
  return emotion_;
}
::NetProto::WeatherEmotion* CResult::release_emotion() {
  // @@protoc_insertion_point(field_release:NetProto.CResult.emotion)
  
  ::NetProto::WeatherEmotion* temp = emotion_;
  emotion_ = NULL;
  return temp;
}
void CResult::set_allocated_emotion(::NetProto::WeatherEmotion* emotion) {
  delete emotion_;
  emotion_ = emotion;
  if (emotion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CResult.emotion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
