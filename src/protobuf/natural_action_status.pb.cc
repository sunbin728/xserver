// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: natural_action_status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "natural_action_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
namespace Action {
namespace Status {
class ActStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActStatus> {
} _ActStatus_default_instance_;
class OpenStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpenStatus> {
} _OpenStatus_default_instance_;
class ContainerStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContainerStatus> {
} _ContainerStatus_default_instance_;
class FillAttrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FillAttr> {
} _FillAttr_default_instance_;
class BurnStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BurnStatus> {
} _BurnStatus_default_instance_;
class AllOpenStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AllOpenStatus> {
} _AllOpenStatus_default_instance_;
class AttrStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AttrStatus> {
} _AttrStatus_default_instance_;
class EmsComingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmsComing> {
} _EmsComing_default_instance_;
class NaturalActionStatusDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NaturalActionStatusData> {
} _NaturalActionStatusData_default_instance_;
class NaturalActionStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NaturalActionStatus> {
} _NaturalActionStatus_default_instance_;
class NotifyNaturalStatusChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyNaturalStatusChange> {
} _NotifyNaturalStatusChange_default_instance_;

namespace protobuf_natural_5faction_5fstatus_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActStatus, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActStatus, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActStatus, obj_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenStatus, obj_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenStatus, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenStatus, feel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, container_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillAttr, container_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillAttr, obj_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillAttr, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BurnStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BurnStatus, obj_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BurnStatus, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOpenStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOpenStatus, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOpenStatus, abstract_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOpenStatus, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrStatus, obj_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrStatus, attr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrStatus, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrStatus, feel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrStatus, feel_degree_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmsComing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmsComing, obj_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmsComing, item_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatusData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatusData, pos_relation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatusData, open_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatusData, act_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatusData, container_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatusData, fill_attr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatusData, burn_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatusData, all_open_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatusData, attr_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatusData, ems_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatusData, pretend_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatus, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatus, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaturalActionStatus, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNaturalStatusChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNaturalStatusChange, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNaturalStatusChange, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNaturalStatusChange, statusarray_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ActStatus)},
  { 8, -1, sizeof(OpenStatus)},
  { 16, -1, sizeof(ContainerStatus)},
  { 23, -1, sizeof(FillAttr)},
  { 31, -1, sizeof(BurnStatus)},
  { 38, -1, sizeof(AllOpenStatus)},
  { 46, -1, sizeof(AttrStatus)},
  { 56, -1, sizeof(EmsComing)},
  { 63, -1, sizeof(NaturalActionStatusData)},
  { 78, -1, sizeof(NaturalActionStatus)},
  { 86, -1, sizeof(NotifyNaturalStatusChange)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpenStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContainerStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FillAttr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BurnStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AllOpenStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AttrStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmsComing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NaturalActionStatusData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NaturalActionStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyNaturalStatusChange_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "natural_action_status.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace

void TableStruct::Shutdown() {
  _ActStatus_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _OpenStatus_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ContainerStatus_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _FillAttr_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _BurnStatus_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _AllOpenStatus_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _AttrStatus_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _EmsComing_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _NaturalActionStatusData_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _NaturalActionStatus_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _NotifyNaturalStatusChange_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::NetProto::protobuf_obj_5fpos_5frelation_2eproto::InitDefaults();
  ::NetProto::Action::Status::protobuf_my_5fproto_2eproto::InitDefaults();
  ::NetProto::protobuf_role_5fstatus_5fevent_2eproto::InitDefaults();
  _ActStatus_default_instance_.DefaultConstruct();
  _OpenStatus_default_instance_.DefaultConstruct();
  _ContainerStatus_default_instance_.DefaultConstruct();
  _FillAttr_default_instance_.DefaultConstruct();
  _BurnStatus_default_instance_.DefaultConstruct();
  _AllOpenStatus_default_instance_.DefaultConstruct();
  _AttrStatus_default_instance_.DefaultConstruct();
  _EmsComing_default_instance_.DefaultConstruct();
  _NaturalActionStatusData_default_instance_.DefaultConstruct();
  _NaturalActionStatus_default_instance_.DefaultConstruct();
  _NotifyNaturalStatusChange_default_instance_.DefaultConstruct();
  _NaturalActionStatusData_default_instance_.get_mutable()->pos_relation_ = const_cast< ::NetProto::ObjPosRelation*>(
      ::NetProto::ObjPosRelation::internal_default_instance());
  _NaturalActionStatusData_default_instance_.get_mutable()->open_status_ = const_cast< ::NetProto::Action::Status::OpenStatus*>(
      ::NetProto::Action::Status::OpenStatus::internal_default_instance());
  _NaturalActionStatusData_default_instance_.get_mutable()->act_status_ = const_cast< ::NetProto::Action::Status::ActStatus*>(
      ::NetProto::Action::Status::ActStatus::internal_default_instance());
  _NaturalActionStatusData_default_instance_.get_mutable()->container_status_ = const_cast< ::NetProto::Action::Status::ContainerStatus*>(
      ::NetProto::Action::Status::ContainerStatus::internal_default_instance());
  _NaturalActionStatusData_default_instance_.get_mutable()->fill_attr_ = const_cast< ::NetProto::Action::Status::FillAttr*>(
      ::NetProto::Action::Status::FillAttr::internal_default_instance());
  _NaturalActionStatusData_default_instance_.get_mutable()->burn_status_ = const_cast< ::NetProto::Action::Status::BurnStatus*>(
      ::NetProto::Action::Status::BurnStatus::internal_default_instance());
  _NaturalActionStatusData_default_instance_.get_mutable()->all_open_status_ = const_cast< ::NetProto::Action::Status::AllOpenStatus*>(
      ::NetProto::Action::Status::AllOpenStatus::internal_default_instance());
  _NaturalActionStatusData_default_instance_.get_mutable()->attr_status_ = const_cast< ::NetProto::Action::Status::AttrStatus*>(
      ::NetProto::Action::Status::AttrStatus::internal_default_instance());
  _NaturalActionStatusData_default_instance_.get_mutable()->ems_status_ = const_cast< ::NetProto::Action::Status::EmsComing*>(
      ::NetProto::Action::Status::EmsComing::internal_default_instance());
  _NaturalActionStatusData_default_instance_.get_mutable()->pretend_status_ = const_cast< ::NetProto::Action::Status::Pretend*>(
      ::NetProto::Action::Status::Pretend::internal_default_instance());
  _NaturalActionStatus_default_instance_.get_mutable()->data_ = const_cast< ::NetProto::Action::Status::NaturalActionStatusData*>(
      ::NetProto::Action::Status::NaturalActionStatusData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\033natural_action_status.proto\022\026NetProto."
      "Action.Status\032\026obj_pos_relation.proto\032\016m"
      "y_proto.proto\032\027role_status_event.proto\"V"
      "\n\tActStatus\022\020\n\010robot_id\030\n \001(\t\022\'\n\004type\030\024 "
      "\001(\0162\031.NetProto.RoleStatusEvent\022\016\n\006obj_id"
      "\030\036 \001(\t\"`\n\nOpenStatus\022\016\n\006obj_id\030\n \001(\t\0224\n\004"
      "type\030\024 \001(\0162&.NetProto.Action.Status.Open"
      "StatusType\022\014\n\004feel\030\036 \001(\t\"5\n\017ContainerSta"
      "tus\022\024\n\014container_id\030\n \001(\t\022\014\n\004type\030\024 \001(\r\""
      "d\n\010FillAttr\022\024\n\014container_id\030\n \001(\t\022\016\n\006obj"
      "_id\030\024 \001(\t\0222\n\004type\030\036 \001(\0162$.NetProto.Actio"
      "n.Status.FillAttrType\"R\n\nBurnStatus\022\016\n\006o"
      "bj_id\030\n \001(\t\0224\n\004type\030\024 \001(\0162&.NetProto.Act"
      "ion.Status.BurnStatusType\"k\n\rAllOpenStat"
      "us\022\017\n\007room_id\030\n \001(\t\022\023\n\013abstract_id\030\024 \001(\t"
      "\0224\n\004type\030\036 \001(\0162&.NetProto.Action.Status."
      "OpenStatusType\"\370\001\n\nAttrStatus\022\016\n\006obj_id\030"
      "\001 \001(\t\0225\n\004attr\030\002 \001(\0162\'.NetProto.Action.St"
      "atus.AttrStatus.Attr\022\014\n\004desc\030\003 \001(\t\022\014\n\004fe"
      "el\030\004 \001(\t\022\023\n\013feel_degree\030\005 \001(\002\"r\n\004Attr\022\t\n"
      "\005COLOR\020\000\022\n\n\006WEIGHT\020\001\022\013\n\007TACTILE\020\002\022\t\n\005SME"
      "LL\020\003\022\n\n\006BUBBLE\020\004\022\t\n\005VOICE\020\005\022\017\n\013TEMPERATU"
      "RE\020\006\022\t\n\005TOTAL\020\007\022\010\n\004SELF\020\010\",\n\tEmsComing\022\016"
      "\n\006obj_id\030\001 \001(\t\022\017\n\007item_id\030\002 \001(\t\"\323\004\n\027Natu"
      "ralActionStatusData\022.\n\014pos_relation\030\001 \001("
      "\0132\030.NetProto.ObjPosRelation\0227\n\013open_stat"
      "us\030\003 \001(\0132\".NetProto.Action.Status.OpenSt"
      "atus\0225\n\nact_status\030\004 \001(\0132!.NetProto.Acti"
      "on.Status.ActStatus\022A\n\020container_status\030"
      "\005 \001(\0132\'.NetProto.Action.Status.Container"
      "Status\0223\n\tfill_attr\030\006 \001(\0132 .NetProto.Act"
      "ion.Status.FillAttr\0227\n\013burn_status\030\007 \001(\013"
      "2\".NetProto.Action.Status.BurnStatus\022>\n\017"
      "all_open_status\030\010 \001(\0132%.NetProto.Action."
      "Status.AllOpenStatus\0227\n\013attr_status\030\t \001("
      "\0132\".NetProto.Action.Status.AttrStatus\0225\n"
      "\nems_status\030\024 \001(\0132!.NetProto.Action.Stat"
      "us.EmsComing\0227\n\016pretend_status\030\025 \001(\0132\037.N"
      "etProto.Action.Status.Pretend\"\241\001\n\023Natura"
      "lActionStatus\022\014\n\004flag\030\001 \001(\r\022=\n\004type\030\002 \001("
      "\0162/.NetProto.Action.Status.NaturalAction"
      "StatusType\022=\n\004data\030\003 \001(\0132/.NetProto.Acti"
      "on.Status.NaturalActionStatusData\"\201\001\n\031No"
      "tifyNaturalStatusChange\022\020\n\010robot_id\030\n \001("
      "\t\022\020\n\010scene_id\030\001 \001(\r\022@\n\013statusArray\030\002 \003(\013"
      "2+.NetProto.Action.Status.NaturalActionS"
      "tatus*(\n\016OpenStatusType\022\n\n\006OPENED\020\000\022\n\n\006C"
      "LOSED\020\001*Q\n\023ContainerStatusType\022\017\n\013CS_OVE"
      "RFLOW\020\000\022\013\n\007CS_FULL\020\001\022\014\n\010CS_EMPTY\020\002\022\016\n\nCS"
      "_PARTIAL\020\003*7\n\014FillAttrType\022\013\n\007ONE_ONE\020\000\022"
      "\013\n\007ONE_TWO\020\001\022\r\n\tONE_THIRD\020\002*,\n\016BurnStatu"
      "sType\022\014\n\010BURNNING\020\000\022\014\n\010WENT_OUT\020\001*\364\001\n\027Na"
      "turalActionStatusType\022\n\n\006Unkown\020\000\022\025\n\021REL"
      "ATION_POSITION\020\001\022\023\n\017STATUS_OPENNING\020\003\022\021\n"
      "\rSTATUS_ACTION\020\004\022\024\n\020STATUS_CONTAINER\020\005\022\025"
      "\n\021ATTR_FILLING_WITH\020\006\022\023\n\017STATUS_BURNNING"
      "\020\007\022\027\n\023STATUS_ALL_OPENNING\020\010\022\017\n\013STATUS_AT"
      "TR\020\t\022\016\n\nSTATUS_EMS\020\024\022\022\n\016STATUS_PRETEND\020\025"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "natural_action_status.proto", &protobuf_RegisterTypes);
  ::NetProto::protobuf_obj_5fpos_5frelation_2eproto::AddDescriptors();
  ::NetProto::Action::Status::protobuf_my_5fproto_2eproto::AddDescriptors();
  ::NetProto::protobuf_role_5fstatus_5fevent_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_natural_5faction_5fstatus_2eproto

const ::google::protobuf::EnumDescriptor* AttrStatus_Attr_descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_enum_descriptors[0];
}
bool AttrStatus_Attr_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AttrStatus_Attr AttrStatus::COLOR;
const AttrStatus_Attr AttrStatus::WEIGHT;
const AttrStatus_Attr AttrStatus::TACTILE;
const AttrStatus_Attr AttrStatus::SMELL;
const AttrStatus_Attr AttrStatus::BUBBLE;
const AttrStatus_Attr AttrStatus::VOICE;
const AttrStatus_Attr AttrStatus::TEMPERATURE;
const AttrStatus_Attr AttrStatus::TOTAL;
const AttrStatus_Attr AttrStatus::SELF;
const AttrStatus_Attr AttrStatus::Attr_MIN;
const AttrStatus_Attr AttrStatus::Attr_MAX;
const int AttrStatus::Attr_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OpenStatusType_descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_enum_descriptors[1];
}
bool OpenStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContainerStatusType_descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_enum_descriptors[2];
}
bool ContainerStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FillAttrType_descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_enum_descriptors[3];
}
bool FillAttrType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BurnStatusType_descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_enum_descriptors[4];
}
bool BurnStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NaturalActionStatusType_descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_enum_descriptors[5];
}
bool NaturalActionStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActStatus::kRobotIdFieldNumber;
const int ActStatus::kTypeFieldNumber;
const int ActStatus::kObjIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActStatus::ActStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Action.Status.ActStatus)
}
ActStatus::ActStatus(const ActStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.robot_id().size() > 0) {
    robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
  }
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.obj_id().size() > 0) {
    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Action.Status.ActStatus)
}

void ActStatus::SharedCtor() {
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

ActStatus::~ActStatus() {
  // @@protoc_insertion_point(destructor:NetProto.Action.Status.ActStatus)
  SharedDtor();
}

void ActStatus::SharedDtor() {
  robot_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obj_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ActStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActStatus::descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActStatus& ActStatus::default_instance() {
  protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActStatus* ActStatus::New(::google::protobuf::Arena* arena) const {
  ActStatus* n = new ActStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Action.Status.ActStatus)
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool ActStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Action.Status.ActStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string robot_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->robot_id().data(), this->robot_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.ActStatus.robot_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.RoleStatusEvent type = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetProto::RoleStatusEvent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string obj_id = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->obj_id().data(), this->obj_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.ActStatus.obj_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Action.Status.ActStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Action.Status.ActStatus)
  return false;
#undef DO_
}

void ActStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Action.Status.ActStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 10;
  if (this->robot_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robot_id().data(), this->robot_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.ActStatus.robot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->robot_id(), output);
  }

  // .NetProto.RoleStatusEvent type = 20;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->type(), output);
  }

  // string obj_id = 30;
  if (this->obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.ActStatus.obj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->obj_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Action.Status.ActStatus)
}

::google::protobuf::uint8* ActStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Action.Status.ActStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 10;
  if (this->robot_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robot_id().data(), this->robot_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.ActStatus.robot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->robot_id(), target);
  }

  // .NetProto.RoleStatusEvent type = 20;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->type(), target);
  }

  // string obj_id = 30;
  if (this->obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.ActStatus.obj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->obj_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Action.Status.ActStatus)
  return target;
}

size_t ActStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Action.Status.ActStatus)
  size_t total_size = 0;

  // string robot_id = 10;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->robot_id());
  }

  // string obj_id = 30;
  if (this->obj_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_id());
  }

  // .NetProto.RoleStatusEvent type = 20;
  if (this->type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Action.Status.ActStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ActStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Action.Status.ActStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Action.Status.ActStatus)
    MergeFrom(*source);
  }
}

void ActStatus::MergeFrom(const ActStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Action.Status.ActStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {

    robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
  }
  if (from.obj_id().size() > 0) {

    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ActStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Action.Status.ActStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActStatus::CopyFrom(const ActStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Action.Status.ActStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActStatus::IsInitialized() const {
  return true;
}

void ActStatus::Swap(ActStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActStatus::InternalSwap(ActStatus* other) {
  robot_id_.Swap(&other->robot_id_);
  obj_id_.Swap(&other->obj_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActStatus::GetMetadata() const {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActStatus

// string robot_id = 10;
void ActStatus::clear_robot_id() {
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ActStatus::robot_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.ActStatus.robot_id)
  return robot_id_.GetNoArena();
}
void ActStatus::set_robot_id(const ::std::string& value) {
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.ActStatus.robot_id)
}
#if LANG_CXX11
void ActStatus::set_robot_id(::std::string&& value) {
  
  robot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.ActStatus.robot_id)
}
#endif
void ActStatus::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.ActStatus.robot_id)
}
void ActStatus::set_robot_id(const char* value, size_t size) {
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.ActStatus.robot_id)
}
::std::string* ActStatus::mutable_robot_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.ActStatus.robot_id)
  return robot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActStatus::release_robot_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.ActStatus.robot_id)
  
  return robot_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActStatus::set_allocated_robot_id(::std::string* robot_id) {
  if (robot_id != NULL) {
    
  } else {
    
  }
  robot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.ActStatus.robot_id)
}

// .NetProto.RoleStatusEvent type = 20;
void ActStatus::clear_type() {
  type_ = 0;
}
::NetProto::RoleStatusEvent ActStatus::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.ActStatus.type)
  return static_cast< ::NetProto::RoleStatusEvent >(type_);
}
void ActStatus::set_type(::NetProto::RoleStatusEvent value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.ActStatus.type)
}

// string obj_id = 30;
void ActStatus::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ActStatus::obj_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.ActStatus.obj_id)
  return obj_id_.GetNoArena();
}
void ActStatus::set_obj_id(const ::std::string& value) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.ActStatus.obj_id)
}
#if LANG_CXX11
void ActStatus::set_obj_id(::std::string&& value) {
  
  obj_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.ActStatus.obj_id)
}
#endif
void ActStatus::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.ActStatus.obj_id)
}
void ActStatus::set_obj_id(const char* value, size_t size) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.ActStatus.obj_id)
}
::std::string* ActStatus::mutable_obj_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.ActStatus.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActStatus::release_obj_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.ActStatus.obj_id)
  
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActStatus::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    
  } else {
    
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.ActStatus.obj_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenStatus::kObjIdFieldNumber;
const int OpenStatus::kTypeFieldNumber;
const int OpenStatus::kFeelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenStatus::OpenStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Action.Status.OpenStatus)
}
OpenStatus::OpenStatus(const OpenStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.obj_id().size() > 0) {
    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  feel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.feel().size() > 0) {
    feel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feel_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Action.Status.OpenStatus)
}

void OpenStatus::SharedCtor() {
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

OpenStatus::~OpenStatus() {
  // @@protoc_insertion_point(destructor:NetProto.Action.Status.OpenStatus)
  SharedDtor();
}

void OpenStatus::SharedDtor() {
  obj_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpenStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenStatus::descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenStatus& OpenStatus::default_instance() {
  protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpenStatus* OpenStatus::New(::google::protobuf::Arena* arena) const {
  OpenStatus* n = new OpenStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Action.Status.OpenStatus)
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool OpenStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Action.Status.OpenStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string obj_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->obj_id().data(), this->obj_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.OpenStatus.obj_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.OpenStatusType type = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetProto::Action::Status::OpenStatusType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string feel = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feel().data(), this->feel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.OpenStatus.feel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Action.Status.OpenStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Action.Status.OpenStatus)
  return false;
#undef DO_
}

void OpenStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Action.Status.OpenStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string obj_id = 10;
  if (this->obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.OpenStatus.obj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->obj_id(), output);
  }

  // .NetProto.Action.Status.OpenStatusType type = 20;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->type(), output);
  }

  // string feel = 30;
  if (this->feel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feel().data(), this->feel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.OpenStatus.feel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->feel(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Action.Status.OpenStatus)
}

::google::protobuf::uint8* OpenStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Action.Status.OpenStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string obj_id = 10;
  if (this->obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.OpenStatus.obj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->obj_id(), target);
  }

  // .NetProto.Action.Status.OpenStatusType type = 20;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->type(), target);
  }

  // string feel = 30;
  if (this->feel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feel().data(), this->feel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.OpenStatus.feel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->feel(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Action.Status.OpenStatus)
  return target;
}

size_t OpenStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Action.Status.OpenStatus)
  size_t total_size = 0;

  // string obj_id = 10;
  if (this->obj_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_id());
  }

  // string feel = 30;
  if (this->feel().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feel());
  }

  // .NetProto.Action.Status.OpenStatusType type = 20;
  if (this->type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Action.Status.OpenStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Action.Status.OpenStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Action.Status.OpenStatus)
    MergeFrom(*source);
  }
}

void OpenStatus::MergeFrom(const OpenStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Action.Status.OpenStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obj_id().size() > 0) {

    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  if (from.feel().size() > 0) {

    feel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feel_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void OpenStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Action.Status.OpenStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenStatus::CopyFrom(const OpenStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Action.Status.OpenStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenStatus::IsInitialized() const {
  return true;
}

void OpenStatus::Swap(OpenStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenStatus::InternalSwap(OpenStatus* other) {
  obj_id_.Swap(&other->obj_id_);
  feel_.Swap(&other->feel_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenStatus::GetMetadata() const {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenStatus

// string obj_id = 10;
void OpenStatus::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpenStatus::obj_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.OpenStatus.obj_id)
  return obj_id_.GetNoArena();
}
void OpenStatus::set_obj_id(const ::std::string& value) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.OpenStatus.obj_id)
}
#if LANG_CXX11
void OpenStatus::set_obj_id(::std::string&& value) {
  
  obj_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.OpenStatus.obj_id)
}
#endif
void OpenStatus::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.OpenStatus.obj_id)
}
void OpenStatus::set_obj_id(const char* value, size_t size) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.OpenStatus.obj_id)
}
::std::string* OpenStatus::mutable_obj_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.OpenStatus.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpenStatus::release_obj_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.OpenStatus.obj_id)
  
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpenStatus::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    
  } else {
    
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.OpenStatus.obj_id)
}

// .NetProto.Action.Status.OpenStatusType type = 20;
void OpenStatus::clear_type() {
  type_ = 0;
}
::NetProto::Action::Status::OpenStatusType OpenStatus::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.OpenStatus.type)
  return static_cast< ::NetProto::Action::Status::OpenStatusType >(type_);
}
void OpenStatus::set_type(::NetProto::Action::Status::OpenStatusType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.OpenStatus.type)
}

// string feel = 30;
void OpenStatus::clear_feel() {
  feel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpenStatus::feel() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.OpenStatus.feel)
  return feel_.GetNoArena();
}
void OpenStatus::set_feel(const ::std::string& value) {
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.OpenStatus.feel)
}
#if LANG_CXX11
void OpenStatus::set_feel(::std::string&& value) {
  
  feel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.OpenStatus.feel)
}
#endif
void OpenStatus::set_feel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.OpenStatus.feel)
}
void OpenStatus::set_feel(const char* value, size_t size) {
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.OpenStatus.feel)
}
::std::string* OpenStatus::mutable_feel() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.OpenStatus.feel)
  return feel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpenStatus::release_feel() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.OpenStatus.feel)
  
  return feel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpenStatus::set_allocated_feel(::std::string* feel) {
  if (feel != NULL) {
    
  } else {
    
  }
  feel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feel);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.OpenStatus.feel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContainerStatus::kContainerIdFieldNumber;
const int ContainerStatus::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContainerStatus::ContainerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Action.Status.ContainerStatus)
}
ContainerStatus::ContainerStatus(const ContainerStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.container_id().size() > 0) {
    container_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Action.Status.ContainerStatus)
}

void ContainerStatus::SharedCtor() {
  container_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  _cached_size_ = 0;
}

ContainerStatus::~ContainerStatus() {
  // @@protoc_insertion_point(destructor:NetProto.Action.Status.ContainerStatus)
  SharedDtor();
}

void ContainerStatus::SharedDtor() {
  container_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContainerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerStatus::descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContainerStatus& ContainerStatus::default_instance() {
  protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContainerStatus* ContainerStatus::New(::google::protobuf::Arena* arena) const {
  ContainerStatus* n = new ContainerStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContainerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Action.Status.ContainerStatus)
  container_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

bool ContainerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Action.Status.ContainerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string container_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->container_id().data(), this->container_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.ContainerStatus.container_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Action.Status.ContainerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Action.Status.ContainerStatus)
  return false;
#undef DO_
}

void ContainerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Action.Status.ContainerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 10;
  if (this->container_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.ContainerStatus.container_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->container_id(), output);
  }

  // uint32 type = 20;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Action.Status.ContainerStatus)
}

::google::protobuf::uint8* ContainerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Action.Status.ContainerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 10;
  if (this->container_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.ContainerStatus.container_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->container_id(), target);
  }

  // uint32 type = 20;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Action.Status.ContainerStatus)
  return target;
}

size_t ContainerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Action.Status.ContainerStatus)
  size_t total_size = 0;

  // string container_id = 10;
  if (this->container_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->container_id());
  }

  // uint32 type = 20;
  if (this->type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Action.Status.ContainerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContainerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Action.Status.ContainerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Action.Status.ContainerStatus)
    MergeFrom(*source);
  }
}

void ContainerStatus::MergeFrom(const ContainerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Action.Status.ContainerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id().size() > 0) {

    container_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ContainerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Action.Status.ContainerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStatus::CopyFrom(const ContainerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Action.Status.ContainerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStatus::IsInitialized() const {
  return true;
}

void ContainerStatus::Swap(ContainerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContainerStatus::InternalSwap(ContainerStatus* other) {
  container_id_.Swap(&other->container_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContainerStatus::GetMetadata() const {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContainerStatus

// string container_id = 10;
void ContainerStatus::clear_container_id() {
  container_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContainerStatus::container_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.ContainerStatus.container_id)
  return container_id_.GetNoArena();
}
void ContainerStatus::set_container_id(const ::std::string& value) {
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.ContainerStatus.container_id)
}
#if LANG_CXX11
void ContainerStatus::set_container_id(::std::string&& value) {
  
  container_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.ContainerStatus.container_id)
}
#endif
void ContainerStatus::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.ContainerStatus.container_id)
}
void ContainerStatus::set_container_id(const char* value, size_t size) {
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.ContainerStatus.container_id)
}
::std::string* ContainerStatus::mutable_container_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.ContainerStatus.container_id)
  return container_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContainerStatus::release_container_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.ContainerStatus.container_id)
  
  return container_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContainerStatus::set_allocated_container_id(::std::string* container_id) {
  if (container_id != NULL) {
    
  } else {
    
  }
  container_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.ContainerStatus.container_id)
}

// uint32 type = 20;
void ContainerStatus::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 ContainerStatus::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.ContainerStatus.type)
  return type_;
}
void ContainerStatus::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.ContainerStatus.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FillAttr::kContainerIdFieldNumber;
const int FillAttr::kObjIdFieldNumber;
const int FillAttr::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FillAttr::FillAttr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Action.Status.FillAttr)
}
FillAttr::FillAttr(const FillAttr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.container_id().size() > 0) {
    container_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_id_);
  }
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.obj_id().size() > 0) {
    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Action.Status.FillAttr)
}

void FillAttr::SharedCtor() {
  container_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

FillAttr::~FillAttr() {
  // @@protoc_insertion_point(destructor:NetProto.Action.Status.FillAttr)
  SharedDtor();
}

void FillAttr::SharedDtor() {
  container_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obj_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FillAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillAttr::descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FillAttr& FillAttr::default_instance() {
  protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

FillAttr* FillAttr::New(::google::protobuf::Arena* arena) const {
  FillAttr* n = new FillAttr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FillAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Action.Status.FillAttr)
  container_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool FillAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Action.Status.FillAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string container_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->container_id().data(), this->container_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.FillAttr.container_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string obj_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->obj_id().data(), this->obj_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.FillAttr.obj_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.FillAttrType type = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetProto::Action::Status::FillAttrType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Action.Status.FillAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Action.Status.FillAttr)
  return false;
#undef DO_
}

void FillAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Action.Status.FillAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 10;
  if (this->container_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.FillAttr.container_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->container_id(), output);
  }

  // string obj_id = 20;
  if (this->obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.FillAttr.obj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->obj_id(), output);
  }

  // .NetProto.Action.Status.FillAttrType type = 30;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Action.Status.FillAttr)
}

::google::protobuf::uint8* FillAttr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Action.Status.FillAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 10;
  if (this->container_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_id().data(), this->container_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.FillAttr.container_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->container_id(), target);
  }

  // string obj_id = 20;
  if (this->obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.FillAttr.obj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->obj_id(), target);
  }

  // .NetProto.Action.Status.FillAttrType type = 30;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Action.Status.FillAttr)
  return target;
}

size_t FillAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Action.Status.FillAttr)
  size_t total_size = 0;

  // string container_id = 10;
  if (this->container_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->container_id());
  }

  // string obj_id = 20;
  if (this->obj_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_id());
  }

  // .NetProto.Action.Status.FillAttrType type = 30;
  if (this->type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillAttr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Action.Status.FillAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const FillAttr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FillAttr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Action.Status.FillAttr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Action.Status.FillAttr)
    MergeFrom(*source);
  }
}

void FillAttr::MergeFrom(const FillAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Action.Status.FillAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id().size() > 0) {

    container_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_id_);
  }
  if (from.obj_id().size() > 0) {

    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void FillAttr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Action.Status.FillAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillAttr::CopyFrom(const FillAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Action.Status.FillAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillAttr::IsInitialized() const {
  return true;
}

void FillAttr::Swap(FillAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FillAttr::InternalSwap(FillAttr* other) {
  container_id_.Swap(&other->container_id_);
  obj_id_.Swap(&other->obj_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FillAttr::GetMetadata() const {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FillAttr

// string container_id = 10;
void FillAttr::clear_container_id() {
  container_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FillAttr::container_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.FillAttr.container_id)
  return container_id_.GetNoArena();
}
void FillAttr::set_container_id(const ::std::string& value) {
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.FillAttr.container_id)
}
#if LANG_CXX11
void FillAttr::set_container_id(::std::string&& value) {
  
  container_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.FillAttr.container_id)
}
#endif
void FillAttr::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.FillAttr.container_id)
}
void FillAttr::set_container_id(const char* value, size_t size) {
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.FillAttr.container_id)
}
::std::string* FillAttr::mutable_container_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.FillAttr.container_id)
  return container_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FillAttr::release_container_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.FillAttr.container_id)
  
  return container_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FillAttr::set_allocated_container_id(::std::string* container_id) {
  if (container_id != NULL) {
    
  } else {
    
  }
  container_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.FillAttr.container_id)
}

// string obj_id = 20;
void FillAttr::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FillAttr::obj_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.FillAttr.obj_id)
  return obj_id_.GetNoArena();
}
void FillAttr::set_obj_id(const ::std::string& value) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.FillAttr.obj_id)
}
#if LANG_CXX11
void FillAttr::set_obj_id(::std::string&& value) {
  
  obj_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.FillAttr.obj_id)
}
#endif
void FillAttr::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.FillAttr.obj_id)
}
void FillAttr::set_obj_id(const char* value, size_t size) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.FillAttr.obj_id)
}
::std::string* FillAttr::mutable_obj_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.FillAttr.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FillAttr::release_obj_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.FillAttr.obj_id)
  
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FillAttr::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    
  } else {
    
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.FillAttr.obj_id)
}

// .NetProto.Action.Status.FillAttrType type = 30;
void FillAttr::clear_type() {
  type_ = 0;
}
::NetProto::Action::Status::FillAttrType FillAttr::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.FillAttr.type)
  return static_cast< ::NetProto::Action::Status::FillAttrType >(type_);
}
void FillAttr::set_type(::NetProto::Action::Status::FillAttrType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.FillAttr.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BurnStatus::kObjIdFieldNumber;
const int BurnStatus::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BurnStatus::BurnStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Action.Status.BurnStatus)
}
BurnStatus::BurnStatus(const BurnStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.obj_id().size() > 0) {
    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Action.Status.BurnStatus)
}

void BurnStatus::SharedCtor() {
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

BurnStatus::~BurnStatus() {
  // @@protoc_insertion_point(destructor:NetProto.Action.Status.BurnStatus)
  SharedDtor();
}

void BurnStatus::SharedDtor() {
  obj_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BurnStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BurnStatus::descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BurnStatus& BurnStatus::default_instance() {
  protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

BurnStatus* BurnStatus::New(::google::protobuf::Arena* arena) const {
  BurnStatus* n = new BurnStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BurnStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Action.Status.BurnStatus)
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool BurnStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Action.Status.BurnStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string obj_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->obj_id().data(), this->obj_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.BurnStatus.obj_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.BurnStatusType type = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetProto::Action::Status::BurnStatusType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Action.Status.BurnStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Action.Status.BurnStatus)
  return false;
#undef DO_
}

void BurnStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Action.Status.BurnStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string obj_id = 10;
  if (this->obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.BurnStatus.obj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->obj_id(), output);
  }

  // .NetProto.Action.Status.BurnStatusType type = 20;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Action.Status.BurnStatus)
}

::google::protobuf::uint8* BurnStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Action.Status.BurnStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string obj_id = 10;
  if (this->obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.BurnStatus.obj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->obj_id(), target);
  }

  // .NetProto.Action.Status.BurnStatusType type = 20;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Action.Status.BurnStatus)
  return target;
}

size_t BurnStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Action.Status.BurnStatus)
  size_t total_size = 0;

  // string obj_id = 10;
  if (this->obj_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_id());
  }

  // .NetProto.Action.Status.BurnStatusType type = 20;
  if (this->type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BurnStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Action.Status.BurnStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const BurnStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BurnStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Action.Status.BurnStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Action.Status.BurnStatus)
    MergeFrom(*source);
  }
}

void BurnStatus::MergeFrom(const BurnStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Action.Status.BurnStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obj_id().size() > 0) {

    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void BurnStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Action.Status.BurnStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BurnStatus::CopyFrom(const BurnStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Action.Status.BurnStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BurnStatus::IsInitialized() const {
  return true;
}

void BurnStatus::Swap(BurnStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BurnStatus::InternalSwap(BurnStatus* other) {
  obj_id_.Swap(&other->obj_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BurnStatus::GetMetadata() const {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BurnStatus

// string obj_id = 10;
void BurnStatus::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BurnStatus::obj_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.BurnStatus.obj_id)
  return obj_id_.GetNoArena();
}
void BurnStatus::set_obj_id(const ::std::string& value) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.BurnStatus.obj_id)
}
#if LANG_CXX11
void BurnStatus::set_obj_id(::std::string&& value) {
  
  obj_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.BurnStatus.obj_id)
}
#endif
void BurnStatus::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.BurnStatus.obj_id)
}
void BurnStatus::set_obj_id(const char* value, size_t size) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.BurnStatus.obj_id)
}
::std::string* BurnStatus::mutable_obj_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.BurnStatus.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BurnStatus::release_obj_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.BurnStatus.obj_id)
  
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BurnStatus::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    
  } else {
    
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.BurnStatus.obj_id)
}

// .NetProto.Action.Status.BurnStatusType type = 20;
void BurnStatus::clear_type() {
  type_ = 0;
}
::NetProto::Action::Status::BurnStatusType BurnStatus::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.BurnStatus.type)
  return static_cast< ::NetProto::Action::Status::BurnStatusType >(type_);
}
void BurnStatus::set_type(::NetProto::Action::Status::BurnStatusType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.BurnStatus.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllOpenStatus::kRoomIdFieldNumber;
const int AllOpenStatus::kAbstractIdFieldNumber;
const int AllOpenStatus::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllOpenStatus::AllOpenStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Action.Status.AllOpenStatus)
}
AllOpenStatus::AllOpenStatus(const AllOpenStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_id().size() > 0) {
    room_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
  }
  abstract_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.abstract_id().size() > 0) {
    abstract_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.abstract_id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Action.Status.AllOpenStatus)
}

void AllOpenStatus::SharedCtor() {
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abstract_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

AllOpenStatus::~AllOpenStatus() {
  // @@protoc_insertion_point(destructor:NetProto.Action.Status.AllOpenStatus)
  SharedDtor();
}

void AllOpenStatus::SharedDtor() {
  room_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abstract_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AllOpenStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllOpenStatus::descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllOpenStatus& AllOpenStatus::default_instance() {
  protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

AllOpenStatus* AllOpenStatus::New(::google::protobuf::Arena* arena) const {
  AllOpenStatus* n = new AllOpenStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllOpenStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Action.Status.AllOpenStatus)
  room_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abstract_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool AllOpenStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Action.Status.AllOpenStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string room_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.AllOpenStatus.room_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string abstract_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abstract_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->abstract_id().data(), this->abstract_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.AllOpenStatus.abstract_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.OpenStatusType type = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetProto::Action::Status::OpenStatusType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Action.Status.AllOpenStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Action.Status.AllOpenStatus)
  return false;
#undef DO_
}

void AllOpenStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Action.Status.AllOpenStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_id = 10;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.AllOpenStatus.room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->room_id(), output);
  }

  // string abstract_id = 20;
  if (this->abstract_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->abstract_id().data(), this->abstract_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.AllOpenStatus.abstract_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->abstract_id(), output);
  }

  // .NetProto.Action.Status.OpenStatusType type = 30;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Action.Status.AllOpenStatus)
}

::google::protobuf::uint8* AllOpenStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Action.Status.AllOpenStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_id = 10;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.AllOpenStatus.room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->room_id(), target);
  }

  // string abstract_id = 20;
  if (this->abstract_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->abstract_id().data(), this->abstract_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.AllOpenStatus.abstract_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->abstract_id(), target);
  }

  // .NetProto.Action.Status.OpenStatusType type = 30;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Action.Status.AllOpenStatus)
  return target;
}

size_t AllOpenStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Action.Status.AllOpenStatus)
  size_t total_size = 0;

  // string room_id = 10;
  if (this->room_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_id());
  }

  // string abstract_id = 20;
  if (this->abstract_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->abstract_id());
  }

  // .NetProto.Action.Status.OpenStatusType type = 30;
  if (this->type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllOpenStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Action.Status.AllOpenStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const AllOpenStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllOpenStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Action.Status.AllOpenStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Action.Status.AllOpenStatus)
    MergeFrom(*source);
  }
}

void AllOpenStatus::MergeFrom(const AllOpenStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Action.Status.AllOpenStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_id().size() > 0) {

    room_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
  }
  if (from.abstract_id().size() > 0) {

    abstract_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.abstract_id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void AllOpenStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Action.Status.AllOpenStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllOpenStatus::CopyFrom(const AllOpenStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Action.Status.AllOpenStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllOpenStatus::IsInitialized() const {
  return true;
}

void AllOpenStatus::Swap(AllOpenStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllOpenStatus::InternalSwap(AllOpenStatus* other) {
  room_id_.Swap(&other->room_id_);
  abstract_id_.Swap(&other->abstract_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllOpenStatus::GetMetadata() const {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllOpenStatus

// string room_id = 10;
void AllOpenStatus::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AllOpenStatus::room_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AllOpenStatus.room_id)
  return room_id_.GetNoArena();
}
void AllOpenStatus::set_room_id(const ::std::string& value) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AllOpenStatus.room_id)
}
#if LANG_CXX11
void AllOpenStatus::set_room_id(::std::string&& value) {
  
  room_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.AllOpenStatus.room_id)
}
#endif
void AllOpenStatus::set_room_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.AllOpenStatus.room_id)
}
void AllOpenStatus::set_room_id(const char* value, size_t size) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.AllOpenStatus.room_id)
}
::std::string* AllOpenStatus::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.AllOpenStatus.room_id)
  return room_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AllOpenStatus::release_room_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.AllOpenStatus.room_id)
  
  return room_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AllOpenStatus::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.AllOpenStatus.room_id)
}

// string abstract_id = 20;
void AllOpenStatus::clear_abstract_id() {
  abstract_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AllOpenStatus::abstract_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AllOpenStatus.abstract_id)
  return abstract_id_.GetNoArena();
}
void AllOpenStatus::set_abstract_id(const ::std::string& value) {
  
  abstract_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AllOpenStatus.abstract_id)
}
#if LANG_CXX11
void AllOpenStatus::set_abstract_id(::std::string&& value) {
  
  abstract_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.AllOpenStatus.abstract_id)
}
#endif
void AllOpenStatus::set_abstract_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  abstract_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.AllOpenStatus.abstract_id)
}
void AllOpenStatus::set_abstract_id(const char* value, size_t size) {
  
  abstract_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.AllOpenStatus.abstract_id)
}
::std::string* AllOpenStatus::mutable_abstract_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.AllOpenStatus.abstract_id)
  return abstract_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AllOpenStatus::release_abstract_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.AllOpenStatus.abstract_id)
  
  return abstract_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AllOpenStatus::set_allocated_abstract_id(::std::string* abstract_id) {
  if (abstract_id != NULL) {
    
  } else {
    
  }
  abstract_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), abstract_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.AllOpenStatus.abstract_id)
}

// .NetProto.Action.Status.OpenStatusType type = 30;
void AllOpenStatus::clear_type() {
  type_ = 0;
}
::NetProto::Action::Status::OpenStatusType AllOpenStatus::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AllOpenStatus.type)
  return static_cast< ::NetProto::Action::Status::OpenStatusType >(type_);
}
void AllOpenStatus::set_type(::NetProto::Action::Status::OpenStatusType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AllOpenStatus.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttrStatus::kObjIdFieldNumber;
const int AttrStatus::kAttrFieldNumber;
const int AttrStatus::kDescFieldNumber;
const int AttrStatus::kFeelFieldNumber;
const int AttrStatus::kFeelDegreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttrStatus::AttrStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Action.Status.AttrStatus)
}
AttrStatus::AttrStatus(const AttrStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.obj_id().size() > 0) {
    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desc().size() > 0) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  feel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.feel().size() > 0) {
    feel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feel_);
  }
  ::memcpy(&attr_, &from.attr_,
    reinterpret_cast<char*>(&feel_degree_) -
    reinterpret_cast<char*>(&attr_) + sizeof(feel_degree_));
  // @@protoc_insertion_point(copy_constructor:NetProto.Action.Status.AttrStatus)
}

void AttrStatus::SharedCtor() {
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&attr_, 0, reinterpret_cast<char*>(&feel_degree_) -
    reinterpret_cast<char*>(&attr_) + sizeof(feel_degree_));
  _cached_size_ = 0;
}

AttrStatus::~AttrStatus() {
  // @@protoc_insertion_point(destructor:NetProto.Action.Status.AttrStatus)
  SharedDtor();
}

void AttrStatus::SharedDtor() {
  obj_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AttrStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttrStatus::descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AttrStatus& AttrStatus::default_instance() {
  protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

AttrStatus* AttrStatus::New(::google::protobuf::Arena* arena) const {
  AttrStatus* n = new AttrStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AttrStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Action.Status.AttrStatus)
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&attr_, 0, reinterpret_cast<char*>(&feel_degree_) -
    reinterpret_cast<char*>(&attr_) + sizeof(feel_degree_));
}

bool AttrStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Action.Status.AttrStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string obj_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->obj_id().data(), this->obj_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.AttrStatus.obj_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.AttrStatus.Attr attr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_attr(static_cast< ::NetProto::Action::Status::AttrStatus_Attr >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.AttrStatus.desc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string feel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feel().data(), this->feel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.AttrStatus.feel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float feel_degree = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feel_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Action.Status.AttrStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Action.Status.AttrStatus)
  return false;
#undef DO_
}

void AttrStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Action.Status.AttrStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string obj_id = 1;
  if (this->obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.AttrStatus.obj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->obj_id(), output);
  }

  // .NetProto.Action.Status.AttrStatus.Attr attr = 2;
  if (this->attr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->attr(), output);
  }

  // string desc = 3;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.AttrStatus.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  // string feel = 4;
  if (this->feel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feel().data(), this->feel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.AttrStatus.feel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->feel(), output);
  }

  // float feel_degree = 5;
  if (this->feel_degree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->feel_degree(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Action.Status.AttrStatus)
}

::google::protobuf::uint8* AttrStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Action.Status.AttrStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string obj_id = 1;
  if (this->obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.AttrStatus.obj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obj_id(), target);
  }

  // .NetProto.Action.Status.AttrStatus.Attr attr = 2;
  if (this->attr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->attr(), target);
  }

  // string desc = 3;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.AttrStatus.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // string feel = 4;
  if (this->feel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feel().data(), this->feel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.AttrStatus.feel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->feel(), target);
  }

  // float feel_degree = 5;
  if (this->feel_degree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->feel_degree(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Action.Status.AttrStatus)
  return target;
}

size_t AttrStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Action.Status.AttrStatus)
  size_t total_size = 0;

  // string obj_id = 1;
  if (this->obj_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_id());
  }

  // string desc = 3;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  // string feel = 4;
  if (this->feel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feel());
  }

  // .NetProto.Action.Status.AttrStatus.Attr attr = 2;
  if (this->attr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->attr());
  }

  // float feel_degree = 5;
  if (this->feel_degree() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttrStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Action.Status.AttrStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const AttrStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AttrStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Action.Status.AttrStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Action.Status.AttrStatus)
    MergeFrom(*source);
  }
}

void AttrStatus::MergeFrom(const AttrStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Action.Status.AttrStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obj_id().size() > 0) {

    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.feel().size() > 0) {

    feel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feel_);
  }
  if (from.attr() != 0) {
    set_attr(from.attr());
  }
  if (from.feel_degree() != 0) {
    set_feel_degree(from.feel_degree());
  }
}

void AttrStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Action.Status.AttrStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrStatus::CopyFrom(const AttrStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Action.Status.AttrStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrStatus::IsInitialized() const {
  return true;
}

void AttrStatus::Swap(AttrStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttrStatus::InternalSwap(AttrStatus* other) {
  obj_id_.Swap(&other->obj_id_);
  desc_.Swap(&other->desc_);
  feel_.Swap(&other->feel_);
  std::swap(attr_, other->attr_);
  std::swap(feel_degree_, other->feel_degree_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AttrStatus::GetMetadata() const {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AttrStatus

// string obj_id = 1;
void AttrStatus::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AttrStatus::obj_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AttrStatus.obj_id)
  return obj_id_.GetNoArena();
}
void AttrStatus::set_obj_id(const ::std::string& value) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AttrStatus.obj_id)
}
#if LANG_CXX11
void AttrStatus::set_obj_id(::std::string&& value) {
  
  obj_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.AttrStatus.obj_id)
}
#endif
void AttrStatus::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.AttrStatus.obj_id)
}
void AttrStatus::set_obj_id(const char* value, size_t size) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.AttrStatus.obj_id)
}
::std::string* AttrStatus::mutable_obj_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.AttrStatus.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AttrStatus::release_obj_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.AttrStatus.obj_id)
  
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AttrStatus::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    
  } else {
    
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.AttrStatus.obj_id)
}

// .NetProto.Action.Status.AttrStatus.Attr attr = 2;
void AttrStatus::clear_attr() {
  attr_ = 0;
}
::NetProto::Action::Status::AttrStatus_Attr AttrStatus::attr() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AttrStatus.attr)
  return static_cast< ::NetProto::Action::Status::AttrStatus_Attr >(attr_);
}
void AttrStatus::set_attr(::NetProto::Action::Status::AttrStatus_Attr value) {
  
  attr_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AttrStatus.attr)
}

// string desc = 3;
void AttrStatus::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AttrStatus::desc() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AttrStatus.desc)
  return desc_.GetNoArena();
}
void AttrStatus::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AttrStatus.desc)
}
#if LANG_CXX11
void AttrStatus::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.AttrStatus.desc)
}
#endif
void AttrStatus::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.AttrStatus.desc)
}
void AttrStatus::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.AttrStatus.desc)
}
::std::string* AttrStatus::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.AttrStatus.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AttrStatus::release_desc() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.AttrStatus.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AttrStatus::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.AttrStatus.desc)
}

// string feel = 4;
void AttrStatus::clear_feel() {
  feel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AttrStatus::feel() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AttrStatus.feel)
  return feel_.GetNoArena();
}
void AttrStatus::set_feel(const ::std::string& value) {
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AttrStatus.feel)
}
#if LANG_CXX11
void AttrStatus::set_feel(::std::string&& value) {
  
  feel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.AttrStatus.feel)
}
#endif
void AttrStatus::set_feel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.AttrStatus.feel)
}
void AttrStatus::set_feel(const char* value, size_t size) {
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.AttrStatus.feel)
}
::std::string* AttrStatus::mutable_feel() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.AttrStatus.feel)
  return feel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AttrStatus::release_feel() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.AttrStatus.feel)
  
  return feel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AttrStatus::set_allocated_feel(::std::string* feel) {
  if (feel != NULL) {
    
  } else {
    
  }
  feel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feel);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.AttrStatus.feel)
}

// float feel_degree = 5;
void AttrStatus::clear_feel_degree() {
  feel_degree_ = 0;
}
float AttrStatus::feel_degree() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AttrStatus.feel_degree)
  return feel_degree_;
}
void AttrStatus::set_feel_degree(float value) {
  
  feel_degree_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AttrStatus.feel_degree)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmsComing::kObjIdFieldNumber;
const int EmsComing::kItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmsComing::EmsComing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Action.Status.EmsComing)
}
EmsComing::EmsComing(const EmsComing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.obj_id().size() > 0) {
    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  item_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.item_id().size() > 0) {
    item_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  // @@protoc_insertion_point(copy_constructor:NetProto.Action.Status.EmsComing)
}

void EmsComing::SharedCtor() {
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EmsComing::~EmsComing() {
  // @@protoc_insertion_point(destructor:NetProto.Action.Status.EmsComing)
  SharedDtor();
}

void EmsComing::SharedDtor() {
  obj_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmsComing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmsComing::descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmsComing& EmsComing::default_instance() {
  protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmsComing* EmsComing::New(::google::protobuf::Arena* arena) const {
  EmsComing* n = new EmsComing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmsComing::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Action.Status.EmsComing)
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EmsComing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Action.Status.EmsComing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string obj_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->obj_id().data(), this->obj_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.EmsComing.obj_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->item_id().data(), this->item_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.EmsComing.item_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Action.Status.EmsComing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Action.Status.EmsComing)
  return false;
#undef DO_
}

void EmsComing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Action.Status.EmsComing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string obj_id = 1;
  if (this->obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.EmsComing.obj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->obj_id(), output);
  }

  // string item_id = 2;
  if (this->item_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_id().data(), this->item_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.EmsComing.item_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->item_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Action.Status.EmsComing)
}

::google::protobuf::uint8* EmsComing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Action.Status.EmsComing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string obj_id = 1;
  if (this->obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.EmsComing.obj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obj_id(), target);
  }

  // string item_id = 2;
  if (this->item_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_id().data(), this->item_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.EmsComing.item_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->item_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Action.Status.EmsComing)
  return target;
}

size_t EmsComing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Action.Status.EmsComing)
  size_t total_size = 0;

  // string obj_id = 1;
  if (this->obj_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_id());
  }

  // string item_id = 2;
  if (this->item_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->item_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmsComing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Action.Status.EmsComing)
  GOOGLE_DCHECK_NE(&from, this);
  const EmsComing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmsComing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Action.Status.EmsComing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Action.Status.EmsComing)
    MergeFrom(*source);
  }
}

void EmsComing::MergeFrom(const EmsComing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Action.Status.EmsComing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obj_id().size() > 0) {

    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  if (from.item_id().size() > 0) {

    item_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
}

void EmsComing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Action.Status.EmsComing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmsComing::CopyFrom(const EmsComing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Action.Status.EmsComing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmsComing::IsInitialized() const {
  return true;
}

void EmsComing::Swap(EmsComing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmsComing::InternalSwap(EmsComing* other) {
  obj_id_.Swap(&other->obj_id_);
  item_id_.Swap(&other->item_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmsComing::GetMetadata() const {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmsComing

// string obj_id = 1;
void EmsComing::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EmsComing::obj_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.EmsComing.obj_id)
  return obj_id_.GetNoArena();
}
void EmsComing::set_obj_id(const ::std::string& value) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.EmsComing.obj_id)
}
#if LANG_CXX11
void EmsComing::set_obj_id(::std::string&& value) {
  
  obj_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.EmsComing.obj_id)
}
#endif
void EmsComing::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.EmsComing.obj_id)
}
void EmsComing::set_obj_id(const char* value, size_t size) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.EmsComing.obj_id)
}
::std::string* EmsComing::mutable_obj_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.EmsComing.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmsComing::release_obj_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.EmsComing.obj_id)
  
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmsComing::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    
  } else {
    
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.EmsComing.obj_id)
}

// string item_id = 2;
void EmsComing::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EmsComing::item_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.EmsComing.item_id)
  return item_id_.GetNoArena();
}
void EmsComing::set_item_id(const ::std::string& value) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.EmsComing.item_id)
}
#if LANG_CXX11
void EmsComing::set_item_id(::std::string&& value) {
  
  item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.EmsComing.item_id)
}
#endif
void EmsComing::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.EmsComing.item_id)
}
void EmsComing::set_item_id(const char* value, size_t size) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.EmsComing.item_id)
}
::std::string* EmsComing::mutable_item_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.EmsComing.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmsComing::release_item_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.EmsComing.item_id)
  
  return item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmsComing::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.EmsComing.item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NaturalActionStatusData::kPosRelationFieldNumber;
const int NaturalActionStatusData::kOpenStatusFieldNumber;
const int NaturalActionStatusData::kActStatusFieldNumber;
const int NaturalActionStatusData::kContainerStatusFieldNumber;
const int NaturalActionStatusData::kFillAttrFieldNumber;
const int NaturalActionStatusData::kBurnStatusFieldNumber;
const int NaturalActionStatusData::kAllOpenStatusFieldNumber;
const int NaturalActionStatusData::kAttrStatusFieldNumber;
const int NaturalActionStatusData::kEmsStatusFieldNumber;
const int NaturalActionStatusData::kPretendStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NaturalActionStatusData::NaturalActionStatusData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Action.Status.NaturalActionStatusData)
}
NaturalActionStatusData::NaturalActionStatusData(const NaturalActionStatusData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos_relation()) {
    pos_relation_ = new ::NetProto::ObjPosRelation(*from.pos_relation_);
  } else {
    pos_relation_ = NULL;
  }
  if (from.has_open_status()) {
    open_status_ = new ::NetProto::Action::Status::OpenStatus(*from.open_status_);
  } else {
    open_status_ = NULL;
  }
  if (from.has_act_status()) {
    act_status_ = new ::NetProto::Action::Status::ActStatus(*from.act_status_);
  } else {
    act_status_ = NULL;
  }
  if (from.has_container_status()) {
    container_status_ = new ::NetProto::Action::Status::ContainerStatus(*from.container_status_);
  } else {
    container_status_ = NULL;
  }
  if (from.has_fill_attr()) {
    fill_attr_ = new ::NetProto::Action::Status::FillAttr(*from.fill_attr_);
  } else {
    fill_attr_ = NULL;
  }
  if (from.has_burn_status()) {
    burn_status_ = new ::NetProto::Action::Status::BurnStatus(*from.burn_status_);
  } else {
    burn_status_ = NULL;
  }
  if (from.has_all_open_status()) {
    all_open_status_ = new ::NetProto::Action::Status::AllOpenStatus(*from.all_open_status_);
  } else {
    all_open_status_ = NULL;
  }
  if (from.has_attr_status()) {
    attr_status_ = new ::NetProto::Action::Status::AttrStatus(*from.attr_status_);
  } else {
    attr_status_ = NULL;
  }
  if (from.has_ems_status()) {
    ems_status_ = new ::NetProto::Action::Status::EmsComing(*from.ems_status_);
  } else {
    ems_status_ = NULL;
  }
  if (from.has_pretend_status()) {
    pretend_status_ = new ::NetProto::Action::Status::Pretend(*from.pretend_status_);
  } else {
    pretend_status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NetProto.Action.Status.NaturalActionStatusData)
}

void NaturalActionStatusData::SharedCtor() {
  ::memset(&pos_relation_, 0, reinterpret_cast<char*>(&pretend_status_) -
    reinterpret_cast<char*>(&pos_relation_) + sizeof(pretend_status_));
  _cached_size_ = 0;
}

NaturalActionStatusData::~NaturalActionStatusData() {
  // @@protoc_insertion_point(destructor:NetProto.Action.Status.NaturalActionStatusData)
  SharedDtor();
}

void NaturalActionStatusData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_relation_;
  }
  if (this != internal_default_instance()) {
    delete open_status_;
  }
  if (this != internal_default_instance()) {
    delete act_status_;
  }
  if (this != internal_default_instance()) {
    delete container_status_;
  }
  if (this != internal_default_instance()) {
    delete fill_attr_;
  }
  if (this != internal_default_instance()) {
    delete burn_status_;
  }
  if (this != internal_default_instance()) {
    delete all_open_status_;
  }
  if (this != internal_default_instance()) {
    delete attr_status_;
  }
  if (this != internal_default_instance()) {
    delete ems_status_;
  }
  if (this != internal_default_instance()) {
    delete pretend_status_;
  }
}

void NaturalActionStatusData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NaturalActionStatusData::descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NaturalActionStatusData& NaturalActionStatusData::default_instance() {
  protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

NaturalActionStatusData* NaturalActionStatusData::New(::google::protobuf::Arena* arena) const {
  NaturalActionStatusData* n = new NaturalActionStatusData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NaturalActionStatusData::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Action.Status.NaturalActionStatusData)
  if (GetArenaNoVirtual() == NULL && pos_relation_ != NULL) {
    delete pos_relation_;
  }
  pos_relation_ = NULL;
  if (GetArenaNoVirtual() == NULL && open_status_ != NULL) {
    delete open_status_;
  }
  open_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && act_status_ != NULL) {
    delete act_status_;
  }
  act_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && container_status_ != NULL) {
    delete container_status_;
  }
  container_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && fill_attr_ != NULL) {
    delete fill_attr_;
  }
  fill_attr_ = NULL;
  if (GetArenaNoVirtual() == NULL && burn_status_ != NULL) {
    delete burn_status_;
  }
  burn_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && all_open_status_ != NULL) {
    delete all_open_status_;
  }
  all_open_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && attr_status_ != NULL) {
    delete attr_status_;
  }
  attr_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && ems_status_ != NULL) {
    delete ems_status_;
  }
  ems_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && pretend_status_ != NULL) {
    delete pretend_status_;
  }
  pretend_status_ = NULL;
}

bool NaturalActionStatusData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Action.Status.NaturalActionStatusData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.ObjPosRelation pos_relation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos_relation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.OpenStatus open_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.ActStatus act_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_act_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.ContainerStatus container_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.FillAttr fill_attr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.BurnStatus burn_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_burn_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.AllOpenStatus all_open_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_open_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.AttrStatus attr_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.EmsComing ems_status = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ems_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.Pretend pretend_status = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pretend_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Action.Status.NaturalActionStatusData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Action.Status.NaturalActionStatusData)
  return false;
#undef DO_
}

void NaturalActionStatusData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Action.Status.NaturalActionStatusData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.ObjPosRelation pos_relation = 1;
  if (this->has_pos_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_relation_, output);
  }

  // .NetProto.Action.Status.OpenStatus open_status = 3;
  if (this->has_open_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->open_status_, output);
  }

  // .NetProto.Action.Status.ActStatus act_status = 4;
  if (this->has_act_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->act_status_, output);
  }

  // .NetProto.Action.Status.ContainerStatus container_status = 5;
  if (this->has_container_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->container_status_, output);
  }

  // .NetProto.Action.Status.FillAttr fill_attr = 6;
  if (this->has_fill_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->fill_attr_, output);
  }

  // .NetProto.Action.Status.BurnStatus burn_status = 7;
  if (this->has_burn_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->burn_status_, output);
  }

  // .NetProto.Action.Status.AllOpenStatus all_open_status = 8;
  if (this->has_all_open_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->all_open_status_, output);
  }

  // .NetProto.Action.Status.AttrStatus attr_status = 9;
  if (this->has_attr_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->attr_status_, output);
  }

  // .NetProto.Action.Status.EmsComing ems_status = 20;
  if (this->has_ems_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->ems_status_, output);
  }

  // .NetProto.Action.Status.Pretend pretend_status = 21;
  if (this->has_pretend_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->pretend_status_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Action.Status.NaturalActionStatusData)
}

::google::protobuf::uint8* NaturalActionStatusData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Action.Status.NaturalActionStatusData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.ObjPosRelation pos_relation = 1;
  if (this->has_pos_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_relation_, deterministic, target);
  }

  // .NetProto.Action.Status.OpenStatus open_status = 3;
  if (this->has_open_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->open_status_, deterministic, target);
  }

  // .NetProto.Action.Status.ActStatus act_status = 4;
  if (this->has_act_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->act_status_, deterministic, target);
  }

  // .NetProto.Action.Status.ContainerStatus container_status = 5;
  if (this->has_container_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->container_status_, deterministic, target);
  }

  // .NetProto.Action.Status.FillAttr fill_attr = 6;
  if (this->has_fill_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->fill_attr_, deterministic, target);
  }

  // .NetProto.Action.Status.BurnStatus burn_status = 7;
  if (this->has_burn_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->burn_status_, deterministic, target);
  }

  // .NetProto.Action.Status.AllOpenStatus all_open_status = 8;
  if (this->has_all_open_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->all_open_status_, deterministic, target);
  }

  // .NetProto.Action.Status.AttrStatus attr_status = 9;
  if (this->has_attr_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->attr_status_, deterministic, target);
  }

  // .NetProto.Action.Status.EmsComing ems_status = 20;
  if (this->has_ems_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->ems_status_, deterministic, target);
  }

  // .NetProto.Action.Status.Pretend pretend_status = 21;
  if (this->has_pretend_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->pretend_status_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Action.Status.NaturalActionStatusData)
  return target;
}

size_t NaturalActionStatusData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Action.Status.NaturalActionStatusData)
  size_t total_size = 0;

  // .NetProto.ObjPosRelation pos_relation = 1;
  if (this->has_pos_relation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_relation_);
  }

  // .NetProto.Action.Status.OpenStatus open_status = 3;
  if (this->has_open_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->open_status_);
  }

  // .NetProto.Action.Status.ActStatus act_status = 4;
  if (this->has_act_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->act_status_);
  }

  // .NetProto.Action.Status.ContainerStatus container_status = 5;
  if (this->has_container_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->container_status_);
  }

  // .NetProto.Action.Status.FillAttr fill_attr = 6;
  if (this->has_fill_attr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fill_attr_);
  }

  // .NetProto.Action.Status.BurnStatus burn_status = 7;
  if (this->has_burn_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->burn_status_);
  }

  // .NetProto.Action.Status.AllOpenStatus all_open_status = 8;
  if (this->has_all_open_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->all_open_status_);
  }

  // .NetProto.Action.Status.AttrStatus attr_status = 9;
  if (this->has_attr_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->attr_status_);
  }

  // .NetProto.Action.Status.EmsComing ems_status = 20;
  if (this->has_ems_status()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ems_status_);
  }

  // .NetProto.Action.Status.Pretend pretend_status = 21;
  if (this->has_pretend_status()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pretend_status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NaturalActionStatusData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Action.Status.NaturalActionStatusData)
  GOOGLE_DCHECK_NE(&from, this);
  const NaturalActionStatusData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NaturalActionStatusData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Action.Status.NaturalActionStatusData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Action.Status.NaturalActionStatusData)
    MergeFrom(*source);
  }
}

void NaturalActionStatusData::MergeFrom(const NaturalActionStatusData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Action.Status.NaturalActionStatusData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos_relation()) {
    mutable_pos_relation()->::NetProto::ObjPosRelation::MergeFrom(from.pos_relation());
  }
  if (from.has_open_status()) {
    mutable_open_status()->::NetProto::Action::Status::OpenStatus::MergeFrom(from.open_status());
  }
  if (from.has_act_status()) {
    mutable_act_status()->::NetProto::Action::Status::ActStatus::MergeFrom(from.act_status());
  }
  if (from.has_container_status()) {
    mutable_container_status()->::NetProto::Action::Status::ContainerStatus::MergeFrom(from.container_status());
  }
  if (from.has_fill_attr()) {
    mutable_fill_attr()->::NetProto::Action::Status::FillAttr::MergeFrom(from.fill_attr());
  }
  if (from.has_burn_status()) {
    mutable_burn_status()->::NetProto::Action::Status::BurnStatus::MergeFrom(from.burn_status());
  }
  if (from.has_all_open_status()) {
    mutable_all_open_status()->::NetProto::Action::Status::AllOpenStatus::MergeFrom(from.all_open_status());
  }
  if (from.has_attr_status()) {
    mutable_attr_status()->::NetProto::Action::Status::AttrStatus::MergeFrom(from.attr_status());
  }
  if (from.has_ems_status()) {
    mutable_ems_status()->::NetProto::Action::Status::EmsComing::MergeFrom(from.ems_status());
  }
  if (from.has_pretend_status()) {
    mutable_pretend_status()->::NetProto::Action::Status::Pretend::MergeFrom(from.pretend_status());
  }
}

void NaturalActionStatusData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Action.Status.NaturalActionStatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NaturalActionStatusData::CopyFrom(const NaturalActionStatusData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Action.Status.NaturalActionStatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaturalActionStatusData::IsInitialized() const {
  return true;
}

void NaturalActionStatusData::Swap(NaturalActionStatusData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NaturalActionStatusData::InternalSwap(NaturalActionStatusData* other) {
  std::swap(pos_relation_, other->pos_relation_);
  std::swap(open_status_, other->open_status_);
  std::swap(act_status_, other->act_status_);
  std::swap(container_status_, other->container_status_);
  std::swap(fill_attr_, other->fill_attr_);
  std::swap(burn_status_, other->burn_status_);
  std::swap(all_open_status_, other->all_open_status_);
  std::swap(attr_status_, other->attr_status_);
  std::swap(ems_status_, other->ems_status_);
  std::swap(pretend_status_, other->pretend_status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NaturalActionStatusData::GetMetadata() const {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NaturalActionStatusData

// .NetProto.ObjPosRelation pos_relation = 1;
bool NaturalActionStatusData::has_pos_relation() const {
  return this != internal_default_instance() && pos_relation_ != NULL;
}
void NaturalActionStatusData::clear_pos_relation() {
  if (GetArenaNoVirtual() == NULL && pos_relation_ != NULL) delete pos_relation_;
  pos_relation_ = NULL;
}
const ::NetProto::ObjPosRelation& NaturalActionStatusData::pos_relation() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.pos_relation)
  return pos_relation_ != NULL ? *pos_relation_
                         : *::NetProto::ObjPosRelation::internal_default_instance();
}
::NetProto::ObjPosRelation* NaturalActionStatusData::mutable_pos_relation() {
  
  if (pos_relation_ == NULL) {
    pos_relation_ = new ::NetProto::ObjPosRelation;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.pos_relation)
  return pos_relation_;
}
::NetProto::ObjPosRelation* NaturalActionStatusData::release_pos_relation() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.pos_relation)
  
  ::NetProto::ObjPosRelation* temp = pos_relation_;
  pos_relation_ = NULL;
  return temp;
}
void NaturalActionStatusData::set_allocated_pos_relation(::NetProto::ObjPosRelation* pos_relation) {
  delete pos_relation_;
  pos_relation_ = pos_relation;
  if (pos_relation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.pos_relation)
}

// .NetProto.Action.Status.OpenStatus open_status = 3;
bool NaturalActionStatusData::has_open_status() const {
  return this != internal_default_instance() && open_status_ != NULL;
}
void NaturalActionStatusData::clear_open_status() {
  if (GetArenaNoVirtual() == NULL && open_status_ != NULL) delete open_status_;
  open_status_ = NULL;
}
const ::NetProto::Action::Status::OpenStatus& NaturalActionStatusData::open_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.open_status)
  return open_status_ != NULL ? *open_status_
                         : *::NetProto::Action::Status::OpenStatus::internal_default_instance();
}
::NetProto::Action::Status::OpenStatus* NaturalActionStatusData::mutable_open_status() {
  
  if (open_status_ == NULL) {
    open_status_ = new ::NetProto::Action::Status::OpenStatus;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.open_status)
  return open_status_;
}
::NetProto::Action::Status::OpenStatus* NaturalActionStatusData::release_open_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.open_status)
  
  ::NetProto::Action::Status::OpenStatus* temp = open_status_;
  open_status_ = NULL;
  return temp;
}
void NaturalActionStatusData::set_allocated_open_status(::NetProto::Action::Status::OpenStatus* open_status) {
  delete open_status_;
  open_status_ = open_status;
  if (open_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.open_status)
}

// .NetProto.Action.Status.ActStatus act_status = 4;
bool NaturalActionStatusData::has_act_status() const {
  return this != internal_default_instance() && act_status_ != NULL;
}
void NaturalActionStatusData::clear_act_status() {
  if (GetArenaNoVirtual() == NULL && act_status_ != NULL) delete act_status_;
  act_status_ = NULL;
}
const ::NetProto::Action::Status::ActStatus& NaturalActionStatusData::act_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.act_status)
  return act_status_ != NULL ? *act_status_
                         : *::NetProto::Action::Status::ActStatus::internal_default_instance();
}
::NetProto::Action::Status::ActStatus* NaturalActionStatusData::mutable_act_status() {
  
  if (act_status_ == NULL) {
    act_status_ = new ::NetProto::Action::Status::ActStatus;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.act_status)
  return act_status_;
}
::NetProto::Action::Status::ActStatus* NaturalActionStatusData::release_act_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.act_status)
  
  ::NetProto::Action::Status::ActStatus* temp = act_status_;
  act_status_ = NULL;
  return temp;
}
void NaturalActionStatusData::set_allocated_act_status(::NetProto::Action::Status::ActStatus* act_status) {
  delete act_status_;
  act_status_ = act_status;
  if (act_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.act_status)
}

// .NetProto.Action.Status.ContainerStatus container_status = 5;
bool NaturalActionStatusData::has_container_status() const {
  return this != internal_default_instance() && container_status_ != NULL;
}
void NaturalActionStatusData::clear_container_status() {
  if (GetArenaNoVirtual() == NULL && container_status_ != NULL) delete container_status_;
  container_status_ = NULL;
}
const ::NetProto::Action::Status::ContainerStatus& NaturalActionStatusData::container_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.container_status)
  return container_status_ != NULL ? *container_status_
                         : *::NetProto::Action::Status::ContainerStatus::internal_default_instance();
}
::NetProto::Action::Status::ContainerStatus* NaturalActionStatusData::mutable_container_status() {
  
  if (container_status_ == NULL) {
    container_status_ = new ::NetProto::Action::Status::ContainerStatus;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.container_status)
  return container_status_;
}
::NetProto::Action::Status::ContainerStatus* NaturalActionStatusData::release_container_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.container_status)
  
  ::NetProto::Action::Status::ContainerStatus* temp = container_status_;
  container_status_ = NULL;
  return temp;
}
void NaturalActionStatusData::set_allocated_container_status(::NetProto::Action::Status::ContainerStatus* container_status) {
  delete container_status_;
  container_status_ = container_status;
  if (container_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.container_status)
}

// .NetProto.Action.Status.FillAttr fill_attr = 6;
bool NaturalActionStatusData::has_fill_attr() const {
  return this != internal_default_instance() && fill_attr_ != NULL;
}
void NaturalActionStatusData::clear_fill_attr() {
  if (GetArenaNoVirtual() == NULL && fill_attr_ != NULL) delete fill_attr_;
  fill_attr_ = NULL;
}
const ::NetProto::Action::Status::FillAttr& NaturalActionStatusData::fill_attr() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.fill_attr)
  return fill_attr_ != NULL ? *fill_attr_
                         : *::NetProto::Action::Status::FillAttr::internal_default_instance();
}
::NetProto::Action::Status::FillAttr* NaturalActionStatusData::mutable_fill_attr() {
  
  if (fill_attr_ == NULL) {
    fill_attr_ = new ::NetProto::Action::Status::FillAttr;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.fill_attr)
  return fill_attr_;
}
::NetProto::Action::Status::FillAttr* NaturalActionStatusData::release_fill_attr() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.fill_attr)
  
  ::NetProto::Action::Status::FillAttr* temp = fill_attr_;
  fill_attr_ = NULL;
  return temp;
}
void NaturalActionStatusData::set_allocated_fill_attr(::NetProto::Action::Status::FillAttr* fill_attr) {
  delete fill_attr_;
  fill_attr_ = fill_attr;
  if (fill_attr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.fill_attr)
}

// .NetProto.Action.Status.BurnStatus burn_status = 7;
bool NaturalActionStatusData::has_burn_status() const {
  return this != internal_default_instance() && burn_status_ != NULL;
}
void NaturalActionStatusData::clear_burn_status() {
  if (GetArenaNoVirtual() == NULL && burn_status_ != NULL) delete burn_status_;
  burn_status_ = NULL;
}
const ::NetProto::Action::Status::BurnStatus& NaturalActionStatusData::burn_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.burn_status)
  return burn_status_ != NULL ? *burn_status_
                         : *::NetProto::Action::Status::BurnStatus::internal_default_instance();
}
::NetProto::Action::Status::BurnStatus* NaturalActionStatusData::mutable_burn_status() {
  
  if (burn_status_ == NULL) {
    burn_status_ = new ::NetProto::Action::Status::BurnStatus;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.burn_status)
  return burn_status_;
}
::NetProto::Action::Status::BurnStatus* NaturalActionStatusData::release_burn_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.burn_status)
  
  ::NetProto::Action::Status::BurnStatus* temp = burn_status_;
  burn_status_ = NULL;
  return temp;
}
void NaturalActionStatusData::set_allocated_burn_status(::NetProto::Action::Status::BurnStatus* burn_status) {
  delete burn_status_;
  burn_status_ = burn_status;
  if (burn_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.burn_status)
}

// .NetProto.Action.Status.AllOpenStatus all_open_status = 8;
bool NaturalActionStatusData::has_all_open_status() const {
  return this != internal_default_instance() && all_open_status_ != NULL;
}
void NaturalActionStatusData::clear_all_open_status() {
  if (GetArenaNoVirtual() == NULL && all_open_status_ != NULL) delete all_open_status_;
  all_open_status_ = NULL;
}
const ::NetProto::Action::Status::AllOpenStatus& NaturalActionStatusData::all_open_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.all_open_status)
  return all_open_status_ != NULL ? *all_open_status_
                         : *::NetProto::Action::Status::AllOpenStatus::internal_default_instance();
}
::NetProto::Action::Status::AllOpenStatus* NaturalActionStatusData::mutable_all_open_status() {
  
  if (all_open_status_ == NULL) {
    all_open_status_ = new ::NetProto::Action::Status::AllOpenStatus;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.all_open_status)
  return all_open_status_;
}
::NetProto::Action::Status::AllOpenStatus* NaturalActionStatusData::release_all_open_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.all_open_status)
  
  ::NetProto::Action::Status::AllOpenStatus* temp = all_open_status_;
  all_open_status_ = NULL;
  return temp;
}
void NaturalActionStatusData::set_allocated_all_open_status(::NetProto::Action::Status::AllOpenStatus* all_open_status) {
  delete all_open_status_;
  all_open_status_ = all_open_status;
  if (all_open_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.all_open_status)
}

// .NetProto.Action.Status.AttrStatus attr_status = 9;
bool NaturalActionStatusData::has_attr_status() const {
  return this != internal_default_instance() && attr_status_ != NULL;
}
void NaturalActionStatusData::clear_attr_status() {
  if (GetArenaNoVirtual() == NULL && attr_status_ != NULL) delete attr_status_;
  attr_status_ = NULL;
}
const ::NetProto::Action::Status::AttrStatus& NaturalActionStatusData::attr_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.attr_status)
  return attr_status_ != NULL ? *attr_status_
                         : *::NetProto::Action::Status::AttrStatus::internal_default_instance();
}
::NetProto::Action::Status::AttrStatus* NaturalActionStatusData::mutable_attr_status() {
  
  if (attr_status_ == NULL) {
    attr_status_ = new ::NetProto::Action::Status::AttrStatus;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.attr_status)
  return attr_status_;
}
::NetProto::Action::Status::AttrStatus* NaturalActionStatusData::release_attr_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.attr_status)
  
  ::NetProto::Action::Status::AttrStatus* temp = attr_status_;
  attr_status_ = NULL;
  return temp;
}
void NaturalActionStatusData::set_allocated_attr_status(::NetProto::Action::Status::AttrStatus* attr_status) {
  delete attr_status_;
  attr_status_ = attr_status;
  if (attr_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.attr_status)
}

// .NetProto.Action.Status.EmsComing ems_status = 20;
bool NaturalActionStatusData::has_ems_status() const {
  return this != internal_default_instance() && ems_status_ != NULL;
}
void NaturalActionStatusData::clear_ems_status() {
  if (GetArenaNoVirtual() == NULL && ems_status_ != NULL) delete ems_status_;
  ems_status_ = NULL;
}
const ::NetProto::Action::Status::EmsComing& NaturalActionStatusData::ems_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.ems_status)
  return ems_status_ != NULL ? *ems_status_
                         : *::NetProto::Action::Status::EmsComing::internal_default_instance();
}
::NetProto::Action::Status::EmsComing* NaturalActionStatusData::mutable_ems_status() {
  
  if (ems_status_ == NULL) {
    ems_status_ = new ::NetProto::Action::Status::EmsComing;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.ems_status)
  return ems_status_;
}
::NetProto::Action::Status::EmsComing* NaturalActionStatusData::release_ems_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.ems_status)
  
  ::NetProto::Action::Status::EmsComing* temp = ems_status_;
  ems_status_ = NULL;
  return temp;
}
void NaturalActionStatusData::set_allocated_ems_status(::NetProto::Action::Status::EmsComing* ems_status) {
  delete ems_status_;
  ems_status_ = ems_status;
  if (ems_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.ems_status)
}

// .NetProto.Action.Status.Pretend pretend_status = 21;
bool NaturalActionStatusData::has_pretend_status() const {
  return this != internal_default_instance() && pretend_status_ != NULL;
}
void NaturalActionStatusData::clear_pretend_status() {
  if (GetArenaNoVirtual() == NULL && pretend_status_ != NULL) delete pretend_status_;
  pretend_status_ = NULL;
}
const ::NetProto::Action::Status::Pretend& NaturalActionStatusData::pretend_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.pretend_status)
  return pretend_status_ != NULL ? *pretend_status_
                         : *::NetProto::Action::Status::Pretend::internal_default_instance();
}
::NetProto::Action::Status::Pretend* NaturalActionStatusData::mutable_pretend_status() {
  
  if (pretend_status_ == NULL) {
    pretend_status_ = new ::NetProto::Action::Status::Pretend;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.pretend_status)
  return pretend_status_;
}
::NetProto::Action::Status::Pretend* NaturalActionStatusData::release_pretend_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.pretend_status)
  
  ::NetProto::Action::Status::Pretend* temp = pretend_status_;
  pretend_status_ = NULL;
  return temp;
}
void NaturalActionStatusData::set_allocated_pretend_status(::NetProto::Action::Status::Pretend* pretend_status) {
  delete pretend_status_;
  pretend_status_ = pretend_status;
  if (pretend_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.pretend_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NaturalActionStatus::kFlagFieldNumber;
const int NaturalActionStatus::kTypeFieldNumber;
const int NaturalActionStatus::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NaturalActionStatus::NaturalActionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Action.Status.NaturalActionStatus)
}
NaturalActionStatus::NaturalActionStatus(const NaturalActionStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::NetProto::Action::Status::NaturalActionStatusData(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&flag_, &from.flag_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&flag_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:NetProto.Action.Status.NaturalActionStatus)
}

void NaturalActionStatus::SharedCtor() {
  ::memset(&data_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&data_) + sizeof(type_));
  _cached_size_ = 0;
}

NaturalActionStatus::~NaturalActionStatus() {
  // @@protoc_insertion_point(destructor:NetProto.Action.Status.NaturalActionStatus)
  SharedDtor();
}

void NaturalActionStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void NaturalActionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NaturalActionStatus::descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NaturalActionStatus& NaturalActionStatus::default_instance() {
  protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

NaturalActionStatus* NaturalActionStatus::New(::google::protobuf::Arena* arena) const {
  NaturalActionStatus* n = new NaturalActionStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NaturalActionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Action.Status.NaturalActionStatus)
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  ::memset(&flag_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&flag_) + sizeof(type_));
}

bool NaturalActionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Action.Status.NaturalActionStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.NaturalActionStatusType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetProto::Action::Status::NaturalActionStatusType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.Action.Status.NaturalActionStatusData data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Action.Status.NaturalActionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Action.Status.NaturalActionStatus)
  return false;
#undef DO_
}

void NaturalActionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Action.Status.NaturalActionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  // .NetProto.Action.Status.NaturalActionStatusType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .NetProto.Action.Status.NaturalActionStatusData data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Action.Status.NaturalActionStatus)
}

::google::protobuf::uint8* NaturalActionStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Action.Status.NaturalActionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  // .NetProto.Action.Status.NaturalActionStatusType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .NetProto.Action.Status.NaturalActionStatusData data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Action.Status.NaturalActionStatus)
  return target;
}

size_t NaturalActionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Action.Status.NaturalActionStatus)
  size_t total_size = 0;

  // .NetProto.Action.Status.NaturalActionStatusData data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // uint32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());
  }

  // .NetProto.Action.Status.NaturalActionStatusType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NaturalActionStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Action.Status.NaturalActionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const NaturalActionStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NaturalActionStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Action.Status.NaturalActionStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Action.Status.NaturalActionStatus)
    MergeFrom(*source);
  }
}

void NaturalActionStatus::MergeFrom(const NaturalActionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Action.Status.NaturalActionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::NetProto::Action::Status::NaturalActionStatusData::MergeFrom(from.data());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void NaturalActionStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Action.Status.NaturalActionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NaturalActionStatus::CopyFrom(const NaturalActionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Action.Status.NaturalActionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaturalActionStatus::IsInitialized() const {
  return true;
}

void NaturalActionStatus::Swap(NaturalActionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NaturalActionStatus::InternalSwap(NaturalActionStatus* other) {
  std::swap(data_, other->data_);
  std::swap(flag_, other->flag_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NaturalActionStatus::GetMetadata() const {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NaturalActionStatus

// uint32 flag = 1;
void NaturalActionStatus::clear_flag() {
  flag_ = 0u;
}
::google::protobuf::uint32 NaturalActionStatus::flag() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatus.flag)
  return flag_;
}
void NaturalActionStatus::set_flag(::google::protobuf::uint32 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.NaturalActionStatus.flag)
}

// .NetProto.Action.Status.NaturalActionStatusType type = 2;
void NaturalActionStatus::clear_type() {
  type_ = 0;
}
::NetProto::Action::Status::NaturalActionStatusType NaturalActionStatus::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatus.type)
  return static_cast< ::NetProto::Action::Status::NaturalActionStatusType >(type_);
}
void NaturalActionStatus::set_type(::NetProto::Action::Status::NaturalActionStatusType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.NaturalActionStatus.type)
}

// .NetProto.Action.Status.NaturalActionStatusData data = 3;
bool NaturalActionStatus::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void NaturalActionStatus::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::NetProto::Action::Status::NaturalActionStatusData& NaturalActionStatus::data() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatus.data)
  return data_ != NULL ? *data_
                         : *::NetProto::Action::Status::NaturalActionStatusData::internal_default_instance();
}
::NetProto::Action::Status::NaturalActionStatusData* NaturalActionStatus::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::NetProto::Action::Status::NaturalActionStatusData;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatus.data)
  return data_;
}
::NetProto::Action::Status::NaturalActionStatusData* NaturalActionStatus::release_data() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatus.data)
  
  ::NetProto::Action::Status::NaturalActionStatusData* temp = data_;
  data_ = NULL;
  return temp;
}
void NaturalActionStatus::set_allocated_data(::NetProto::Action::Status::NaturalActionStatusData* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatus.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyNaturalStatusChange::kRobotIdFieldNumber;
const int NotifyNaturalStatusChange::kSceneIdFieldNumber;
const int NotifyNaturalStatusChange::kStatusArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyNaturalStatusChange::NotifyNaturalStatusChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Action.Status.NotifyNaturalStatusChange)
}
NotifyNaturalStatusChange::NotifyNaturalStatusChange(const NotifyNaturalStatusChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      statusarray_(from.statusarray_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.robot_id().size() > 0) {
    robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
  }
  scene_id_ = from.scene_id_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Action.Status.NotifyNaturalStatusChange)
}

void NotifyNaturalStatusChange::SharedCtor() {
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_id_ = 0u;
  _cached_size_ = 0;
}

NotifyNaturalStatusChange::~NotifyNaturalStatusChange() {
  // @@protoc_insertion_point(destructor:NetProto.Action.Status.NotifyNaturalStatusChange)
  SharedDtor();
}

void NotifyNaturalStatusChange::SharedDtor() {
  robot_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NotifyNaturalStatusChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyNaturalStatusChange::descriptor() {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotifyNaturalStatusChange& NotifyNaturalStatusChange::default_instance() {
  protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyNaturalStatusChange* NotifyNaturalStatusChange::New(::google::protobuf::Arena* arena) const {
  NotifyNaturalStatusChange* n = new NotifyNaturalStatusChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotifyNaturalStatusChange::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Action.Status.NotifyNaturalStatusChange)
  statusarray_.Clear();
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_id_ = 0u;
}

bool NotifyNaturalStatusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Action.Status.NotifyNaturalStatusChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 scene_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.Action.Status.NaturalActionStatus statusArray = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statusarray()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string robot_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->robot_id().data(), this->robot_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Action.Status.NotifyNaturalStatusChange.robot_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Action.Status.NotifyNaturalStatusChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Action.Status.NotifyNaturalStatusChange)
  return false;
#undef DO_
}

void NotifyNaturalStatusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Action.Status.NotifyNaturalStatusChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scene_id(), output);
  }

  // repeated .NetProto.Action.Status.NaturalActionStatus statusArray = 2;
  for (unsigned int i = 0, n = this->statusarray_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statusarray(i), output);
  }

  // string robot_id = 10;
  if (this->robot_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robot_id().data(), this->robot_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.NotifyNaturalStatusChange.robot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->robot_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Action.Status.NotifyNaturalStatusChange)
}

::google::protobuf::uint8* NotifyNaturalStatusChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Action.Status.NotifyNaturalStatusChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scene_id(), target);
  }

  // repeated .NetProto.Action.Status.NaturalActionStatus statusArray = 2;
  for (unsigned int i = 0, n = this->statusarray_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->statusarray(i), deterministic, target);
  }

  // string robot_id = 10;
  if (this->robot_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robot_id().data(), this->robot_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Action.Status.NotifyNaturalStatusChange.robot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->robot_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Action.Status.NotifyNaturalStatusChange)
  return target;
}

size_t NotifyNaturalStatusChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Action.Status.NotifyNaturalStatusChange)
  size_t total_size = 0;

  // repeated .NetProto.Action.Status.NaturalActionStatus statusArray = 2;
  {
    unsigned int count = this->statusarray_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statusarray(i));
    }
  }

  // string robot_id = 10;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->robot_id());
  }

  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyNaturalStatusChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Action.Status.NotifyNaturalStatusChange)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyNaturalStatusChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyNaturalStatusChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Action.Status.NotifyNaturalStatusChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Action.Status.NotifyNaturalStatusChange)
    MergeFrom(*source);
  }
}

void NotifyNaturalStatusChange::MergeFrom(const NotifyNaturalStatusChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Action.Status.NotifyNaturalStatusChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statusarray_.MergeFrom(from.statusarray_);
  if (from.robot_id().size() > 0) {

    robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
}

void NotifyNaturalStatusChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Action.Status.NotifyNaturalStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyNaturalStatusChange::CopyFrom(const NotifyNaturalStatusChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Action.Status.NotifyNaturalStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyNaturalStatusChange::IsInitialized() const {
  return true;
}

void NotifyNaturalStatusChange::Swap(NotifyNaturalStatusChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyNaturalStatusChange::InternalSwap(NotifyNaturalStatusChange* other) {
  statusarray_.InternalSwap(&other->statusarray_);
  robot_id_.Swap(&other->robot_id_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyNaturalStatusChange::GetMetadata() const {
  protobuf_natural_5faction_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_natural_5faction_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyNaturalStatusChange

// string robot_id = 10;
void NotifyNaturalStatusChange::clear_robot_id() {
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NotifyNaturalStatusChange::robot_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
  return robot_id_.GetNoArena();
}
void NotifyNaturalStatusChange::set_robot_id(const ::std::string& value) {
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
}
#if LANG_CXX11
void NotifyNaturalStatusChange::set_robot_id(::std::string&& value) {
  
  robot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
}
#endif
void NotifyNaturalStatusChange::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
}
void NotifyNaturalStatusChange::set_robot_id(const char* value, size_t size) {
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
}
::std::string* NotifyNaturalStatusChange::mutable_robot_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
  return robot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotifyNaturalStatusChange::release_robot_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
  
  return robot_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotifyNaturalStatusChange::set_allocated_robot_id(::std::string* robot_id) {
  if (robot_id != NULL) {
    
  } else {
    
  }
  robot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
}

// uint32 scene_id = 1;
void NotifyNaturalStatusChange::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 NotifyNaturalStatusChange::scene_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NotifyNaturalStatusChange.scene_id)
  return scene_id_;
}
void NotifyNaturalStatusChange::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.NotifyNaturalStatusChange.scene_id)
}

// repeated .NetProto.Action.Status.NaturalActionStatus statusArray = 2;
int NotifyNaturalStatusChange::statusarray_size() const {
  return statusarray_.size();
}
void NotifyNaturalStatusChange::clear_statusarray() {
  statusarray_.Clear();
}
const ::NetProto::Action::Status::NaturalActionStatus& NotifyNaturalStatusChange::statusarray(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NotifyNaturalStatusChange.statusArray)
  return statusarray_.Get(index);
}
::NetProto::Action::Status::NaturalActionStatus* NotifyNaturalStatusChange::mutable_statusarray(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NotifyNaturalStatusChange.statusArray)
  return statusarray_.Mutable(index);
}
::NetProto::Action::Status::NaturalActionStatus* NotifyNaturalStatusChange::add_statusarray() {
  // @@protoc_insertion_point(field_add:NetProto.Action.Status.NotifyNaturalStatusChange.statusArray)
  return statusarray_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >*
NotifyNaturalStatusChange::mutable_statusarray() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.Action.Status.NotifyNaturalStatusChange.statusArray)
  return &statusarray_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >&
NotifyNaturalStatusChange::statusarray() const {
  // @@protoc_insertion_point(field_list:NetProto.Action.Status.NotifyNaturalStatusChange.statusArray)
  return statusarray_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Status
}  // namespace Action
}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
