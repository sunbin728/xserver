// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#ifndef PROTOBUF_record_2eproto__INCLUDED
#define PROTOBUF_record_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace NetProto {
namespace Pw {
class RecordEvent;
class RecordEventDefaultTypeInternal;
extern RecordEventDefaultTypeInternal _RecordEvent_default_instance_;
class RecordEventArray;
class RecordEventArrayDefaultTypeInternal;
extern RecordEventArrayDefaultTypeInternal _RecordEventArray_default_instance_;
}  // namespace Pw
}  // namespace NetProto

namespace NetProto {
namespace Pw {

namespace protobuf_record_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_record_2eproto

enum RecordType {
  RECORD_Unknown = 0,
  RECORD_QUERY = 1,
  RECORD_INSERT = 2,
  RECORD_UPDATE = 3,
  RECORD_DELETE = 4,
  RecordType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RecordType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RecordType_IsValid(int value);
const RecordType RecordType_MIN = RECORD_Unknown;
const RecordType RecordType_MAX = RECORD_DELETE;
const int RecordType_ARRAYSIZE = RecordType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecordType_descriptor();
inline const ::std::string& RecordType_Name(RecordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecordType_descriptor(), value);
}
inline bool RecordType_Parse(
    const ::std::string& name, RecordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecordType>(
    RecordType_descriptor(), name, value);
}
// ===================================================================

class RecordEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Pw.RecordEvent) */ {
 public:
  RecordEvent();
  virtual ~RecordEvent();

  RecordEvent(const RecordEvent& from);

  inline RecordEvent& operator=(const RecordEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordEvent& default_instance();

  static inline const RecordEvent* internal_default_instance() {
    return reinterpret_cast<const RecordEvent*>(
               &_RecordEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RecordEvent* other);

  // implements Message ----------------------------------------------

  inline RecordEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  RecordEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecordEvent& from);
  void MergeFrom(const RecordEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecordEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cmd = 2;
  void clear_cmd();
  static const int kCmdFieldNumber = 2;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // .NetProto.Pw.RecordType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::NetProto::Pw::RecordType type() const;
  void set_type(::NetProto::Pw::RecordType value);

  // @@protoc_insertion_point(class_scope:NetProto.Pw.RecordEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecordEventArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Pw.RecordEventArray) */ {
 public:
  RecordEventArray();
  virtual ~RecordEventArray();

  RecordEventArray(const RecordEventArray& from);

  inline RecordEventArray& operator=(const RecordEventArray& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordEventArray& default_instance();

  static inline const RecordEventArray* internal_default_instance() {
    return reinterpret_cast<const RecordEventArray*>(
               &_RecordEventArray_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RecordEventArray* other);

  // implements Message ----------------------------------------------

  inline RecordEventArray* New() const PROTOBUF_FINAL { return New(NULL); }

  RecordEventArray* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecordEventArray& from);
  void MergeFrom(const RecordEventArray& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecordEventArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NetProto.Pw.RecordEvent event = 1;
  int event_size() const;
  void clear_event();
  static const int kEventFieldNumber = 1;
  const ::NetProto::Pw::RecordEvent& event(int index) const;
  ::NetProto::Pw::RecordEvent* mutable_event(int index);
  ::NetProto::Pw::RecordEvent* add_event();
  ::google::protobuf::RepeatedPtrField< ::NetProto::Pw::RecordEvent >*
      mutable_event();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::Pw::RecordEvent >&
      event() const;

  // @@protoc_insertion_point(class_scope:NetProto.Pw.RecordEventArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::Pw::RecordEvent > event_;
  mutable int _cached_size_;
  friend struct protobuf_record_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordEvent

// .NetProto.Pw.RecordType type = 1;
inline void RecordEvent::clear_type() {
  type_ = 0;
}
inline ::NetProto::Pw::RecordType RecordEvent::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Pw.RecordEvent.type)
  return static_cast< ::NetProto::Pw::RecordType >(type_);
}
inline void RecordEvent::set_type(::NetProto::Pw::RecordType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Pw.RecordEvent.type)
}

// string cmd = 2;
inline void RecordEvent::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecordEvent::cmd() const {
  // @@protoc_insertion_point(field_get:NetProto.Pw.RecordEvent.cmd)
  return cmd_.GetNoArena();
}
inline void RecordEvent::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Pw.RecordEvent.cmd)
}
#if LANG_CXX11
inline void RecordEvent::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Pw.RecordEvent.cmd)
}
#endif
inline void RecordEvent::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Pw.RecordEvent.cmd)
}
inline void RecordEvent::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Pw.RecordEvent.cmd)
}
inline ::std::string* RecordEvent::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Pw.RecordEvent.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecordEvent::release_cmd() {
  // @@protoc_insertion_point(field_release:NetProto.Pw.RecordEvent.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecordEvent::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Pw.RecordEvent.cmd)
}

// -------------------------------------------------------------------

// RecordEventArray

// repeated .NetProto.Pw.RecordEvent event = 1;
inline int RecordEventArray::event_size() const {
  return event_.size();
}
inline void RecordEventArray::clear_event() {
  event_.Clear();
}
inline const ::NetProto::Pw::RecordEvent& RecordEventArray::event(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.Pw.RecordEventArray.event)
  return event_.Get(index);
}
inline ::NetProto::Pw::RecordEvent* RecordEventArray::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.Pw.RecordEventArray.event)
  return event_.Mutable(index);
}
inline ::NetProto::Pw::RecordEvent* RecordEventArray::add_event() {
  // @@protoc_insertion_point(field_add:NetProto.Pw.RecordEventArray.event)
  return event_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::Pw::RecordEvent >*
RecordEventArray::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.Pw.RecordEventArray.event)
  return &event_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::Pw::RecordEvent >&
RecordEventArray::event() const {
  // @@protoc_insertion_point(field_list:NetProto.Pw.RecordEventArray.event)
  return event_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Pw
}  // namespace NetProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NetProto::Pw::RecordType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::Pw::RecordType>() {
  return ::NetProto::Pw::RecordType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_record_2eproto__INCLUDED
