// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: time_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "time_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
class TimeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimeInfo> {
} _TimeInfo_default_instance_;
class TimeInfoStructDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimeInfoStruct> {
} _TimeInfoStruct_default_instance_;

namespace protobuf_time_5finfo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfo, pw_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfo, multiple_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfoStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfoStruct, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfoStruct, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfoStruct, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfoStruct, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfoStruct, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfoStruct, sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfoStruct, multiple_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TimeInfo)},
  { 7, -1, sizeof(TimeInfoStruct)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TimeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TimeInfoStruct_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "time_info.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _TimeInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TimeInfoStruct_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TimeInfo_default_instance_.DefaultConstruct();
  _TimeInfoStruct_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017time_info.proto\022\010NetProto\"-\n\010TimeInfo\022"
      "\017\n\007pw_time\030\003 \001(\004\022\020\n\010multiple\030\002 \001(\r\"t\n\016Ti"
      "meInfoStruct\022\014\n\004year\030\001 \001(\r\022\r\n\005month\030\002 \001("
      "\r\022\013\n\003day\030\003 \001(\r\022\014\n\004hour\030\004 \001(\r\022\013\n\003min\030\005 \001("
      "\r\022\013\n\003sec\030\006 \001(\r\022\020\n\010multiple\030\007 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 200);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "time_info.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_time_5finfo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeInfo::kPwTimeFieldNumber;
const int TimeInfo::kMultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeInfo::TimeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_time_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.TimeInfo)
}
TimeInfo::TimeInfo(const TimeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pw_time_, &from.pw_time_,
    reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&pw_time_) + sizeof(multiple_));
  // @@protoc_insertion_point(copy_constructor:NetProto.TimeInfo)
}

void TimeInfo::SharedCtor() {
  ::memset(&pw_time_, 0, reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&pw_time_) + sizeof(multiple_));
  _cached_size_ = 0;
}

TimeInfo::~TimeInfo() {
  // @@protoc_insertion_point(destructor:NetProto.TimeInfo)
  SharedDtor();
}

void TimeInfo::SharedDtor() {
}

void TimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeInfo::descriptor() {
  protobuf_time_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_time_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeInfo& TimeInfo::default_instance() {
  protobuf_time_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimeInfo* TimeInfo::New(::google::protobuf::Arena* arena) const {
  TimeInfo* n = new TimeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.TimeInfo)
  ::memset(&pw_time_, 0, reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&pw_time_) + sizeof(multiple_));
}

bool TimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.TimeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 multiple = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 pw_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pw_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.TimeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.TimeInfo)
  return false;
#undef DO_
}

void TimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.TimeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 multiple = 2;
  if (this->multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->multiple(), output);
  }

  // uint64 pw_time = 3;
  if (this->pw_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pw_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.TimeInfo)
}

::google::protobuf::uint8* TimeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.TimeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 multiple = 2;
  if (this->multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->multiple(), target);
  }

  // uint64 pw_time = 3;
  if (this->pw_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pw_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.TimeInfo)
  return target;
}

size_t TimeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.TimeInfo)
  size_t total_size = 0;

  // uint64 pw_time = 3;
  if (this->pw_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pw_time());
  }

  // uint32 multiple = 2;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->multiple());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.TimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.TimeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.TimeInfo)
    MergeFrom(*source);
  }
}

void TimeInfo::MergeFrom(const TimeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.TimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pw_time() != 0) {
    set_pw_time(from.pw_time());
  }
  if (from.multiple() != 0) {
    set_multiple(from.multiple());
  }
}

void TimeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.TimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeInfo::CopyFrom(const TimeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.TimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeInfo::IsInitialized() const {
  return true;
}

void TimeInfo::Swap(TimeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeInfo::InternalSwap(TimeInfo* other) {
  std::swap(pw_time_, other->pw_time_);
  std::swap(multiple_, other->multiple_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeInfo::GetMetadata() const {
  protobuf_time_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_time_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeInfo

// uint64 pw_time = 3;
void TimeInfo::clear_pw_time() {
  pw_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TimeInfo::pw_time() const {
  // @@protoc_insertion_point(field_get:NetProto.TimeInfo.pw_time)
  return pw_time_;
}
void TimeInfo::set_pw_time(::google::protobuf::uint64 value) {
  
  pw_time_ = value;
  // @@protoc_insertion_point(field_set:NetProto.TimeInfo.pw_time)
}

// uint32 multiple = 2;
void TimeInfo::clear_multiple() {
  multiple_ = 0u;
}
::google::protobuf::uint32 TimeInfo::multiple() const {
  // @@protoc_insertion_point(field_get:NetProto.TimeInfo.multiple)
  return multiple_;
}
void TimeInfo::set_multiple(::google::protobuf::uint32 value) {
  
  multiple_ = value;
  // @@protoc_insertion_point(field_set:NetProto.TimeInfo.multiple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeInfoStruct::kYearFieldNumber;
const int TimeInfoStruct::kMonthFieldNumber;
const int TimeInfoStruct::kDayFieldNumber;
const int TimeInfoStruct::kHourFieldNumber;
const int TimeInfoStruct::kMinFieldNumber;
const int TimeInfoStruct::kSecFieldNumber;
const int TimeInfoStruct::kMultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeInfoStruct::TimeInfoStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_time_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.TimeInfoStruct)
}
TimeInfoStruct::TimeInfoStruct(const TimeInfoStruct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&year_) + sizeof(multiple_));
  // @@protoc_insertion_point(copy_constructor:NetProto.TimeInfoStruct)
}

void TimeInfoStruct::SharedCtor() {
  ::memset(&year_, 0, reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&year_) + sizeof(multiple_));
  _cached_size_ = 0;
}

TimeInfoStruct::~TimeInfoStruct() {
  // @@protoc_insertion_point(destructor:NetProto.TimeInfoStruct)
  SharedDtor();
}

void TimeInfoStruct::SharedDtor() {
}

void TimeInfoStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeInfoStruct::descriptor() {
  protobuf_time_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_time_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeInfoStruct& TimeInfoStruct::default_instance() {
  protobuf_time_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimeInfoStruct* TimeInfoStruct::New(::google::protobuf::Arena* arena) const {
  TimeInfoStruct* n = new TimeInfoStruct;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeInfoStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.TimeInfoStruct)
  ::memset(&year_, 0, reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&year_) + sizeof(multiple_));
}

bool TimeInfoStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.TimeInfoStruct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 year = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 month = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 day = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hour = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 min = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sec = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 multiple = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.TimeInfoStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.TimeInfoStruct)
  return false;
#undef DO_
}

void TimeInfoStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.TimeInfoStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 year = 1;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->year(), output);
  }

  // uint32 month = 2;
  if (this->month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // uint32 day = 3;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  // uint32 hour = 4;
  if (this->hour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hour(), output);
  }

  // uint32 min = 5;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->min(), output);
  }

  // uint32 sec = 6;
  if (this->sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sec(), output);
  }

  // uint32 multiple = 7;
  if (this->multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->multiple(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.TimeInfoStruct)
}

::google::protobuf::uint8* TimeInfoStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.TimeInfoStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 year = 1;
  if (this->year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->year(), target);
  }

  // uint32 month = 2;
  if (this->month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->month(), target);
  }

  // uint32 day = 3;
  if (this->day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->day(), target);
  }

  // uint32 hour = 4;
  if (this->hour() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hour(), target);
  }

  // uint32 min = 5;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->min(), target);
  }

  // uint32 sec = 6;
  if (this->sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sec(), target);
  }

  // uint32 multiple = 7;
  if (this->multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->multiple(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.TimeInfoStruct)
  return target;
}

size_t TimeInfoStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.TimeInfoStruct)
  size_t total_size = 0;

  // uint32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->year());
  }

  // uint32 month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->month());
  }

  // uint32 day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->day());
  }

  // uint32 hour = 4;
  if (this->hour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hour());
  }

  // uint32 min = 5;
  if (this->min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min());
  }

  // uint32 sec = 6;
  if (this->sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sec());
  }

  // uint32 multiple = 7;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->multiple());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeInfoStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.TimeInfoStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeInfoStruct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeInfoStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.TimeInfoStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.TimeInfoStruct)
    MergeFrom(*source);
  }
}

void TimeInfoStruct::MergeFrom(const TimeInfoStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.TimeInfoStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
  if (from.hour() != 0) {
    set_hour(from.hour());
  }
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.sec() != 0) {
    set_sec(from.sec());
  }
  if (from.multiple() != 0) {
    set_multiple(from.multiple());
  }
}

void TimeInfoStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.TimeInfoStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeInfoStruct::CopyFrom(const TimeInfoStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.TimeInfoStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeInfoStruct::IsInitialized() const {
  return true;
}

void TimeInfoStruct::Swap(TimeInfoStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeInfoStruct::InternalSwap(TimeInfoStruct* other) {
  std::swap(year_, other->year_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hour_, other->hour_);
  std::swap(min_, other->min_);
  std::swap(sec_, other->sec_);
  std::swap(multiple_, other->multiple_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeInfoStruct::GetMetadata() const {
  protobuf_time_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_time_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeInfoStruct

// uint32 year = 1;
void TimeInfoStruct::clear_year() {
  year_ = 0u;
}
::google::protobuf::uint32 TimeInfoStruct::year() const {
  // @@protoc_insertion_point(field_get:NetProto.TimeInfoStruct.year)
  return year_;
}
void TimeInfoStruct::set_year(::google::protobuf::uint32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:NetProto.TimeInfoStruct.year)
}

// uint32 month = 2;
void TimeInfoStruct::clear_month() {
  month_ = 0u;
}
::google::protobuf::uint32 TimeInfoStruct::month() const {
  // @@protoc_insertion_point(field_get:NetProto.TimeInfoStruct.month)
  return month_;
}
void TimeInfoStruct::set_month(::google::protobuf::uint32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:NetProto.TimeInfoStruct.month)
}

// uint32 day = 3;
void TimeInfoStruct::clear_day() {
  day_ = 0u;
}
::google::protobuf::uint32 TimeInfoStruct::day() const {
  // @@protoc_insertion_point(field_get:NetProto.TimeInfoStruct.day)
  return day_;
}
void TimeInfoStruct::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:NetProto.TimeInfoStruct.day)
}

// uint32 hour = 4;
void TimeInfoStruct::clear_hour() {
  hour_ = 0u;
}
::google::protobuf::uint32 TimeInfoStruct::hour() const {
  // @@protoc_insertion_point(field_get:NetProto.TimeInfoStruct.hour)
  return hour_;
}
void TimeInfoStruct::set_hour(::google::protobuf::uint32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:NetProto.TimeInfoStruct.hour)
}

// uint32 min = 5;
void TimeInfoStruct::clear_min() {
  min_ = 0u;
}
::google::protobuf::uint32 TimeInfoStruct::min() const {
  // @@protoc_insertion_point(field_get:NetProto.TimeInfoStruct.min)
  return min_;
}
void TimeInfoStruct::set_min(::google::protobuf::uint32 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:NetProto.TimeInfoStruct.min)
}

// uint32 sec = 6;
void TimeInfoStruct::clear_sec() {
  sec_ = 0u;
}
::google::protobuf::uint32 TimeInfoStruct::sec() const {
  // @@protoc_insertion_point(field_get:NetProto.TimeInfoStruct.sec)
  return sec_;
}
void TimeInfoStruct::set_sec(::google::protobuf::uint32 value) {
  
  sec_ = value;
  // @@protoc_insertion_point(field_set:NetProto.TimeInfoStruct.sec)
}

// uint32 multiple = 7;
void TimeInfoStruct::clear_multiple() {
  multiple_ = 0u;
}
::google::protobuf::uint32 TimeInfoStruct::multiple() const {
  // @@protoc_insertion_point(field_get:NetProto.TimeInfoStruct.multiple)
  return multiple_;
}
void TimeInfoStruct::set_multiple(::google::protobuf::uint32 value) {
  
  multiple_ = value;
  // @@protoc_insertion_point(field_set:NetProto.TimeInfoStruct.multiple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
