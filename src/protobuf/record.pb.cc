// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "record.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
namespace Pw {
class RecordEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RecordEvent> {
} _RecordEvent_default_instance_;
class RecordEventArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RecordEventArray> {
} _RecordEventArray_default_instance_;

namespace protobuf_record_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEvent, cmd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEventArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEventArray, event_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(RecordEvent)},
  { 7, -1, sizeof(RecordEventArray)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecordEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecordEventArray_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "record.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _RecordEvent_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RecordEventArray_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RecordEvent_default_instance_.DefaultConstruct();
  _RecordEventArray_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014record.proto\022\013NetProto.Pw\"A\n\013RecordEve"
      "nt\022%\n\004type\030\001 \001(\0162\027.NetProto.Pw.RecordTyp"
      "e\022\013\n\003cmd\030\002 \001(\t\";\n\020RecordEventArray\022\'\n\005ev"
      "ent\030\001 \003(\0132\030.NetProto.Pw.RecordEvent*k\n\nR"
      "ecordType\022\022\n\016RECORD_Unknown\020\000\022\020\n\014RECORD_"
      "QUERY\020\001\022\021\n\rRECORD_INSERT\020\002\022\021\n\rRECORD_UPD"
      "ATE\020\003\022\021\n\rRECORD_DELETE\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 272);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "record.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_record_2eproto

const ::google::protobuf::EnumDescriptor* RecordType_descriptor() {
  protobuf_record_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_record_2eproto::file_level_enum_descriptors[0];
}
bool RecordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordEvent::kTypeFieldNumber;
const int RecordEvent::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordEvent::RecordEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_record_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Pw.RecordEvent)
}
RecordEvent::RecordEvent(const RecordEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmd().size() > 0) {
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Pw.RecordEvent)
}

void RecordEvent::SharedCtor() {
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

RecordEvent::~RecordEvent() {
  // @@protoc_insertion_point(destructor:NetProto.Pw.RecordEvent)
  SharedDtor();
}

void RecordEvent::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RecordEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordEvent::descriptor() {
  protobuf_record_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_record_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordEvent& RecordEvent::default_instance() {
  protobuf_record_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecordEvent* RecordEvent::New(::google::protobuf::Arena* arena) const {
  RecordEvent* n = new RecordEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Pw.RecordEvent)
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool RecordEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Pw.RecordEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.Pw.RecordType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetProto::Pw::RecordType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Pw.RecordEvent.cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Pw.RecordEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Pw.RecordEvent)
  return false;
#undef DO_
}

void RecordEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Pw.RecordEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.Pw.RecordType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Pw.RecordEvent.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmd(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Pw.RecordEvent)
}

::google::protobuf::uint8* RecordEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Pw.RecordEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.Pw.RecordType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Pw.RecordEvent.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Pw.RecordEvent)
  return target;
}

size_t RecordEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Pw.RecordEvent)
  size_t total_size = 0;

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  // .NetProto.Pw.RecordType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Pw.RecordEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Pw.RecordEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Pw.RecordEvent)
    MergeFrom(*source);
  }
}

void RecordEvent::MergeFrom(const RecordEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Pw.RecordEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RecordEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Pw.RecordEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordEvent::CopyFrom(const RecordEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Pw.RecordEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordEvent::IsInitialized() const {
  return true;
}

void RecordEvent::Swap(RecordEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordEvent::InternalSwap(RecordEvent* other) {
  cmd_.Swap(&other->cmd_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordEvent::GetMetadata() const {
  protobuf_record_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_record_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordEvent

// .NetProto.Pw.RecordType type = 1;
void RecordEvent::clear_type() {
  type_ = 0;
}
::NetProto::Pw::RecordType RecordEvent::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Pw.RecordEvent.type)
  return static_cast< ::NetProto::Pw::RecordType >(type_);
}
void RecordEvent::set_type(::NetProto::Pw::RecordType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Pw.RecordEvent.type)
}

// string cmd = 2;
void RecordEvent::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RecordEvent::cmd() const {
  // @@protoc_insertion_point(field_get:NetProto.Pw.RecordEvent.cmd)
  return cmd_.GetNoArena();
}
void RecordEvent::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Pw.RecordEvent.cmd)
}
#if LANG_CXX11
void RecordEvent::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Pw.RecordEvent.cmd)
}
#endif
void RecordEvent::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Pw.RecordEvent.cmd)
}
void RecordEvent::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Pw.RecordEvent.cmd)
}
::std::string* RecordEvent::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Pw.RecordEvent.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RecordEvent::release_cmd() {
  // @@protoc_insertion_point(field_release:NetProto.Pw.RecordEvent.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RecordEvent::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Pw.RecordEvent.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordEventArray::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordEventArray::RecordEventArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_record_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Pw.RecordEventArray)
}
RecordEventArray::RecordEventArray(const RecordEventArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      event_(from.event_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetProto.Pw.RecordEventArray)
}

void RecordEventArray::SharedCtor() {
  _cached_size_ = 0;
}

RecordEventArray::~RecordEventArray() {
  // @@protoc_insertion_point(destructor:NetProto.Pw.RecordEventArray)
  SharedDtor();
}

void RecordEventArray::SharedDtor() {
}

void RecordEventArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordEventArray::descriptor() {
  protobuf_record_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_record_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordEventArray& RecordEventArray::default_instance() {
  protobuf_record_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecordEventArray* RecordEventArray::New(::google::protobuf::Arena* arena) const {
  RecordEventArray* n = new RecordEventArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordEventArray::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Pw.RecordEventArray)
  event_.Clear();
}

bool RecordEventArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Pw.RecordEventArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetProto.Pw.RecordEvent event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Pw.RecordEventArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Pw.RecordEventArray)
  return false;
#undef DO_
}

void RecordEventArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Pw.RecordEventArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NetProto.Pw.RecordEvent event = 1;
  for (unsigned int i = 0, n = this->event_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Pw.RecordEventArray)
}

::google::protobuf::uint8* RecordEventArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Pw.RecordEventArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NetProto.Pw.RecordEvent event = 1;
  for (unsigned int i = 0, n = this->event_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->event(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Pw.RecordEventArray)
  return target;
}

size_t RecordEventArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Pw.RecordEventArray)
  size_t total_size = 0;

  // repeated .NetProto.Pw.RecordEvent event = 1;
  {
    unsigned int count = this->event_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordEventArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Pw.RecordEventArray)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordEventArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordEventArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Pw.RecordEventArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Pw.RecordEventArray)
    MergeFrom(*source);
  }
}

void RecordEventArray::MergeFrom(const RecordEventArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Pw.RecordEventArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_.MergeFrom(from.event_);
}

void RecordEventArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Pw.RecordEventArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordEventArray::CopyFrom(const RecordEventArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Pw.RecordEventArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordEventArray::IsInitialized() const {
  return true;
}

void RecordEventArray::Swap(RecordEventArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordEventArray::InternalSwap(RecordEventArray* other) {
  event_.InternalSwap(&other->event_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordEventArray::GetMetadata() const {
  protobuf_record_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_record_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordEventArray

// repeated .NetProto.Pw.RecordEvent event = 1;
int RecordEventArray::event_size() const {
  return event_.size();
}
void RecordEventArray::clear_event() {
  event_.Clear();
}
const ::NetProto::Pw::RecordEvent& RecordEventArray::event(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.Pw.RecordEventArray.event)
  return event_.Get(index);
}
::NetProto::Pw::RecordEvent* RecordEventArray::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.Pw.RecordEventArray.event)
  return event_.Mutable(index);
}
::NetProto::Pw::RecordEvent* RecordEventArray::add_event() {
  // @@protoc_insertion_point(field_add:NetProto.Pw.RecordEventArray.event)
  return event_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::Pw::RecordEvent >*
RecordEventArray::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.Pw.RecordEventArray.event)
  return &event_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::Pw::RecordEvent >&
RecordEventArray::event() const {
  // @@protoc_insertion_point(field_list:NetProto.Pw.RecordEventArray.event)
  return event_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Pw
}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
