// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weather_item.proto

#ifndef PROTOBUF_weather_5fitem_2eproto__INCLUDED
#define PROTOBUF_weather_5fitem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "msg_head.pb.h"
// @@protoc_insertion_point(includes)
namespace NetProto {
class CResult;
class CResultDefaultTypeInternal;
extern CResultDefaultTypeInternal _CResult_default_instance_;
class MsgHead;
class MsgHeadDefaultTypeInternal;
extern MsgHeadDefaultTypeInternal _MsgHead_default_instance_;
class WeatherEmotion;
class WeatherEmotionDefaultTypeInternal;
extern WeatherEmotionDefaultTypeInternal _WeatherEmotion_default_instance_;
class WeatherEmotion_Emotion;
class WeatherEmotion_EmotionDefaultTypeInternal;
extern WeatherEmotion_EmotionDefaultTypeInternal _WeatherEmotion_Emotion_default_instance_;
class WeatherItemFeel;
class WeatherItemFeelDefaultTypeInternal;
extern WeatherItemFeelDefaultTypeInternal _WeatherItemFeel_default_instance_;
class WeatherItemHeard;
class WeatherItemHeardDefaultTypeInternal;
extern WeatherItemHeardDefaultTypeInternal _WeatherItemHeard_default_instance_;
class WeatherItemSee;
class WeatherItemSeeDefaultTypeInternal;
extern WeatherItemSeeDefaultTypeInternal _WeatherItemSee_default_instance_;
class WeatherSummary;
class WeatherSummaryDefaultTypeInternal;
extern WeatherSummaryDefaultTypeInternal _WeatherSummary_default_instance_;
}  // namespace NetProto

namespace NetProto {

namespace protobuf_weather_5fitem_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_weather_5fitem_2eproto

// ===================================================================

class WeatherItemSee : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.WeatherItemSee) */ {
 public:
  WeatherItemSee();
  virtual ~WeatherItemSee();

  WeatherItemSee(const WeatherItemSee& from);

  inline WeatherItemSee& operator=(const WeatherItemSee& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeatherItemSee& default_instance();

  static inline const WeatherItemSee* internal_default_instance() {
    return reinterpret_cast<const WeatherItemSee*>(
               &_WeatherItemSee_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(WeatherItemSee* other);

  // implements Message ----------------------------------------------

  inline WeatherItemSee* New() const PROTOBUF_FINAL { return New(NULL); }

  WeatherItemSee* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WeatherItemSee& from);
  void MergeFrom(const WeatherItemSee& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WeatherItemSee* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sun_shine = 1;
  void clear_sun_shine();
  static const int kSunShineFieldNumber = 1;
  const ::std::string& sun_shine() const;
  void set_sun_shine(const ::std::string& value);
  #if LANG_CXX11
  void set_sun_shine(::std::string&& value);
  #endif
  void set_sun_shine(const char* value);
  void set_sun_shine(const char* value, size_t size);
  ::std::string* mutable_sun_shine();
  ::std::string* release_sun_shine();
  void set_allocated_sun_shine(::std::string* sun_shine);

  // string cloud = 2;
  void clear_cloud();
  static const int kCloudFieldNumber = 2;
  const ::std::string& cloud() const;
  void set_cloud(const ::std::string& value);
  #if LANG_CXX11
  void set_cloud(::std::string&& value);
  #endif
  void set_cloud(const char* value);
  void set_cloud(const char* value, size_t size);
  ::std::string* mutable_cloud();
  ::std::string* release_cloud();
  void set_allocated_cloud(::std::string* cloud);

  // string rain = 4;
  void clear_rain();
  static const int kRainFieldNumber = 4;
  const ::std::string& rain() const;
  void set_rain(const ::std::string& value);
  #if LANG_CXX11
  void set_rain(::std::string&& value);
  #endif
  void set_rain(const char* value);
  void set_rain(const char* value, size_t size);
  ::std::string* mutable_rain();
  ::std::string* release_rain();
  void set_allocated_rain(::std::string* rain);

  // string hail = 5;
  void clear_hail();
  static const int kHailFieldNumber = 5;
  const ::std::string& hail() const;
  void set_hail(const ::std::string& value);
  #if LANG_CXX11
  void set_hail(::std::string&& value);
  #endif
  void set_hail(const char* value);
  void set_hail(const char* value, size_t size);
  ::std::string* mutable_hail();
  ::std::string* release_hail();
  void set_allocated_hail(::std::string* hail);

  // string moon = 6;
  void clear_moon();
  static const int kMoonFieldNumber = 6;
  const ::std::string& moon() const;
  void set_moon(const ::std::string& value);
  #if LANG_CXX11
  void set_moon(::std::string&& value);
  #endif
  void set_moon(const char* value);
  void set_moon(const char* value, size_t size);
  ::std::string* mutable_moon();
  ::std::string* release_moon();
  void set_allocated_moon(::std::string* moon);

  // string thunder = 7;
  void clear_thunder();
  static const int kThunderFieldNumber = 7;
  const ::std::string& thunder() const;
  void set_thunder(const ::std::string& value);
  #if LANG_CXX11
  void set_thunder(::std::string&& value);
  #endif
  void set_thunder(const char* value);
  void set_thunder(const char* value, size_t size);
  ::std::string* mutable_thunder();
  ::std::string* release_thunder();
  void set_allocated_thunder(::std::string* thunder);

  // string snow = 8;
  void clear_snow();
  static const int kSnowFieldNumber = 8;
  const ::std::string& snow() const;
  void set_snow(const ::std::string& value);
  #if LANG_CXX11
  void set_snow(::std::string&& value);
  #endif
  void set_snow(const char* value);
  void set_snow(const char* value, size_t size);
  ::std::string* mutable_snow();
  ::std::string* release_snow();
  void set_allocated_snow(::std::string* snow);

  // string sun = 11;
  void clear_sun();
  static const int kSunFieldNumber = 11;
  const ::std::string& sun() const;
  void set_sun(const ::std::string& value);
  #if LANG_CXX11
  void set_sun(::std::string&& value);
  #endif
  void set_sun(const char* value);
  void set_sun(const char* value, size_t size);
  ::std::string* mutable_sun();
  ::std::string* release_sun();
  void set_allocated_sun(::std::string* sun);

  // string wind = 12;
  void clear_wind();
  static const int kWindFieldNumber = 12;
  const ::std::string& wind() const;
  void set_wind(const ::std::string& value);
  #if LANG_CXX11
  void set_wind(::std::string&& value);
  #endif
  void set_wind(const char* value);
  void set_wind(const char* value, size_t size);
  ::std::string* mutable_wind();
  ::std::string* release_wind();
  void set_allocated_wind(::std::string* wind);

  // string typhoon = 13;
  void clear_typhoon();
  static const int kTyphoonFieldNumber = 13;
  const ::std::string& typhoon() const;
  void set_typhoon(const ::std::string& value);
  #if LANG_CXX11
  void set_typhoon(::std::string&& value);
  #endif
  void set_typhoon(const char* value);
  void set_typhoon(const char* value, size_t size);
  ::std::string* mutable_typhoon();
  ::std::string* release_typhoon();
  void set_allocated_typhoon(::std::string* typhoon);

  // string meteor = 14;
  void clear_meteor();
  static const int kMeteorFieldNumber = 14;
  const ::std::string& meteor() const;
  void set_meteor(const ::std::string& value);
  #if LANG_CXX11
  void set_meteor(::std::string&& value);
  #endif
  void set_meteor(const char* value);
  void set_meteor(const char* value, size_t size);
  ::std::string* mutable_meteor();
  ::std::string* release_meteor();
  void set_allocated_meteor(::std::string* meteor);

  // string ice = 15;
  void clear_ice();
  static const int kIceFieldNumber = 15;
  const ::std::string& ice() const;
  void set_ice(const ::std::string& value);
  #if LANG_CXX11
  void set_ice(::std::string&& value);
  #endif
  void set_ice(const char* value);
  void set_ice(const char* value, size_t size);
  ::std::string* mutable_ice();
  ::std::string* release_ice();
  void set_allocated_ice(::std::string* ice);

  // string vegetation_leaf_a = 18;
  void clear_vegetation_leaf_a();
  static const int kVegetationLeafAFieldNumber = 18;
  const ::std::string& vegetation_leaf_a() const;
  void set_vegetation_leaf_a(const ::std::string& value);
  #if LANG_CXX11
  void set_vegetation_leaf_a(::std::string&& value);
  #endif
  void set_vegetation_leaf_a(const char* value);
  void set_vegetation_leaf_a(const char* value, size_t size);
  ::std::string* mutable_vegetation_leaf_a();
  ::std::string* release_vegetation_leaf_a();
  void set_allocated_vegetation_leaf_a(::std::string* vegetation_leaf_a);

  // string vegetation_leaf_b = 19;
  void clear_vegetation_leaf_b();
  static const int kVegetationLeafBFieldNumber = 19;
  const ::std::string& vegetation_leaf_b() const;
  void set_vegetation_leaf_b(const ::std::string& value);
  #if LANG_CXX11
  void set_vegetation_leaf_b(::std::string&& value);
  #endif
  void set_vegetation_leaf_b(const char* value);
  void set_vegetation_leaf_b(const char* value, size_t size);
  ::std::string* mutable_vegetation_leaf_b();
  ::std::string* release_vegetation_leaf_b();
  void set_allocated_vegetation_leaf_b(::std::string* vegetation_leaf_b);

  // string vegetation_flower_a = 20;
  void clear_vegetation_flower_a();
  static const int kVegetationFlowerAFieldNumber = 20;
  const ::std::string& vegetation_flower_a() const;
  void set_vegetation_flower_a(const ::std::string& value);
  #if LANG_CXX11
  void set_vegetation_flower_a(::std::string&& value);
  #endif
  void set_vegetation_flower_a(const char* value);
  void set_vegetation_flower_a(const char* value, size_t size);
  ::std::string* mutable_vegetation_flower_a();
  ::std::string* release_vegetation_flower_a();
  void set_allocated_vegetation_flower_a(::std::string* vegetation_flower_a);

  // string vegetation_flower_b = 21;
  void clear_vegetation_flower_b();
  static const int kVegetationFlowerBFieldNumber = 21;
  const ::std::string& vegetation_flower_b() const;
  void set_vegetation_flower_b(const ::std::string& value);
  #if LANG_CXX11
  void set_vegetation_flower_b(::std::string&& value);
  #endif
  void set_vegetation_flower_b(const char* value);
  void set_vegetation_flower_b(const char* value, size_t size);
  ::std::string* mutable_vegetation_flower_b();
  ::std::string* release_vegetation_flower_b();
  void set_allocated_vegetation_flower_b(::std::string* vegetation_flower_b);

  // @@protoc_insertion_point(class_scope:NetProto.WeatherItemSee)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sun_shine_;
  ::google::protobuf::internal::ArenaStringPtr cloud_;
  ::google::protobuf::internal::ArenaStringPtr rain_;
  ::google::protobuf::internal::ArenaStringPtr hail_;
  ::google::protobuf::internal::ArenaStringPtr moon_;
  ::google::protobuf::internal::ArenaStringPtr thunder_;
  ::google::protobuf::internal::ArenaStringPtr snow_;
  ::google::protobuf::internal::ArenaStringPtr sun_;
  ::google::protobuf::internal::ArenaStringPtr wind_;
  ::google::protobuf::internal::ArenaStringPtr typhoon_;
  ::google::protobuf::internal::ArenaStringPtr meteor_;
  ::google::protobuf::internal::ArenaStringPtr ice_;
  ::google::protobuf::internal::ArenaStringPtr vegetation_leaf_a_;
  ::google::protobuf::internal::ArenaStringPtr vegetation_leaf_b_;
  ::google::protobuf::internal::ArenaStringPtr vegetation_flower_a_;
  ::google::protobuf::internal::ArenaStringPtr vegetation_flower_b_;
  mutable int _cached_size_;
  friend struct protobuf_weather_5fitem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WeatherItemHeard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.WeatherItemHeard) */ {
 public:
  WeatherItemHeard();
  virtual ~WeatherItemHeard();

  WeatherItemHeard(const WeatherItemHeard& from);

  inline WeatherItemHeard& operator=(const WeatherItemHeard& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeatherItemHeard& default_instance();

  static inline const WeatherItemHeard* internal_default_instance() {
    return reinterpret_cast<const WeatherItemHeard*>(
               &_WeatherItemHeard_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(WeatherItemHeard* other);

  // implements Message ----------------------------------------------

  inline WeatherItemHeard* New() const PROTOBUF_FINAL { return New(NULL); }

  WeatherItemHeard* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WeatherItemHeard& from);
  void MergeFrom(const WeatherItemHeard& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WeatherItemHeard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rain = 4;
  void clear_rain();
  static const int kRainFieldNumber = 4;
  const ::std::string& rain() const;
  void set_rain(const ::std::string& value);
  #if LANG_CXX11
  void set_rain(::std::string&& value);
  #endif
  void set_rain(const char* value);
  void set_rain(const char* value, size_t size);
  ::std::string* mutable_rain();
  ::std::string* release_rain();
  void set_allocated_rain(::std::string* rain);

  // string hail = 5;
  void clear_hail();
  static const int kHailFieldNumber = 5;
  const ::std::string& hail() const;
  void set_hail(const ::std::string& value);
  #if LANG_CXX11
  void set_hail(::std::string&& value);
  #endif
  void set_hail(const char* value);
  void set_hail(const char* value, size_t size);
  ::std::string* mutable_hail();
  ::std::string* release_hail();
  void set_allocated_hail(::std::string* hail);

  // string thunder = 7;
  void clear_thunder();
  static const int kThunderFieldNumber = 7;
  const ::std::string& thunder() const;
  void set_thunder(const ::std::string& value);
  #if LANG_CXX11
  void set_thunder(::std::string&& value);
  #endif
  void set_thunder(const char* value);
  void set_thunder(const char* value, size_t size);
  ::std::string* mutable_thunder();
  ::std::string* release_thunder();
  void set_allocated_thunder(::std::string* thunder);

  // string wind = 12;
  void clear_wind();
  static const int kWindFieldNumber = 12;
  const ::std::string& wind() const;
  void set_wind(const ::std::string& value);
  #if LANG_CXX11
  void set_wind(::std::string&& value);
  #endif
  void set_wind(const char* value);
  void set_wind(const char* value, size_t size);
  ::std::string* mutable_wind();
  ::std::string* release_wind();
  void set_allocated_wind(::std::string* wind);

  // @@protoc_insertion_point(class_scope:NetProto.WeatherItemHeard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rain_;
  ::google::protobuf::internal::ArenaStringPtr hail_;
  ::google::protobuf::internal::ArenaStringPtr thunder_;
  ::google::protobuf::internal::ArenaStringPtr wind_;
  mutable int _cached_size_;
  friend struct protobuf_weather_5fitem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WeatherItemFeel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.WeatherItemFeel) */ {
 public:
  WeatherItemFeel();
  virtual ~WeatherItemFeel();

  WeatherItemFeel(const WeatherItemFeel& from);

  inline WeatherItemFeel& operator=(const WeatherItemFeel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeatherItemFeel& default_instance();

  static inline const WeatherItemFeel* internal_default_instance() {
    return reinterpret_cast<const WeatherItemFeel*>(
               &_WeatherItemFeel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(WeatherItemFeel* other);

  // implements Message ----------------------------------------------

  inline WeatherItemFeel* New() const PROTOBUF_FINAL { return New(NULL); }

  WeatherItemFeel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WeatherItemFeel& from);
  void MergeFrom(const WeatherItemFeel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WeatherItemFeel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string temperature = 3;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 3;
  const ::std::string& temperature() const;
  void set_temperature(const ::std::string& value);
  #if LANG_CXX11
  void set_temperature(::std::string&& value);
  #endif
  void set_temperature(const char* value);
  void set_temperature(const char* value, size_t size);
  ::std::string* mutable_temperature();
  ::std::string* release_temperature();
  void set_allocated_temperature(::std::string* temperature);

  // string warmwinter = 16;
  void clear_warmwinter();
  static const int kWarmwinterFieldNumber = 16;
  const ::std::string& warmwinter() const;
  void set_warmwinter(const ::std::string& value);
  #if LANG_CXX11
  void set_warmwinter(::std::string&& value);
  #endif
  void set_warmwinter(const char* value);
  void set_warmwinter(const char* value, size_t size);
  ::std::string* mutable_warmwinter();
  ::std::string* release_warmwinter();
  void set_allocated_warmwinter(::std::string* warmwinter);

  // string humidity = 17;
  void clear_humidity();
  static const int kHumidityFieldNumber = 17;
  const ::std::string& humidity() const;
  void set_humidity(const ::std::string& value);
  #if LANG_CXX11
  void set_humidity(::std::string&& value);
  #endif
  void set_humidity(const char* value);
  void set_humidity(const char* value, size_t size);
  ::std::string* mutable_humidity();
  ::std::string* release_humidity();
  void set_allocated_humidity(::std::string* humidity);

  // @@protoc_insertion_point(class_scope:NetProto.WeatherItemFeel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr temperature_;
  ::google::protobuf::internal::ArenaStringPtr warmwinter_;
  ::google::protobuf::internal::ArenaStringPtr humidity_;
  mutable int _cached_size_;
  friend struct protobuf_weather_5fitem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WeatherSummary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.WeatherSummary) */ {
 public:
  WeatherSummary();
  virtual ~WeatherSummary();

  WeatherSummary(const WeatherSummary& from);

  inline WeatherSummary& operator=(const WeatherSummary& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeatherSummary& default_instance();

  static inline const WeatherSummary* internal_default_instance() {
    return reinterpret_cast<const WeatherSummary*>(
               &_WeatherSummary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(WeatherSummary* other);

  // implements Message ----------------------------------------------

  inline WeatherSummary* New() const PROTOBUF_FINAL { return New(NULL); }

  WeatherSummary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WeatherSummary& from);
  void MergeFrom(const WeatherSummary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WeatherSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string weather = 1;
  void clear_weather();
  static const int kWeatherFieldNumber = 1;
  const ::std::string& weather() const;
  void set_weather(const ::std::string& value);
  #if LANG_CXX11
  void set_weather(::std::string&& value);
  #endif
  void set_weather(const char* value);
  void set_weather(const char* value, size_t size);
  ::std::string* mutable_weather();
  ::std::string* release_weather();
  void set_allocated_weather(::std::string* weather);

  // @@protoc_insertion_point(class_scope:NetProto.WeatherSummary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr weather_;
  mutable int _cached_size_;
  friend struct protobuf_weather_5fitem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WeatherEmotion_Emotion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.WeatherEmotion.Emotion) */ {
 public:
  WeatherEmotion_Emotion();
  virtual ~WeatherEmotion_Emotion();

  WeatherEmotion_Emotion(const WeatherEmotion_Emotion& from);

  inline WeatherEmotion_Emotion& operator=(const WeatherEmotion_Emotion& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeatherEmotion_Emotion& default_instance();

  static inline const WeatherEmotion_Emotion* internal_default_instance() {
    return reinterpret_cast<const WeatherEmotion_Emotion*>(
               &_WeatherEmotion_Emotion_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(WeatherEmotion_Emotion* other);

  // implements Message ----------------------------------------------

  inline WeatherEmotion_Emotion* New() const PROTOBUF_FINAL { return New(NULL); }

  WeatherEmotion_Emotion* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WeatherEmotion_Emotion& from);
  void MergeFrom(const WeatherEmotion_Emotion& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WeatherEmotion_Emotion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string emotion = 1;
  void clear_emotion();
  static const int kEmotionFieldNumber = 1;
  const ::std::string& emotion() const;
  void set_emotion(const ::std::string& value);
  #if LANG_CXX11
  void set_emotion(::std::string&& value);
  #endif
  void set_emotion(const char* value);
  void set_emotion(const char* value, size_t size);
  ::std::string* mutable_emotion();
  ::std::string* release_emotion();
  void set_allocated_emotion(::std::string* emotion);

  // float degree = 2;
  void clear_degree();
  static const int kDegreeFieldNumber = 2;
  float degree() const;
  void set_degree(float value);

  // @@protoc_insertion_point(class_scope:NetProto.WeatherEmotion.Emotion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr emotion_;
  float degree_;
  mutable int _cached_size_;
  friend struct protobuf_weather_5fitem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WeatherEmotion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.WeatherEmotion) */ {
 public:
  WeatherEmotion();
  virtual ~WeatherEmotion();

  WeatherEmotion(const WeatherEmotion& from);

  inline WeatherEmotion& operator=(const WeatherEmotion& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeatherEmotion& default_instance();

  static inline const WeatherEmotion* internal_default_instance() {
    return reinterpret_cast<const WeatherEmotion*>(
               &_WeatherEmotion_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(WeatherEmotion* other);

  // implements Message ----------------------------------------------

  inline WeatherEmotion* New() const PROTOBUF_FINAL { return New(NULL); }

  WeatherEmotion* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WeatherEmotion& from);
  void MergeFrom(const WeatherEmotion& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WeatherEmotion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WeatherEmotion_Emotion Emotion;

  // accessors -------------------------------------------------------

  // repeated .NetProto.WeatherEmotion.Emotion emotion = 1;
  int emotion_size() const;
  void clear_emotion();
  static const int kEmotionFieldNumber = 1;
  const ::NetProto::WeatherEmotion_Emotion& emotion(int index) const;
  ::NetProto::WeatherEmotion_Emotion* mutable_emotion(int index);
  ::NetProto::WeatherEmotion_Emotion* add_emotion();
  ::google::protobuf::RepeatedPtrField< ::NetProto::WeatherEmotion_Emotion >*
      mutable_emotion();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::WeatherEmotion_Emotion >&
      emotion() const;

  // @@protoc_insertion_point(class_scope:NetProto.WeatherEmotion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::WeatherEmotion_Emotion > emotion_;
  mutable int _cached_size_;
  friend struct protobuf_weather_5fitem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.CResult) */ {
 public:
  CResult();
  virtual ~CResult();

  CResult(const CResult& from);

  inline CResult& operator=(const CResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CResult& default_instance();

  static inline const CResult* internal_default_instance() {
    return reinterpret_cast<const CResult*>(
               &_CResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CResult* other);

  // implements Message ----------------------------------------------

  inline CResult* New() const PROTOBUF_FINAL { return New(NULL); }

  CResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CResult& from);
  void MergeFrom(const CResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // .NetProto.WeatherItemSee see = 2;
  bool has_see() const;
  void clear_see();
  static const int kSeeFieldNumber = 2;
  const ::NetProto::WeatherItemSee& see() const;
  ::NetProto::WeatherItemSee* mutable_see();
  ::NetProto::WeatherItemSee* release_see();
  void set_allocated_see(::NetProto::WeatherItemSee* see);

  // .NetProto.WeatherItemHeard heard = 3;
  bool has_heard() const;
  void clear_heard();
  static const int kHeardFieldNumber = 3;
  const ::NetProto::WeatherItemHeard& heard() const;
  ::NetProto::WeatherItemHeard* mutable_heard();
  ::NetProto::WeatherItemHeard* release_heard();
  void set_allocated_heard(::NetProto::WeatherItemHeard* heard);

  // .NetProto.WeatherItemFeel feel = 4;
  bool has_feel() const;
  void clear_feel();
  static const int kFeelFieldNumber = 4;
  const ::NetProto::WeatherItemFeel& feel() const;
  ::NetProto::WeatherItemFeel* mutable_feel();
  ::NetProto::WeatherItemFeel* release_feel();
  void set_allocated_feel(::NetProto::WeatherItemFeel* feel);

  // .NetProto.WeatherSummary summary = 5;
  bool has_summary() const;
  void clear_summary();
  static const int kSummaryFieldNumber = 5;
  const ::NetProto::WeatherSummary& summary() const;
  ::NetProto::WeatherSummary* mutable_summary();
  ::NetProto::WeatherSummary* release_summary();
  void set_allocated_summary(::NetProto::WeatherSummary* summary);

  // .NetProto.WeatherEmotion emotion = 6;
  bool has_emotion() const;
  void clear_emotion();
  static const int kEmotionFieldNumber = 6;
  const ::NetProto::WeatherEmotion& emotion() const;
  ::NetProto::WeatherEmotion* mutable_emotion();
  ::NetProto::WeatherEmotion* release_emotion();
  void set_allocated_emotion(::NetProto::WeatherEmotion* emotion);

  // @@protoc_insertion_point(class_scope:NetProto.CResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NetProto::MsgHead* head_;
  ::NetProto::WeatherItemSee* see_;
  ::NetProto::WeatherItemHeard* heard_;
  ::NetProto::WeatherItemFeel* feel_;
  ::NetProto::WeatherSummary* summary_;
  ::NetProto::WeatherEmotion* emotion_;
  mutable int _cached_size_;
  friend struct protobuf_weather_5fitem_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WeatherItemSee

// string sun_shine = 1;
inline void WeatherItemSee::clear_sun_shine() {
  sun_shine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::sun_shine() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.sun_shine)
  return sun_shine_.GetNoArena();
}
inline void WeatherItemSee::set_sun_shine(const ::std::string& value) {
  
  sun_shine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.sun_shine)
}
#if LANG_CXX11
inline void WeatherItemSee::set_sun_shine(::std::string&& value) {
  
  sun_shine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.sun_shine)
}
#endif
inline void WeatherItemSee::set_sun_shine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sun_shine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.sun_shine)
}
inline void WeatherItemSee::set_sun_shine(const char* value, size_t size) {
  
  sun_shine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.sun_shine)
}
inline ::std::string* WeatherItemSee::mutable_sun_shine() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.sun_shine)
  return sun_shine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_sun_shine() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.sun_shine)
  
  return sun_shine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_sun_shine(::std::string* sun_shine) {
  if (sun_shine != NULL) {
    
  } else {
    
  }
  sun_shine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sun_shine);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.sun_shine)
}

// string cloud = 2;
inline void WeatherItemSee::clear_cloud() {
  cloud_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::cloud() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.cloud)
  return cloud_.GetNoArena();
}
inline void WeatherItemSee::set_cloud(const ::std::string& value) {
  
  cloud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.cloud)
}
#if LANG_CXX11
inline void WeatherItemSee::set_cloud(::std::string&& value) {
  
  cloud_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.cloud)
}
#endif
inline void WeatherItemSee::set_cloud(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cloud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.cloud)
}
inline void WeatherItemSee::set_cloud(const char* value, size_t size) {
  
  cloud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.cloud)
}
inline ::std::string* WeatherItemSee::mutable_cloud() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.cloud)
  return cloud_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_cloud() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.cloud)
  
  return cloud_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_cloud(::std::string* cloud) {
  if (cloud != NULL) {
    
  } else {
    
  }
  cloud_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cloud);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.cloud)
}

// string rain = 4;
inline void WeatherItemSee::clear_rain() {
  rain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::rain() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.rain)
  return rain_.GetNoArena();
}
inline void WeatherItemSee::set_rain(const ::std::string& value) {
  
  rain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.rain)
}
#if LANG_CXX11
inline void WeatherItemSee::set_rain(::std::string&& value) {
  
  rain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.rain)
}
#endif
inline void WeatherItemSee::set_rain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.rain)
}
inline void WeatherItemSee::set_rain(const char* value, size_t size) {
  
  rain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.rain)
}
inline ::std::string* WeatherItemSee::mutable_rain() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.rain)
  return rain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_rain() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.rain)
  
  return rain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_rain(::std::string* rain) {
  if (rain != NULL) {
    
  } else {
    
  }
  rain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rain);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.rain)
}

// string hail = 5;
inline void WeatherItemSee::clear_hail() {
  hail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::hail() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.hail)
  return hail_.GetNoArena();
}
inline void WeatherItemSee::set_hail(const ::std::string& value) {
  
  hail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.hail)
}
#if LANG_CXX11
inline void WeatherItemSee::set_hail(::std::string&& value) {
  
  hail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.hail)
}
#endif
inline void WeatherItemSee::set_hail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.hail)
}
inline void WeatherItemSee::set_hail(const char* value, size_t size) {
  
  hail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.hail)
}
inline ::std::string* WeatherItemSee::mutable_hail() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.hail)
  return hail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_hail() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.hail)
  
  return hail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_hail(::std::string* hail) {
  if (hail != NULL) {
    
  } else {
    
  }
  hail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hail);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.hail)
}

// string moon = 6;
inline void WeatherItemSee::clear_moon() {
  moon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::moon() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.moon)
  return moon_.GetNoArena();
}
inline void WeatherItemSee::set_moon(const ::std::string& value) {
  
  moon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.moon)
}
#if LANG_CXX11
inline void WeatherItemSee::set_moon(::std::string&& value) {
  
  moon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.moon)
}
#endif
inline void WeatherItemSee::set_moon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  moon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.moon)
}
inline void WeatherItemSee::set_moon(const char* value, size_t size) {
  
  moon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.moon)
}
inline ::std::string* WeatherItemSee::mutable_moon() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.moon)
  return moon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_moon() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.moon)
  
  return moon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_moon(::std::string* moon) {
  if (moon != NULL) {
    
  } else {
    
  }
  moon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moon);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.moon)
}

// string thunder = 7;
inline void WeatherItemSee::clear_thunder() {
  thunder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::thunder() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.thunder)
  return thunder_.GetNoArena();
}
inline void WeatherItemSee::set_thunder(const ::std::string& value) {
  
  thunder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.thunder)
}
#if LANG_CXX11
inline void WeatherItemSee::set_thunder(::std::string&& value) {
  
  thunder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.thunder)
}
#endif
inline void WeatherItemSee::set_thunder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thunder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.thunder)
}
inline void WeatherItemSee::set_thunder(const char* value, size_t size) {
  
  thunder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.thunder)
}
inline ::std::string* WeatherItemSee::mutable_thunder() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.thunder)
  return thunder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_thunder() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.thunder)
  
  return thunder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_thunder(::std::string* thunder) {
  if (thunder != NULL) {
    
  } else {
    
  }
  thunder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thunder);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.thunder)
}

// string snow = 8;
inline void WeatherItemSee::clear_snow() {
  snow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::snow() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.snow)
  return snow_.GetNoArena();
}
inline void WeatherItemSee::set_snow(const ::std::string& value) {
  
  snow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.snow)
}
#if LANG_CXX11
inline void WeatherItemSee::set_snow(::std::string&& value) {
  
  snow_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.snow)
}
#endif
inline void WeatherItemSee::set_snow(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  snow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.snow)
}
inline void WeatherItemSee::set_snow(const char* value, size_t size) {
  
  snow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.snow)
}
inline ::std::string* WeatherItemSee::mutable_snow() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.snow)
  return snow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_snow() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.snow)
  
  return snow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_snow(::std::string* snow) {
  if (snow != NULL) {
    
  } else {
    
  }
  snow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snow);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.snow)
}

// string sun = 11;
inline void WeatherItemSee::clear_sun() {
  sun_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::sun() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.sun)
  return sun_.GetNoArena();
}
inline void WeatherItemSee::set_sun(const ::std::string& value) {
  
  sun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.sun)
}
#if LANG_CXX11
inline void WeatherItemSee::set_sun(::std::string&& value) {
  
  sun_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.sun)
}
#endif
inline void WeatherItemSee::set_sun(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.sun)
}
inline void WeatherItemSee::set_sun(const char* value, size_t size) {
  
  sun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.sun)
}
inline ::std::string* WeatherItemSee::mutable_sun() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.sun)
  return sun_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_sun() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.sun)
  
  return sun_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_sun(::std::string* sun) {
  if (sun != NULL) {
    
  } else {
    
  }
  sun_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sun);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.sun)
}

// string wind = 12;
inline void WeatherItemSee::clear_wind() {
  wind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::wind() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.wind)
  return wind_.GetNoArena();
}
inline void WeatherItemSee::set_wind(const ::std::string& value) {
  
  wind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.wind)
}
#if LANG_CXX11
inline void WeatherItemSee::set_wind(::std::string&& value) {
  
  wind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.wind)
}
#endif
inline void WeatherItemSee::set_wind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.wind)
}
inline void WeatherItemSee::set_wind(const char* value, size_t size) {
  
  wind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.wind)
}
inline ::std::string* WeatherItemSee::mutable_wind() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.wind)
  return wind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_wind() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.wind)
  
  return wind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_wind(::std::string* wind) {
  if (wind != NULL) {
    
  } else {
    
  }
  wind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wind);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.wind)
}

// string typhoon = 13;
inline void WeatherItemSee::clear_typhoon() {
  typhoon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::typhoon() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.typhoon)
  return typhoon_.GetNoArena();
}
inline void WeatherItemSee::set_typhoon(const ::std::string& value) {
  
  typhoon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.typhoon)
}
#if LANG_CXX11
inline void WeatherItemSee::set_typhoon(::std::string&& value) {
  
  typhoon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.typhoon)
}
#endif
inline void WeatherItemSee::set_typhoon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  typhoon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.typhoon)
}
inline void WeatherItemSee::set_typhoon(const char* value, size_t size) {
  
  typhoon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.typhoon)
}
inline ::std::string* WeatherItemSee::mutable_typhoon() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.typhoon)
  return typhoon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_typhoon() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.typhoon)
  
  return typhoon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_typhoon(::std::string* typhoon) {
  if (typhoon != NULL) {
    
  } else {
    
  }
  typhoon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), typhoon);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.typhoon)
}

// string meteor = 14;
inline void WeatherItemSee::clear_meteor() {
  meteor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::meteor() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.meteor)
  return meteor_.GetNoArena();
}
inline void WeatherItemSee::set_meteor(const ::std::string& value) {
  
  meteor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.meteor)
}
#if LANG_CXX11
inline void WeatherItemSee::set_meteor(::std::string&& value) {
  
  meteor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.meteor)
}
#endif
inline void WeatherItemSee::set_meteor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  meteor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.meteor)
}
inline void WeatherItemSee::set_meteor(const char* value, size_t size) {
  
  meteor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.meteor)
}
inline ::std::string* WeatherItemSee::mutable_meteor() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.meteor)
  return meteor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_meteor() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.meteor)
  
  return meteor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_meteor(::std::string* meteor) {
  if (meteor != NULL) {
    
  } else {
    
  }
  meteor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meteor);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.meteor)
}

// string ice = 15;
inline void WeatherItemSee::clear_ice() {
  ice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::ice() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.ice)
  return ice_.GetNoArena();
}
inline void WeatherItemSee::set_ice(const ::std::string& value) {
  
  ice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.ice)
}
#if LANG_CXX11
inline void WeatherItemSee::set_ice(::std::string&& value) {
  
  ice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.ice)
}
#endif
inline void WeatherItemSee::set_ice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.ice)
}
inline void WeatherItemSee::set_ice(const char* value, size_t size) {
  
  ice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.ice)
}
inline ::std::string* WeatherItemSee::mutable_ice() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.ice)
  return ice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_ice() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.ice)
  
  return ice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_ice(::std::string* ice) {
  if (ice != NULL) {
    
  } else {
    
  }
  ice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.ice)
}

// string vegetation_leaf_a = 18;
inline void WeatherItemSee::clear_vegetation_leaf_a() {
  vegetation_leaf_a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::vegetation_leaf_a() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.vegetation_leaf_a)
  return vegetation_leaf_a_.GetNoArena();
}
inline void WeatherItemSee::set_vegetation_leaf_a(const ::std::string& value) {
  
  vegetation_leaf_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.vegetation_leaf_a)
}
#if LANG_CXX11
inline void WeatherItemSee::set_vegetation_leaf_a(::std::string&& value) {
  
  vegetation_leaf_a_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.vegetation_leaf_a)
}
#endif
inline void WeatherItemSee::set_vegetation_leaf_a(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vegetation_leaf_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.vegetation_leaf_a)
}
inline void WeatherItemSee::set_vegetation_leaf_a(const char* value, size_t size) {
  
  vegetation_leaf_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.vegetation_leaf_a)
}
inline ::std::string* WeatherItemSee::mutable_vegetation_leaf_a() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.vegetation_leaf_a)
  return vegetation_leaf_a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_vegetation_leaf_a() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.vegetation_leaf_a)
  
  return vegetation_leaf_a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_vegetation_leaf_a(::std::string* vegetation_leaf_a) {
  if (vegetation_leaf_a != NULL) {
    
  } else {
    
  }
  vegetation_leaf_a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vegetation_leaf_a);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.vegetation_leaf_a)
}

// string vegetation_leaf_b = 19;
inline void WeatherItemSee::clear_vegetation_leaf_b() {
  vegetation_leaf_b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::vegetation_leaf_b() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.vegetation_leaf_b)
  return vegetation_leaf_b_.GetNoArena();
}
inline void WeatherItemSee::set_vegetation_leaf_b(const ::std::string& value) {
  
  vegetation_leaf_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.vegetation_leaf_b)
}
#if LANG_CXX11
inline void WeatherItemSee::set_vegetation_leaf_b(::std::string&& value) {
  
  vegetation_leaf_b_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.vegetation_leaf_b)
}
#endif
inline void WeatherItemSee::set_vegetation_leaf_b(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vegetation_leaf_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.vegetation_leaf_b)
}
inline void WeatherItemSee::set_vegetation_leaf_b(const char* value, size_t size) {
  
  vegetation_leaf_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.vegetation_leaf_b)
}
inline ::std::string* WeatherItemSee::mutable_vegetation_leaf_b() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.vegetation_leaf_b)
  return vegetation_leaf_b_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_vegetation_leaf_b() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.vegetation_leaf_b)
  
  return vegetation_leaf_b_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_vegetation_leaf_b(::std::string* vegetation_leaf_b) {
  if (vegetation_leaf_b != NULL) {
    
  } else {
    
  }
  vegetation_leaf_b_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vegetation_leaf_b);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.vegetation_leaf_b)
}

// string vegetation_flower_a = 20;
inline void WeatherItemSee::clear_vegetation_flower_a() {
  vegetation_flower_a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::vegetation_flower_a() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.vegetation_flower_a)
  return vegetation_flower_a_.GetNoArena();
}
inline void WeatherItemSee::set_vegetation_flower_a(const ::std::string& value) {
  
  vegetation_flower_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.vegetation_flower_a)
}
#if LANG_CXX11
inline void WeatherItemSee::set_vegetation_flower_a(::std::string&& value) {
  
  vegetation_flower_a_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.vegetation_flower_a)
}
#endif
inline void WeatherItemSee::set_vegetation_flower_a(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vegetation_flower_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.vegetation_flower_a)
}
inline void WeatherItemSee::set_vegetation_flower_a(const char* value, size_t size) {
  
  vegetation_flower_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.vegetation_flower_a)
}
inline ::std::string* WeatherItemSee::mutable_vegetation_flower_a() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.vegetation_flower_a)
  return vegetation_flower_a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_vegetation_flower_a() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.vegetation_flower_a)
  
  return vegetation_flower_a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_vegetation_flower_a(::std::string* vegetation_flower_a) {
  if (vegetation_flower_a != NULL) {
    
  } else {
    
  }
  vegetation_flower_a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vegetation_flower_a);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.vegetation_flower_a)
}

// string vegetation_flower_b = 21;
inline void WeatherItemSee::clear_vegetation_flower_b() {
  vegetation_flower_b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemSee::vegetation_flower_b() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemSee.vegetation_flower_b)
  return vegetation_flower_b_.GetNoArena();
}
inline void WeatherItemSee::set_vegetation_flower_b(const ::std::string& value) {
  
  vegetation_flower_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemSee.vegetation_flower_b)
}
#if LANG_CXX11
inline void WeatherItemSee::set_vegetation_flower_b(::std::string&& value) {
  
  vegetation_flower_b_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemSee.vegetation_flower_b)
}
#endif
inline void WeatherItemSee::set_vegetation_flower_b(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vegetation_flower_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemSee.vegetation_flower_b)
}
inline void WeatherItemSee::set_vegetation_flower_b(const char* value, size_t size) {
  
  vegetation_flower_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemSee.vegetation_flower_b)
}
inline ::std::string* WeatherItemSee::mutable_vegetation_flower_b() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemSee.vegetation_flower_b)
  return vegetation_flower_b_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemSee::release_vegetation_flower_b() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemSee.vegetation_flower_b)
  
  return vegetation_flower_b_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemSee::set_allocated_vegetation_flower_b(::std::string* vegetation_flower_b) {
  if (vegetation_flower_b != NULL) {
    
  } else {
    
  }
  vegetation_flower_b_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vegetation_flower_b);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemSee.vegetation_flower_b)
}

// -------------------------------------------------------------------

// WeatherItemHeard

// string rain = 4;
inline void WeatherItemHeard::clear_rain() {
  rain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemHeard::rain() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemHeard.rain)
  return rain_.GetNoArena();
}
inline void WeatherItemHeard::set_rain(const ::std::string& value) {
  
  rain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemHeard.rain)
}
#if LANG_CXX11
inline void WeatherItemHeard::set_rain(::std::string&& value) {
  
  rain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemHeard.rain)
}
#endif
inline void WeatherItemHeard::set_rain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemHeard.rain)
}
inline void WeatherItemHeard::set_rain(const char* value, size_t size) {
  
  rain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemHeard.rain)
}
inline ::std::string* WeatherItemHeard::mutable_rain() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemHeard.rain)
  return rain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemHeard::release_rain() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemHeard.rain)
  
  return rain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemHeard::set_allocated_rain(::std::string* rain) {
  if (rain != NULL) {
    
  } else {
    
  }
  rain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rain);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemHeard.rain)
}

// string hail = 5;
inline void WeatherItemHeard::clear_hail() {
  hail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemHeard::hail() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemHeard.hail)
  return hail_.GetNoArena();
}
inline void WeatherItemHeard::set_hail(const ::std::string& value) {
  
  hail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemHeard.hail)
}
#if LANG_CXX11
inline void WeatherItemHeard::set_hail(::std::string&& value) {
  
  hail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemHeard.hail)
}
#endif
inline void WeatherItemHeard::set_hail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemHeard.hail)
}
inline void WeatherItemHeard::set_hail(const char* value, size_t size) {
  
  hail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemHeard.hail)
}
inline ::std::string* WeatherItemHeard::mutable_hail() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemHeard.hail)
  return hail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemHeard::release_hail() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemHeard.hail)
  
  return hail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemHeard::set_allocated_hail(::std::string* hail) {
  if (hail != NULL) {
    
  } else {
    
  }
  hail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hail);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemHeard.hail)
}

// string thunder = 7;
inline void WeatherItemHeard::clear_thunder() {
  thunder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemHeard::thunder() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemHeard.thunder)
  return thunder_.GetNoArena();
}
inline void WeatherItemHeard::set_thunder(const ::std::string& value) {
  
  thunder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemHeard.thunder)
}
#if LANG_CXX11
inline void WeatherItemHeard::set_thunder(::std::string&& value) {
  
  thunder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemHeard.thunder)
}
#endif
inline void WeatherItemHeard::set_thunder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thunder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemHeard.thunder)
}
inline void WeatherItemHeard::set_thunder(const char* value, size_t size) {
  
  thunder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemHeard.thunder)
}
inline ::std::string* WeatherItemHeard::mutable_thunder() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemHeard.thunder)
  return thunder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemHeard::release_thunder() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemHeard.thunder)
  
  return thunder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemHeard::set_allocated_thunder(::std::string* thunder) {
  if (thunder != NULL) {
    
  } else {
    
  }
  thunder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thunder);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemHeard.thunder)
}

// string wind = 12;
inline void WeatherItemHeard::clear_wind() {
  wind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemHeard::wind() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemHeard.wind)
  return wind_.GetNoArena();
}
inline void WeatherItemHeard::set_wind(const ::std::string& value) {
  
  wind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemHeard.wind)
}
#if LANG_CXX11
inline void WeatherItemHeard::set_wind(::std::string&& value) {
  
  wind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemHeard.wind)
}
#endif
inline void WeatherItemHeard::set_wind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemHeard.wind)
}
inline void WeatherItemHeard::set_wind(const char* value, size_t size) {
  
  wind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemHeard.wind)
}
inline ::std::string* WeatherItemHeard::mutable_wind() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemHeard.wind)
  return wind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemHeard::release_wind() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemHeard.wind)
  
  return wind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemHeard::set_allocated_wind(::std::string* wind) {
  if (wind != NULL) {
    
  } else {
    
  }
  wind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wind);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemHeard.wind)
}

// -------------------------------------------------------------------

// WeatherItemFeel

// string temperature = 3;
inline void WeatherItemFeel::clear_temperature() {
  temperature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemFeel::temperature() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemFeel.temperature)
  return temperature_.GetNoArena();
}
inline void WeatherItemFeel::set_temperature(const ::std::string& value) {
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemFeel.temperature)
}
#if LANG_CXX11
inline void WeatherItemFeel::set_temperature(::std::string&& value) {
  
  temperature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemFeel.temperature)
}
#endif
inline void WeatherItemFeel::set_temperature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemFeel.temperature)
}
inline void WeatherItemFeel::set_temperature(const char* value, size_t size) {
  
  temperature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemFeel.temperature)
}
inline ::std::string* WeatherItemFeel::mutable_temperature() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemFeel.temperature)
  return temperature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemFeel::release_temperature() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemFeel.temperature)
  
  return temperature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemFeel::set_allocated_temperature(::std::string* temperature) {
  if (temperature != NULL) {
    
  } else {
    
  }
  temperature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), temperature);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemFeel.temperature)
}

// string warmwinter = 16;
inline void WeatherItemFeel::clear_warmwinter() {
  warmwinter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemFeel::warmwinter() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemFeel.warmwinter)
  return warmwinter_.GetNoArena();
}
inline void WeatherItemFeel::set_warmwinter(const ::std::string& value) {
  
  warmwinter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemFeel.warmwinter)
}
#if LANG_CXX11
inline void WeatherItemFeel::set_warmwinter(::std::string&& value) {
  
  warmwinter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemFeel.warmwinter)
}
#endif
inline void WeatherItemFeel::set_warmwinter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  warmwinter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemFeel.warmwinter)
}
inline void WeatherItemFeel::set_warmwinter(const char* value, size_t size) {
  
  warmwinter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemFeel.warmwinter)
}
inline ::std::string* WeatherItemFeel::mutable_warmwinter() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemFeel.warmwinter)
  return warmwinter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemFeel::release_warmwinter() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemFeel.warmwinter)
  
  return warmwinter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemFeel::set_allocated_warmwinter(::std::string* warmwinter) {
  if (warmwinter != NULL) {
    
  } else {
    
  }
  warmwinter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warmwinter);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemFeel.warmwinter)
}

// string humidity = 17;
inline void WeatherItemFeel::clear_humidity() {
  humidity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherItemFeel::humidity() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItemFeel.humidity)
  return humidity_.GetNoArena();
}
inline void WeatherItemFeel::set_humidity(const ::std::string& value) {
  
  humidity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherItemFeel.humidity)
}
#if LANG_CXX11
inline void WeatherItemFeel::set_humidity(::std::string&& value) {
  
  humidity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherItemFeel.humidity)
}
#endif
inline void WeatherItemFeel::set_humidity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  humidity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherItemFeel.humidity)
}
inline void WeatherItemFeel::set_humidity(const char* value, size_t size) {
  
  humidity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherItemFeel.humidity)
}
inline ::std::string* WeatherItemFeel::mutable_humidity() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItemFeel.humidity)
  return humidity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherItemFeel::release_humidity() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItemFeel.humidity)
  
  return humidity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherItemFeel::set_allocated_humidity(::std::string* humidity) {
  if (humidity != NULL) {
    
  } else {
    
  }
  humidity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), humidity);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItemFeel.humidity)
}

// -------------------------------------------------------------------

// WeatherSummary

// string weather = 1;
inline void WeatherSummary::clear_weather() {
  weather_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherSummary::weather() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherSummary.weather)
  return weather_.GetNoArena();
}
inline void WeatherSummary::set_weather(const ::std::string& value) {
  
  weather_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherSummary.weather)
}
#if LANG_CXX11
inline void WeatherSummary::set_weather(::std::string&& value) {
  
  weather_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherSummary.weather)
}
#endif
inline void WeatherSummary::set_weather(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  weather_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherSummary.weather)
}
inline void WeatherSummary::set_weather(const char* value, size_t size) {
  
  weather_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherSummary.weather)
}
inline ::std::string* WeatherSummary::mutable_weather() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherSummary.weather)
  return weather_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherSummary::release_weather() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherSummary.weather)
  
  return weather_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherSummary::set_allocated_weather(::std::string* weather) {
  if (weather != NULL) {
    
  } else {
    
  }
  weather_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weather);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherSummary.weather)
}

// -------------------------------------------------------------------

// WeatherEmotion_Emotion

// string emotion = 1;
inline void WeatherEmotion_Emotion::clear_emotion() {
  emotion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeatherEmotion_Emotion::emotion() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherEmotion.Emotion.emotion)
  return emotion_.GetNoArena();
}
inline void WeatherEmotion_Emotion::set_emotion(const ::std::string& value) {
  
  emotion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.WeatherEmotion.Emotion.emotion)
}
#if LANG_CXX11
inline void WeatherEmotion_Emotion::set_emotion(::std::string&& value) {
  
  emotion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.WeatherEmotion.Emotion.emotion)
}
#endif
inline void WeatherEmotion_Emotion::set_emotion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  emotion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.WeatherEmotion.Emotion.emotion)
}
inline void WeatherEmotion_Emotion::set_emotion(const char* value, size_t size) {
  
  emotion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.WeatherEmotion.Emotion.emotion)
}
inline ::std::string* WeatherEmotion_Emotion::mutable_emotion() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherEmotion.Emotion.emotion)
  return emotion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeatherEmotion_Emotion::release_emotion() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherEmotion.Emotion.emotion)
  
  return emotion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeatherEmotion_Emotion::set_allocated_emotion(::std::string* emotion) {
  if (emotion != NULL) {
    
  } else {
    
  }
  emotion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emotion);
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherEmotion.Emotion.emotion)
}

// float degree = 2;
inline void WeatherEmotion_Emotion::clear_degree() {
  degree_ = 0;
}
inline float WeatherEmotion_Emotion::degree() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherEmotion.Emotion.degree)
  return degree_;
}
inline void WeatherEmotion_Emotion::set_degree(float value) {
  
  degree_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherEmotion.Emotion.degree)
}

// -------------------------------------------------------------------

// WeatherEmotion

// repeated .NetProto.WeatherEmotion.Emotion emotion = 1;
inline int WeatherEmotion::emotion_size() const {
  return emotion_.size();
}
inline void WeatherEmotion::clear_emotion() {
  emotion_.Clear();
}
inline const ::NetProto::WeatherEmotion_Emotion& WeatherEmotion::emotion(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherEmotion.emotion)
  return emotion_.Get(index);
}
inline ::NetProto::WeatherEmotion_Emotion* WeatherEmotion::mutable_emotion(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherEmotion.emotion)
  return emotion_.Mutable(index);
}
inline ::NetProto::WeatherEmotion_Emotion* WeatherEmotion::add_emotion() {
  // @@protoc_insertion_point(field_add:NetProto.WeatherEmotion.emotion)
  return emotion_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::WeatherEmotion_Emotion >*
WeatherEmotion::mutable_emotion() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.WeatherEmotion.emotion)
  return &emotion_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::WeatherEmotion_Emotion >&
WeatherEmotion::emotion() const {
  // @@protoc_insertion_point(field_list:NetProto.WeatherEmotion.emotion)
  return emotion_;
}

// -------------------------------------------------------------------

// CResult

// .NetProto.MsgHead head = 1;
inline bool CResult::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void CResult::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& CResult::head() const {
  // @@protoc_insertion_point(field_get:NetProto.CResult.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* CResult::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CResult.head)
  return head_;
}
inline ::NetProto::MsgHead* CResult::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.CResult.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void CResult::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CResult.head)
}

// .NetProto.WeatherItemSee see = 2;
inline bool CResult::has_see() const {
  return this != internal_default_instance() && see_ != NULL;
}
inline void CResult::clear_see() {
  if (GetArenaNoVirtual() == NULL && see_ != NULL) delete see_;
  see_ = NULL;
}
inline const ::NetProto::WeatherItemSee& CResult::see() const {
  // @@protoc_insertion_point(field_get:NetProto.CResult.see)
  return see_ != NULL ? *see_
                         : *::NetProto::WeatherItemSee::internal_default_instance();
}
inline ::NetProto::WeatherItemSee* CResult::mutable_see() {
  
  if (see_ == NULL) {
    see_ = new ::NetProto::WeatherItemSee;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CResult.see)
  return see_;
}
inline ::NetProto::WeatherItemSee* CResult::release_see() {
  // @@protoc_insertion_point(field_release:NetProto.CResult.see)
  
  ::NetProto::WeatherItemSee* temp = see_;
  see_ = NULL;
  return temp;
}
inline void CResult::set_allocated_see(::NetProto::WeatherItemSee* see) {
  delete see_;
  see_ = see;
  if (see) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CResult.see)
}

// .NetProto.WeatherItemHeard heard = 3;
inline bool CResult::has_heard() const {
  return this != internal_default_instance() && heard_ != NULL;
}
inline void CResult::clear_heard() {
  if (GetArenaNoVirtual() == NULL && heard_ != NULL) delete heard_;
  heard_ = NULL;
}
inline const ::NetProto::WeatherItemHeard& CResult::heard() const {
  // @@protoc_insertion_point(field_get:NetProto.CResult.heard)
  return heard_ != NULL ? *heard_
                         : *::NetProto::WeatherItemHeard::internal_default_instance();
}
inline ::NetProto::WeatherItemHeard* CResult::mutable_heard() {
  
  if (heard_ == NULL) {
    heard_ = new ::NetProto::WeatherItemHeard;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CResult.heard)
  return heard_;
}
inline ::NetProto::WeatherItemHeard* CResult::release_heard() {
  // @@protoc_insertion_point(field_release:NetProto.CResult.heard)
  
  ::NetProto::WeatherItemHeard* temp = heard_;
  heard_ = NULL;
  return temp;
}
inline void CResult::set_allocated_heard(::NetProto::WeatherItemHeard* heard) {
  delete heard_;
  heard_ = heard;
  if (heard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CResult.heard)
}

// .NetProto.WeatherItemFeel feel = 4;
inline bool CResult::has_feel() const {
  return this != internal_default_instance() && feel_ != NULL;
}
inline void CResult::clear_feel() {
  if (GetArenaNoVirtual() == NULL && feel_ != NULL) delete feel_;
  feel_ = NULL;
}
inline const ::NetProto::WeatherItemFeel& CResult::feel() const {
  // @@protoc_insertion_point(field_get:NetProto.CResult.feel)
  return feel_ != NULL ? *feel_
                         : *::NetProto::WeatherItemFeel::internal_default_instance();
}
inline ::NetProto::WeatherItemFeel* CResult::mutable_feel() {
  
  if (feel_ == NULL) {
    feel_ = new ::NetProto::WeatherItemFeel;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CResult.feel)
  return feel_;
}
inline ::NetProto::WeatherItemFeel* CResult::release_feel() {
  // @@protoc_insertion_point(field_release:NetProto.CResult.feel)
  
  ::NetProto::WeatherItemFeel* temp = feel_;
  feel_ = NULL;
  return temp;
}
inline void CResult::set_allocated_feel(::NetProto::WeatherItemFeel* feel) {
  delete feel_;
  feel_ = feel;
  if (feel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CResult.feel)
}

// .NetProto.WeatherSummary summary = 5;
inline bool CResult::has_summary() const {
  return this != internal_default_instance() && summary_ != NULL;
}
inline void CResult::clear_summary() {
  if (GetArenaNoVirtual() == NULL && summary_ != NULL) delete summary_;
  summary_ = NULL;
}
inline const ::NetProto::WeatherSummary& CResult::summary() const {
  // @@protoc_insertion_point(field_get:NetProto.CResult.summary)
  return summary_ != NULL ? *summary_
                         : *::NetProto::WeatherSummary::internal_default_instance();
}
inline ::NetProto::WeatherSummary* CResult::mutable_summary() {
  
  if (summary_ == NULL) {
    summary_ = new ::NetProto::WeatherSummary;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CResult.summary)
  return summary_;
}
inline ::NetProto::WeatherSummary* CResult::release_summary() {
  // @@protoc_insertion_point(field_release:NetProto.CResult.summary)
  
  ::NetProto::WeatherSummary* temp = summary_;
  summary_ = NULL;
  return temp;
}
inline void CResult::set_allocated_summary(::NetProto::WeatherSummary* summary) {
  delete summary_;
  summary_ = summary;
  if (summary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CResult.summary)
}

// .NetProto.WeatherEmotion emotion = 6;
inline bool CResult::has_emotion() const {
  return this != internal_default_instance() && emotion_ != NULL;
}
inline void CResult::clear_emotion() {
  if (GetArenaNoVirtual() == NULL && emotion_ != NULL) delete emotion_;
  emotion_ = NULL;
}
inline const ::NetProto::WeatherEmotion& CResult::emotion() const {
  // @@protoc_insertion_point(field_get:NetProto.CResult.emotion)
  return emotion_ != NULL ? *emotion_
                         : *::NetProto::WeatherEmotion::internal_default_instance();
}
inline ::NetProto::WeatherEmotion* CResult::mutable_emotion() {
  
  if (emotion_ == NULL) {
    emotion_ = new ::NetProto::WeatherEmotion;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.CResult.emotion)
  return emotion_;
}
inline ::NetProto::WeatherEmotion* CResult::release_emotion() {
  // @@protoc_insertion_point(field_release:NetProto.CResult.emotion)
  
  ::NetProto::WeatherEmotion* temp = emotion_;
  emotion_ = NULL;
  return temp;
}
inline void CResult::set_allocated_emotion(::NetProto::WeatherEmotion* emotion) {
  delete emotion_;
  emotion_ = emotion;
  if (emotion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.CResult.emotion)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace NetProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_weather_5fitem_2eproto__INCLUDED
