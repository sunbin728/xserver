// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gs_2_pw.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gs_2_pw.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
namespace gs2pw {
class ServerKeepAliveReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServerKeepAliveReq> {
} _ServerKeepAliveReq_default_instance_;
class ServerKeepAliveRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServerKeepAliveResp> {
} _ServerKeepAliveResp_default_instance_;

namespace protobuf_gs_5f2_5fpw_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKeepAliveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKeepAliveReq, gs_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKeepAliveResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKeepAliveResp, pw_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKeepAliveResp, pw_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKeepAliveResp, multiple_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ServerKeepAliveReq)},
  { 6, -1, sizeof(ServerKeepAliveResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerKeepAliveReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerKeepAliveResp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gs_2_pw.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _ServerKeepAliveReq_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ServerKeepAliveResp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ServerKeepAliveReq_default_instance_.DefaultConstruct();
  _ServerKeepAliveResp_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rgs_2_pw.proto\022\016NetProto.gs2pw\"#\n\022Serve"
      "rKeepAliveReq\022\r\n\005gs_id\030\001 \001(\r\"G\n\023ServerKe"
      "epAliveResp\022\r\n\005pw_id\030\001 \001(\r\022\017\n\007pw_time\030\002 "
      "\001(\004\022\020\n\010multiple\030\003 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 149);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gs_2_pw.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_gs_5f2_5fpw_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerKeepAliveReq::kGsIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerKeepAliveReq::ServerKeepAliveReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gs_5f2_5fpw_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.gs2pw.ServerKeepAliveReq)
}
ServerKeepAliveReq::ServerKeepAliveReq(const ServerKeepAliveReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gs_id_ = from.gs_id_;
  // @@protoc_insertion_point(copy_constructor:NetProto.gs2pw.ServerKeepAliveReq)
}

void ServerKeepAliveReq::SharedCtor() {
  gs_id_ = 0u;
  _cached_size_ = 0;
}

ServerKeepAliveReq::~ServerKeepAliveReq() {
  // @@protoc_insertion_point(destructor:NetProto.gs2pw.ServerKeepAliveReq)
  SharedDtor();
}

void ServerKeepAliveReq::SharedDtor() {
}

void ServerKeepAliveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerKeepAliveReq::descriptor() {
  protobuf_gs_5f2_5fpw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gs_5f2_5fpw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerKeepAliveReq& ServerKeepAliveReq::default_instance() {
  protobuf_gs_5f2_5fpw_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerKeepAliveReq* ServerKeepAliveReq::New(::google::protobuf::Arena* arena) const {
  ServerKeepAliveReq* n = new ServerKeepAliveReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerKeepAliveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.gs2pw.ServerKeepAliveReq)
  gs_id_ = 0u;
}

bool ServerKeepAliveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.gs2pw.ServerKeepAliveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gs_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gs_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.gs2pw.ServerKeepAliveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.gs2pw.ServerKeepAliveReq)
  return false;
#undef DO_
}

void ServerKeepAliveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.gs2pw.ServerKeepAliveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gs_id = 1;
  if (this->gs_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gs_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.gs2pw.ServerKeepAliveReq)
}

::google::protobuf::uint8* ServerKeepAliveReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.gs2pw.ServerKeepAliveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gs_id = 1;
  if (this->gs_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gs_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.gs2pw.ServerKeepAliveReq)
  return target;
}

size_t ServerKeepAliveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.gs2pw.ServerKeepAliveReq)
  size_t total_size = 0;

  // uint32 gs_id = 1;
  if (this->gs_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gs_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerKeepAliveReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.gs2pw.ServerKeepAliveReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerKeepAliveReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerKeepAliveReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.gs2pw.ServerKeepAliveReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.gs2pw.ServerKeepAliveReq)
    MergeFrom(*source);
  }
}

void ServerKeepAliveReq::MergeFrom(const ServerKeepAliveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.gs2pw.ServerKeepAliveReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gs_id() != 0) {
    set_gs_id(from.gs_id());
  }
}

void ServerKeepAliveReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.gs2pw.ServerKeepAliveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerKeepAliveReq::CopyFrom(const ServerKeepAliveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.gs2pw.ServerKeepAliveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerKeepAliveReq::IsInitialized() const {
  return true;
}

void ServerKeepAliveReq::Swap(ServerKeepAliveReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerKeepAliveReq::InternalSwap(ServerKeepAliveReq* other) {
  std::swap(gs_id_, other->gs_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerKeepAliveReq::GetMetadata() const {
  protobuf_gs_5f2_5fpw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gs_5f2_5fpw_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerKeepAliveReq

// uint32 gs_id = 1;
void ServerKeepAliveReq::clear_gs_id() {
  gs_id_ = 0u;
}
::google::protobuf::uint32 ServerKeepAliveReq::gs_id() const {
  // @@protoc_insertion_point(field_get:NetProto.gs2pw.ServerKeepAliveReq.gs_id)
  return gs_id_;
}
void ServerKeepAliveReq::set_gs_id(::google::protobuf::uint32 value) {
  
  gs_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.gs2pw.ServerKeepAliveReq.gs_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerKeepAliveResp::kPwIdFieldNumber;
const int ServerKeepAliveResp::kPwTimeFieldNumber;
const int ServerKeepAliveResp::kMultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerKeepAliveResp::ServerKeepAliveResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gs_5f2_5fpw_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.gs2pw.ServerKeepAliveResp)
}
ServerKeepAliveResp::ServerKeepAliveResp(const ServerKeepAliveResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pw_time_, &from.pw_time_,
    reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&pw_time_) + sizeof(multiple_));
  // @@protoc_insertion_point(copy_constructor:NetProto.gs2pw.ServerKeepAliveResp)
}

void ServerKeepAliveResp::SharedCtor() {
  ::memset(&pw_time_, 0, reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&pw_time_) + sizeof(multiple_));
  _cached_size_ = 0;
}

ServerKeepAliveResp::~ServerKeepAliveResp() {
  // @@protoc_insertion_point(destructor:NetProto.gs2pw.ServerKeepAliveResp)
  SharedDtor();
}

void ServerKeepAliveResp::SharedDtor() {
}

void ServerKeepAliveResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerKeepAliveResp::descriptor() {
  protobuf_gs_5f2_5fpw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gs_5f2_5fpw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerKeepAliveResp& ServerKeepAliveResp::default_instance() {
  protobuf_gs_5f2_5fpw_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerKeepAliveResp* ServerKeepAliveResp::New(::google::protobuf::Arena* arena) const {
  ServerKeepAliveResp* n = new ServerKeepAliveResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerKeepAliveResp::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.gs2pw.ServerKeepAliveResp)
  ::memset(&pw_time_, 0, reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&pw_time_) + sizeof(multiple_));
}

bool ServerKeepAliveResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.gs2pw.ServerKeepAliveResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pw_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pw_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 pw_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pw_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 multiple = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.gs2pw.ServerKeepAliveResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.gs2pw.ServerKeepAliveResp)
  return false;
#undef DO_
}

void ServerKeepAliveResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.gs2pw.ServerKeepAliveResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pw_id = 1;
  if (this->pw_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pw_id(), output);
  }

  // uint64 pw_time = 2;
  if (this->pw_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pw_time(), output);
  }

  // uint32 multiple = 3;
  if (this->multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->multiple(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.gs2pw.ServerKeepAliveResp)
}

::google::protobuf::uint8* ServerKeepAliveResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.gs2pw.ServerKeepAliveResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pw_id = 1;
  if (this->pw_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pw_id(), target);
  }

  // uint64 pw_time = 2;
  if (this->pw_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pw_time(), target);
  }

  // uint32 multiple = 3;
  if (this->multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->multiple(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.gs2pw.ServerKeepAliveResp)
  return target;
}

size_t ServerKeepAliveResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.gs2pw.ServerKeepAliveResp)
  size_t total_size = 0;

  // uint64 pw_time = 2;
  if (this->pw_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pw_time());
  }

  // uint32 pw_id = 1;
  if (this->pw_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pw_id());
  }

  // uint32 multiple = 3;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->multiple());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerKeepAliveResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.gs2pw.ServerKeepAliveResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerKeepAliveResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerKeepAliveResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.gs2pw.ServerKeepAliveResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.gs2pw.ServerKeepAliveResp)
    MergeFrom(*source);
  }
}

void ServerKeepAliveResp::MergeFrom(const ServerKeepAliveResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.gs2pw.ServerKeepAliveResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pw_time() != 0) {
    set_pw_time(from.pw_time());
  }
  if (from.pw_id() != 0) {
    set_pw_id(from.pw_id());
  }
  if (from.multiple() != 0) {
    set_multiple(from.multiple());
  }
}

void ServerKeepAliveResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.gs2pw.ServerKeepAliveResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerKeepAliveResp::CopyFrom(const ServerKeepAliveResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.gs2pw.ServerKeepAliveResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerKeepAliveResp::IsInitialized() const {
  return true;
}

void ServerKeepAliveResp::Swap(ServerKeepAliveResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerKeepAliveResp::InternalSwap(ServerKeepAliveResp* other) {
  std::swap(pw_time_, other->pw_time_);
  std::swap(pw_id_, other->pw_id_);
  std::swap(multiple_, other->multiple_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerKeepAliveResp::GetMetadata() const {
  protobuf_gs_5f2_5fpw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gs_5f2_5fpw_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerKeepAliveResp

// uint32 pw_id = 1;
void ServerKeepAliveResp::clear_pw_id() {
  pw_id_ = 0u;
}
::google::protobuf::uint32 ServerKeepAliveResp::pw_id() const {
  // @@protoc_insertion_point(field_get:NetProto.gs2pw.ServerKeepAliveResp.pw_id)
  return pw_id_;
}
void ServerKeepAliveResp::set_pw_id(::google::protobuf::uint32 value) {
  
  pw_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.gs2pw.ServerKeepAliveResp.pw_id)
}

// uint64 pw_time = 2;
void ServerKeepAliveResp::clear_pw_time() {
  pw_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ServerKeepAliveResp::pw_time() const {
  // @@protoc_insertion_point(field_get:NetProto.gs2pw.ServerKeepAliveResp.pw_time)
  return pw_time_;
}
void ServerKeepAliveResp::set_pw_time(::google::protobuf::uint64 value) {
  
  pw_time_ = value;
  // @@protoc_insertion_point(field_set:NetProto.gs2pw.ServerKeepAliveResp.pw_time)
}

// uint32 multiple = 3;
void ServerKeepAliveResp::clear_multiple() {
  multiple_ = 0u;
}
::google::protobuf::uint32 ServerKeepAliveResp::multiple() const {
  // @@protoc_insertion_point(field_get:NetProto.gs2pw.ServerKeepAliveResp.multiple)
  return multiple_;
}
void ServerKeepAliveResp::set_multiple(::google::protobuf::uint32 value) {
  
  multiple_ = value;
  // @@protoc_insertion_point(field_set:NetProto.gs2pw.ServerKeepAliveResp.multiple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gs2pw
}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
