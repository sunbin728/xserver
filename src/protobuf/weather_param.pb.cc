// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weather_param.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "weather_param.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
class WeatherParamItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeatherParamItem> {
} _WeatherParamItem_default_instance_;
class WeatherParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeatherParam> {
} _WeatherParam_default_instance_;

namespace protobuf_weather_5fparam_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherParamItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherParamItem, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherParamItem, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherParam, item_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(WeatherParamItem)},
  { 7, -1, sizeof(WeatherParam)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeatherParamItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeatherParam_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "weather_param.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _WeatherParamItem_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _WeatherParam_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _WeatherParamItem_default_instance_.DefaultConstruct();
  _WeatherParam_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023weather_param.proto\022\010NetProto\"\201\001\n\020Weat"
      "herParamItem\0222\n\004type\030\001 \001(\0162$.NetProto.We"
      "atherParamItem.ParamType\022\r\n\005value\030\002 \001(\002\""
      "*\n\tParamType\022\t\n\005CLOUD\020\000\022\010\n\004TEMP\020\001\022\010\n\004WIN"
      "D\020\002\"8\n\014WeatherParam\022(\n\004item\030\001 \003(\0132\032.NetP"
      "roto.WeatherParamItemb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "weather_param.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_weather_5fparam_2eproto

const ::google::protobuf::EnumDescriptor* WeatherParamItem_ParamType_descriptor() {
  protobuf_weather_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fparam_2eproto::file_level_enum_descriptors[0];
}
bool WeatherParamItem_ParamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WeatherParamItem_ParamType WeatherParamItem::CLOUD;
const WeatherParamItem_ParamType WeatherParamItem::TEMP;
const WeatherParamItem_ParamType WeatherParamItem::WIND;
const WeatherParamItem_ParamType WeatherParamItem::ParamType_MIN;
const WeatherParamItem_ParamType WeatherParamItem::ParamType_MAX;
const int WeatherParamItem::ParamType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeatherParamItem::kTypeFieldNumber;
const int WeatherParamItem::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeatherParamItem::WeatherParamItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_weather_5fparam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.WeatherParamItem)
}
WeatherParamItem::WeatherParamItem(const WeatherParamItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:NetProto.WeatherParamItem)
}

void WeatherParamItem::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_) + sizeof(value_));
  _cached_size_ = 0;
}

WeatherParamItem::~WeatherParamItem() {
  // @@protoc_insertion_point(destructor:NetProto.WeatherParamItem)
  SharedDtor();
}

void WeatherParamItem::SharedDtor() {
}

void WeatherParamItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherParamItem::descriptor() {
  protobuf_weather_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeatherParamItem& WeatherParamItem::default_instance() {
  protobuf_weather_5fparam_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeatherParamItem* WeatherParamItem::New(::google::protobuf::Arena* arena) const {
  WeatherParamItem* n = new WeatherParamItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeatherParamItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.WeatherParamItem)
  ::memset(&type_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_) + sizeof(value_));
}

bool WeatherParamItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.WeatherParamItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.WeatherParamItem.ParamType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetProto::WeatherParamItem_ParamType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.WeatherParamItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.WeatherParamItem)
  return false;
#undef DO_
}

void WeatherParamItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.WeatherParamItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.WeatherParamItem.ParamType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.WeatherParamItem)
}

::google::protobuf::uint8* WeatherParamItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.WeatherParamItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.WeatherParamItem.ParamType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.WeatherParamItem)
  return target;
}

size_t WeatherParamItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.WeatherParamItem)
  size_t total_size = 0;

  // .NetProto.WeatherParamItem.ParamType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherParamItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.WeatherParamItem)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherParamItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeatherParamItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.WeatherParamItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.WeatherParamItem)
    MergeFrom(*source);
  }
}

void WeatherParamItem::MergeFrom(const WeatherParamItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.WeatherParamItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void WeatherParamItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.WeatherParamItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherParamItem::CopyFrom(const WeatherParamItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.WeatherParamItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherParamItem::IsInitialized() const {
  return true;
}

void WeatherParamItem::Swap(WeatherParamItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeatherParamItem::InternalSwap(WeatherParamItem* other) {
  std::swap(type_, other->type_);
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeatherParamItem::GetMetadata() const {
  protobuf_weather_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fparam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeatherParamItem

// .NetProto.WeatherParamItem.ParamType type = 1;
void WeatherParamItem::clear_type() {
  type_ = 0;
}
::NetProto::WeatherParamItem_ParamType WeatherParamItem::type() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherParamItem.type)
  return static_cast< ::NetProto::WeatherParamItem_ParamType >(type_);
}
void WeatherParamItem::set_type(::NetProto::WeatherParamItem_ParamType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherParamItem.type)
}

// float value = 2;
void WeatherParamItem::clear_value() {
  value_ = 0;
}
float WeatherParamItem::value() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherParamItem.value)
  return value_;
}
void WeatherParamItem::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherParamItem.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeatherParam::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeatherParam::WeatherParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_weather_5fparam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.WeatherParam)
}
WeatherParam::WeatherParam(const WeatherParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetProto.WeatherParam)
}

void WeatherParam::SharedCtor() {
  _cached_size_ = 0;
}

WeatherParam::~WeatherParam() {
  // @@protoc_insertion_point(destructor:NetProto.WeatherParam)
  SharedDtor();
}

void WeatherParam::SharedDtor() {
}

void WeatherParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherParam::descriptor() {
  protobuf_weather_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeatherParam& WeatherParam::default_instance() {
  protobuf_weather_5fparam_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeatherParam* WeatherParam::New(::google::protobuf::Arena* arena) const {
  WeatherParam* n = new WeatherParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeatherParam::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.WeatherParam)
  item_.Clear();
}

bool WeatherParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.WeatherParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetProto.WeatherParamItem item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.WeatherParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.WeatherParam)
  return false;
#undef DO_
}

void WeatherParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.WeatherParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NetProto.WeatherParamItem item = 1;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.WeatherParam)
}

::google::protobuf::uint8* WeatherParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.WeatherParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NetProto.WeatherParamItem item = 1;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->item(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.WeatherParam)
  return target;
}

size_t WeatherParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.WeatherParam)
  size_t total_size = 0;

  // repeated .NetProto.WeatherParamItem item = 1;
  {
    unsigned int count = this->item_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.WeatherParam)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeatherParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.WeatherParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.WeatherParam)
    MergeFrom(*source);
  }
}

void WeatherParam::MergeFrom(const WeatherParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.WeatherParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void WeatherParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.WeatherParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherParam::CopyFrom(const WeatherParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.WeatherParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherParam::IsInitialized() const {
  return true;
}

void WeatherParam::Swap(WeatherParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeatherParam::InternalSwap(WeatherParam* other) {
  item_.InternalSwap(&other->item_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeatherParam::GetMetadata() const {
  protobuf_weather_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fparam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeatherParam

// repeated .NetProto.WeatherParamItem item = 1;
int WeatherParam::item_size() const {
  return item_.size();
}
void WeatherParam::clear_item() {
  item_.Clear();
}
const ::NetProto::WeatherParamItem& WeatherParam::item(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherParam.item)
  return item_.Get(index);
}
::NetProto::WeatherParamItem* WeatherParam::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherParam.item)
  return item_.Mutable(index);
}
::NetProto::WeatherParamItem* WeatherParam::add_item() {
  // @@protoc_insertion_point(field_add:NetProto.WeatherParam.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::WeatherParamItem >*
WeatherParam::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.WeatherParam.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::WeatherParamItem >&
WeatherParam::item() const {
  // @@protoc_insertion_point(field_list:NetProto.WeatherParam.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
