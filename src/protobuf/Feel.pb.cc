// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Feel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Feel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
class Feels_FeelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Feels_Feel> {
} _Feels_Feel_default_instance_;
class FeelsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Feels> {
} _Feels_default_instance_;

namespace protobuf_Feel_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feels_Feel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feels_Feel, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feels_Feel, feel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feels, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feels, feel_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Feels_Feel)},
  { 7, -1, sizeof(Feels)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Feels_Feel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Feels_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Feel.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _Feels_Feel_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Feels_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::NetProto::protobuf_msg_5fhead_2eproto::InitDefaults();
  _Feels_Feel_default_instance_.DefaultConstruct();
  _Feels_default_instance_.DefaultConstruct();
  _Feels_default_instance_.get_mutable()->head_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nFeel.proto\022\010NetProto\032\016msg_head.proto\"\355"
      "\001\n\005Feels\022\037\n\004head\030\001 \001(\0132\021.NetProto.MsgHea"
      "d\022\"\n\004feel\030\002 \003(\0132\024.NetProto.Feels.Feel\032>\n"
      "\004Feel\022(\n\004type\030\001 \001(\0162\032.NetProto.Feels.DIM"
      "EN_TYPE\022\014\n\004feel\030\002 \001(\t\"_\n\nDIMEN_TYPE\022\n\n\006V"
      "ISUAL\020\000\022\013\n\007TACTILE\020\001\022\t\n\005TASTE\020\002\022\t\n\005SMELL"
      "\020\003\022\014\n\010FEELINGS\020\004\022\013\n\007HEARING\020\005\022\007\n\003POS\020\006b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Feel.proto", &protobuf_RegisterTypes);
  ::NetProto::protobuf_msg_5fhead_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Feel_2eproto

const ::google::protobuf::EnumDescriptor* Feels_DIMEN_TYPE_descriptor() {
  protobuf_Feel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Feel_2eproto::file_level_enum_descriptors[0];
}
bool Feels_DIMEN_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Feels_DIMEN_TYPE Feels::VISUAL;
const Feels_DIMEN_TYPE Feels::TACTILE;
const Feels_DIMEN_TYPE Feels::TASTE;
const Feels_DIMEN_TYPE Feels::SMELL;
const Feels_DIMEN_TYPE Feels::FEELINGS;
const Feels_DIMEN_TYPE Feels::HEARING;
const Feels_DIMEN_TYPE Feels::POS;
const Feels_DIMEN_TYPE Feels::DIMEN_TYPE_MIN;
const Feels_DIMEN_TYPE Feels::DIMEN_TYPE_MAX;
const int Feels::DIMEN_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feels_Feel::kTypeFieldNumber;
const int Feels_Feel::kFeelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feels_Feel::Feels_Feel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Feel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Feels.Feel)
}
Feels_Feel::Feels_Feel(const Feels_Feel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.feel().size() > 0) {
    feel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feel_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:NetProto.Feels.Feel)
}

void Feels_Feel::SharedCtor() {
  feel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

Feels_Feel::~Feels_Feel() {
  // @@protoc_insertion_point(destructor:NetProto.Feels.Feel)
  SharedDtor();
}

void Feels_Feel::SharedDtor() {
  feel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Feels_Feel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feels_Feel::descriptor() {
  protobuf_Feel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Feel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Feels_Feel& Feels_Feel::default_instance() {
  protobuf_Feel_2eproto::InitDefaults();
  return *internal_default_instance();
}

Feels_Feel* Feels_Feel::New(::google::protobuf::Arena* arena) const {
  Feels_Feel* n = new Feels_Feel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feels_Feel::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Feels.Feel)
  feel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool Feels_Feel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Feels.Feel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.Feels.DIMEN_TYPE type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetProto::Feels_DIMEN_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string feel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feel().data(), this->feel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.Feels.Feel.feel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Feels.Feel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Feels.Feel)
  return false;
#undef DO_
}

void Feels_Feel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Feels.Feel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.Feels.DIMEN_TYPE type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string feel = 2;
  if (this->feel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feel().data(), this->feel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Feels.Feel.feel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->feel(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Feels.Feel)
}

::google::protobuf::uint8* Feels_Feel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Feels.Feel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.Feels.DIMEN_TYPE type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string feel = 2;
  if (this->feel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feel().data(), this->feel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.Feels.Feel.feel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->feel(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Feels.Feel)
  return target;
}

size_t Feels_Feel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Feels.Feel)
  size_t total_size = 0;

  // string feel = 2;
  if (this->feel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feel());
  }

  // .NetProto.Feels.DIMEN_TYPE type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feels_Feel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Feels.Feel)
  GOOGLE_DCHECK_NE(&from, this);
  const Feels_Feel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Feels_Feel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Feels.Feel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Feels.Feel)
    MergeFrom(*source);
  }
}

void Feels_Feel::MergeFrom(const Feels_Feel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Feels.Feel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.feel().size() > 0) {

    feel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feel_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Feels_Feel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Feels.Feel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feels_Feel::CopyFrom(const Feels_Feel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Feels.Feel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feels_Feel::IsInitialized() const {
  return true;
}

void Feels_Feel::Swap(Feels_Feel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feels_Feel::InternalSwap(Feels_Feel* other) {
  feel_.Swap(&other->feel_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Feels_Feel::GetMetadata() const {
  protobuf_Feel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Feel_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feels_Feel

// .NetProto.Feels.DIMEN_TYPE type = 1;
void Feels_Feel::clear_type() {
  type_ = 0;
}
::NetProto::Feels_DIMEN_TYPE Feels_Feel::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Feels.Feel.type)
  return static_cast< ::NetProto::Feels_DIMEN_TYPE >(type_);
}
void Feels_Feel::set_type(::NetProto::Feels_DIMEN_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Feels.Feel.type)
}

// string feel = 2;
void Feels_Feel::clear_feel() {
  feel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Feels_Feel::feel() const {
  // @@protoc_insertion_point(field_get:NetProto.Feels.Feel.feel)
  return feel_.GetNoArena();
}
void Feels_Feel::set_feel(const ::std::string& value) {
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Feels.Feel.feel)
}
#if LANG_CXX11
void Feels_Feel::set_feel(::std::string&& value) {
  
  feel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Feels.Feel.feel)
}
#endif
void Feels_Feel::set_feel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Feels.Feel.feel)
}
void Feels_Feel::set_feel(const char* value, size_t size) {
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Feels.Feel.feel)
}
::std::string* Feels_Feel::mutable_feel() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Feels.Feel.feel)
  return feel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Feels_Feel::release_feel() {
  // @@protoc_insertion_point(field_release:NetProto.Feels.Feel.feel)
  
  return feel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Feels_Feel::set_allocated_feel(::std::string* feel) {
  if (feel != NULL) {
    
  } else {
    
  }
  feel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feel);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Feels.Feel.feel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feels::kHeadFieldNumber;
const int Feels::kFeelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feels::Feels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Feel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.Feels)
}
Feels::Feels(const Feels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      feel_(from.feel_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::NetProto::MsgHead(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NetProto.Feels)
}

void Feels::SharedCtor() {
  head_ = NULL;
  _cached_size_ = 0;
}

Feels::~Feels() {
  // @@protoc_insertion_point(destructor:NetProto.Feels)
  SharedDtor();
}

void Feels::SharedDtor() {
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void Feels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feels::descriptor() {
  protobuf_Feel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Feel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Feels& Feels::default_instance() {
  protobuf_Feel_2eproto::InitDefaults();
  return *internal_default_instance();
}

Feels* Feels::New(::google::protobuf::Arena* arena) const {
  Feels* n = new Feels;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feels::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.Feels)
  feel_.Clear();
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}

bool Feels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.Feels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.Feels.Feel feel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_feel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.Feels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.Feels)
  return false;
#undef DO_
}

void Feels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.Feels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // repeated .NetProto.Feels.Feel feel = 2;
  for (unsigned int i = 0, n = this->feel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->feel(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.Feels)
}

::google::protobuf::uint8* Feels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.Feels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // repeated .NetProto.Feels.Feel feel = 2;
  for (unsigned int i = 0, n = this->feel_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->feel(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.Feels)
  return target;
}

size_t Feels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.Feels)
  size_t total_size = 0;

  // repeated .NetProto.Feels.Feel feel = 2;
  {
    unsigned int count = this->feel_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feel(i));
    }
  }

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.Feels)
  GOOGLE_DCHECK_NE(&from, this);
  const Feels* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Feels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.Feels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.Feels)
    MergeFrom(*source);
  }
}

void Feels::MergeFrom(const Feels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.Feels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feel_.MergeFrom(from.feel_);
  if (from.has_head()) {
    mutable_head()->::NetProto::MsgHead::MergeFrom(from.head());
  }
}

void Feels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.Feels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feels::CopyFrom(const Feels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.Feels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feels::IsInitialized() const {
  return true;
}

void Feels::Swap(Feels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feels::InternalSwap(Feels* other) {
  feel_.InternalSwap(&other->feel_);
  std::swap(head_, other->head_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Feels::GetMetadata() const {
  protobuf_Feel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Feel_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feels

// .NetProto.MsgHead head = 1;
bool Feels::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void Feels::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::NetProto::MsgHead& Feels::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Feels.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* Feels::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Feels.head)
  return head_;
}
::NetProto::MsgHead* Feels::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Feels.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
void Feels::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Feels.head)
}

// repeated .NetProto.Feels.Feel feel = 2;
int Feels::feel_size() const {
  return feel_.size();
}
void Feels::clear_feel() {
  feel_.Clear();
}
const ::NetProto::Feels_Feel& Feels::feel(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.Feels.feel)
  return feel_.Get(index);
}
::NetProto::Feels_Feel* Feels::mutable_feel(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.Feels.feel)
  return feel_.Mutable(index);
}
::NetProto::Feels_Feel* Feels::add_feel() {
  // @@protoc_insertion_point(field_add:NetProto.Feels.feel)
  return feel_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::Feels_Feel >*
Feels::mutable_feel() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.Feels.feel)
  return &feel_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::Feels_Feel >&
Feels::feel() const {
  // @@protoc_insertion_point(field_list:NetProto.Feels.feel)
  return feel_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
