// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plant.proto

#ifndef PROTOBUF_plant_2eproto__INCLUDED
#define PROTOBUF_plant_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "msg_head.pb.h"
#include "weather_raw_data.pb.h"
// @@protoc_insertion_point(includes)
namespace NetProto {
class MsgHead;
class MsgHeadDefaultTypeInternal;
extern MsgHeadDefaultTypeInternal _MsgHead_default_instance_;
class Plant_Create;
class Plant_CreateDefaultTypeInternal;
extern Plant_CreateDefaultTypeInternal _Plant_Create_default_instance_;
class Plant_Delete_Req;
class Plant_Delete_ReqDefaultTypeInternal;
extern Plant_Delete_ReqDefaultTypeInternal _Plant_Delete_Req_default_instance_;
class Plant_Delete_Resp;
class Plant_Delete_RespDefaultTypeInternal;
extern Plant_Delete_RespDefaultTypeInternal _Plant_Delete_Resp_default_instance_;
class Plant_Info;
class Plant_InfoDefaultTypeInternal;
extern Plant_InfoDefaultTypeInternal _Plant_Info_default_instance_;
class Plant_PickFruit_Req;
class Plant_PickFruit_ReqDefaultTypeInternal;
extern Plant_PickFruit_ReqDefaultTypeInternal _Plant_PickFruit_Req_default_instance_;
class Plant_PickFruit_Resp;
class Plant_PickFruit_RespDefaultTypeInternal;
extern Plant_PickFruit_RespDefaultTypeInternal _Plant_PickFruit_Resp_default_instance_;
class Plant_State;
class Plant_StateDefaultTypeInternal;
extern Plant_StateDefaultTypeInternal _Plant_State_default_instance_;
class Plant_Water;
class Plant_WaterDefaultTypeInternal;
extern Plant_WaterDefaultTypeInternal _Plant_Water_default_instance_;
class Plant_Weather;
class Plant_WeatherDefaultTypeInternal;
extern Plant_WeatherDefaultTypeInternal _Plant_Weather_default_instance_;
class WeatherRawData;
class WeatherRawDataDefaultTypeInternal;
extern WeatherRawDataDefaultTypeInternal _WeatherRawData_default_instance_;
}  // namespace NetProto

namespace NetProto {

namespace protobuf_plant_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_plant_2eproto

// ===================================================================

class Plant_Create : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Plant_Create) */ {
 public:
  Plant_Create();
  virtual ~Plant_Create();

  Plant_Create(const Plant_Create& from);

  inline Plant_Create& operator=(const Plant_Create& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plant_Create& default_instance();

  static inline const Plant_Create* internal_default_instance() {
    return reinterpret_cast<const Plant_Create*>(
               &_Plant_Create_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Plant_Create* other);

  // implements Message ----------------------------------------------

  inline Plant_Create* New() const PROTOBUF_FINAL { return New(NULL); }

  Plant_Create* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Plant_Create& from);
  void MergeFrom(const Plant_Create& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Plant_Create* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plant_type = 2;
  void clear_plant_type();
  static const int kPlantTypeFieldNumber = 2;
  const ::std::string& plant_type() const;
  void set_plant_type(const ::std::string& value);
  #if LANG_CXX11
  void set_plant_type(::std::string&& value);
  #endif
  void set_plant_type(const char* value);
  void set_plant_type(const char* value, size_t size);
  ::std::string* mutable_plant_type();
  ::std::string* release_plant_type();
  void set_allocated_plant_type(::std::string* plant_type);

  // string plant_id = 3;
  void clear_plant_id();
  static const int kPlantIdFieldNumber = 3;
  const ::std::string& plant_id() const;
  void set_plant_id(const ::std::string& value);
  #if LANG_CXX11
  void set_plant_id(::std::string&& value);
  #endif
  void set_plant_id(const char* value);
  void set_plant_id(const char* value, size_t size);
  ::std::string* mutable_plant_id();
  ::std::string* release_plant_id();
  void set_allocated_plant_id(::std::string* plant_id);

  // string fruit_type = 5;
  void clear_fruit_type();
  static const int kFruitTypeFieldNumber = 5;
  const ::std::string& fruit_type() const;
  void set_fruit_type(const ::std::string& value);
  #if LANG_CXX11
  void set_fruit_type(::std::string&& value);
  #endif
  void set_fruit_type(const char* value);
  void set_fruit_type(const char* value, size_t size);
  ::std::string* mutable_fruit_type();
  ::std::string* release_fruit_type();
  void set_allocated_fruit_type(::std::string* fruit_type);

  // string energe_type = 6;
  void clear_energe_type();
  static const int kEnergeTypeFieldNumber = 6;
  const ::std::string& energe_type() const;
  void set_energe_type(const ::std::string& value);
  #if LANG_CXX11
  void set_energe_type(::std::string&& value);
  #endif
  void set_energe_type(const char* value);
  void set_energe_type(const char* value, size_t size);
  ::std::string* mutable_energe_type();
  ::std::string* release_energe_type();
  void set_allocated_energe_type(::std::string* energe_type);

  // string live_type = 7;
  void clear_live_type();
  static const int kLiveTypeFieldNumber = 7;
  const ::std::string& live_type() const;
  void set_live_type(const ::std::string& value);
  #if LANG_CXX11
  void set_live_type(::std::string&& value);
  #endif
  void set_live_type(const char* value);
  void set_live_type(const char* value, size_t size);
  ::std::string* mutable_live_type();
  ::std::string* release_live_type();
  void set_allocated_live_type(::std::string* live_type);

  // string life_type = 8;
  void clear_life_type();
  static const int kLifeTypeFieldNumber = 8;
  const ::std::string& life_type() const;
  void set_life_type(const ::std::string& value);
  #if LANG_CXX11
  void set_life_type(::std::string&& value);
  #endif
  void set_life_type(const char* value);
  void set_life_type(const char* value, size_t size);
  ::std::string* mutable_life_type();
  ::std::string* release_life_type();
  void set_allocated_life_type(::std::string* life_type);

  // string reproduct_type = 9;
  void clear_reproduct_type();
  static const int kReproductTypeFieldNumber = 9;
  const ::std::string& reproduct_type() const;
  void set_reproduct_type(const ::std::string& value);
  #if LANG_CXX11
  void set_reproduct_type(::std::string&& value);
  #endif
  void set_reproduct_type(const char* value);
  void set_reproduct_type(const char* value, size_t size);
  ::std::string* mutable_reproduct_type();
  ::std::string* release_reproduct_type();
  void set_allocated_reproduct_type(::std::string* reproduct_type);

  // string denger_type = 10;
  void clear_denger_type();
  static const int kDengerTypeFieldNumber = 10;
  const ::std::string& denger_type() const;
  void set_denger_type(const ::std::string& value);
  #if LANG_CXX11
  void set_denger_type(::std::string&& value);
  #endif
  void set_denger_type(const char* value);
  void set_denger_type(const char* value, size_t size);
  ::std::string* mutable_denger_type();
  ::std::string* release_denger_type();
  void set_allocated_denger_type(::std::string* denger_type);

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // uint32 space_id = 4;
  void clear_space_id();
  static const int kSpaceIdFieldNumber = 4;
  ::google::protobuf::uint32 space_id() const;
  void set_space_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NetProto.Plant_Create)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plant_type_;
  ::google::protobuf::internal::ArenaStringPtr plant_id_;
  ::google::protobuf::internal::ArenaStringPtr fruit_type_;
  ::google::protobuf::internal::ArenaStringPtr energe_type_;
  ::google::protobuf::internal::ArenaStringPtr live_type_;
  ::google::protobuf::internal::ArenaStringPtr life_type_;
  ::google::protobuf::internal::ArenaStringPtr reproduct_type_;
  ::google::protobuf::internal::ArenaStringPtr denger_type_;
  ::NetProto::MsgHead* head_;
  ::google::protobuf::uint32 space_id_;
  mutable int _cached_size_;
  friend struct protobuf_plant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Plant_Water : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Plant_Water) */ {
 public:
  Plant_Water();
  virtual ~Plant_Water();

  Plant_Water(const Plant_Water& from);

  inline Plant_Water& operator=(const Plant_Water& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plant_Water& default_instance();

  static inline const Plant_Water* internal_default_instance() {
    return reinterpret_cast<const Plant_Water*>(
               &_Plant_Water_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Plant_Water* other);

  // implements Message ----------------------------------------------

  inline Plant_Water* New() const PROTOBUF_FINAL { return New(NULL); }

  Plant_Water* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Plant_Water& from);
  void MergeFrom(const Plant_Water& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Plant_Water* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plant_id = 2;
  void clear_plant_id();
  static const int kPlantIdFieldNumber = 2;
  const ::std::string& plant_id() const;
  void set_plant_id(const ::std::string& value);
  #if LANG_CXX11
  void set_plant_id(::std::string&& value);
  #endif
  void set_plant_id(const char* value);
  void set_plant_id(const char* value, size_t size);
  ::std::string* mutable_plant_id();
  ::std::string* release_plant_id();
  void set_allocated_plant_id(::std::string* plant_id);

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // uint32 space_id = 3;
  void clear_space_id();
  static const int kSpaceIdFieldNumber = 3;
  ::google::protobuf::uint32 space_id() const;
  void set_space_id(::google::protobuf::uint32 value);

  // float value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:NetProto.Plant_Water)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plant_id_;
  ::NetProto::MsgHead* head_;
  ::google::protobuf::uint32 space_id_;
  float value_;
  mutable int _cached_size_;
  friend struct protobuf_plant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Plant_Weather : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Plant_Weather) */ {
 public:
  Plant_Weather();
  virtual ~Plant_Weather();

  Plant_Weather(const Plant_Weather& from);

  inline Plant_Weather& operator=(const Plant_Weather& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plant_Weather& default_instance();

  static inline const Plant_Weather* internal_default_instance() {
    return reinterpret_cast<const Plant_Weather*>(
               &_Plant_Weather_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Plant_Weather* other);

  // implements Message ----------------------------------------------

  inline Plant_Weather* New() const PROTOBUF_FINAL { return New(NULL); }

  Plant_Weather* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Plant_Weather& from);
  void MergeFrom(const Plant_Weather& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Plant_Weather* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // .NetProto.WeatherRawData weather = 3;
  bool has_weather() const;
  void clear_weather();
  static const int kWeatherFieldNumber = 3;
  const ::NetProto::WeatherRawData& weather() const;
  ::NetProto::WeatherRawData* mutable_weather();
  ::NetProto::WeatherRawData* release_weather();
  void set_allocated_weather(::NetProto::WeatherRawData* weather);

  // uint32 space_id = 2;
  void clear_space_id();
  static const int kSpaceIdFieldNumber = 2;
  ::google::protobuf::uint32 space_id() const;
  void set_space_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NetProto.Plant_Weather)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NetProto::MsgHead* head_;
  ::NetProto::WeatherRawData* weather_;
  ::google::protobuf::uint32 space_id_;
  mutable int _cached_size_;
  friend struct protobuf_plant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Plant_PickFruit_Req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Plant_PickFruit_Req) */ {
 public:
  Plant_PickFruit_Req();
  virtual ~Plant_PickFruit_Req();

  Plant_PickFruit_Req(const Plant_PickFruit_Req& from);

  inline Plant_PickFruit_Req& operator=(const Plant_PickFruit_Req& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plant_PickFruit_Req& default_instance();

  static inline const Plant_PickFruit_Req* internal_default_instance() {
    return reinterpret_cast<const Plant_PickFruit_Req*>(
               &_Plant_PickFruit_Req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Plant_PickFruit_Req* other);

  // implements Message ----------------------------------------------

  inline Plant_PickFruit_Req* New() const PROTOBUF_FINAL { return New(NULL); }

  Plant_PickFruit_Req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Plant_PickFruit_Req& from);
  void MergeFrom(const Plant_PickFruit_Req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Plant_PickFruit_Req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plant_id = 2;
  void clear_plant_id();
  static const int kPlantIdFieldNumber = 2;
  const ::std::string& plant_id() const;
  void set_plant_id(const ::std::string& value);
  #if LANG_CXX11
  void set_plant_id(::std::string&& value);
  #endif
  void set_plant_id(const char* value);
  void set_plant_id(const char* value, size_t size);
  ::std::string* mutable_plant_id();
  ::std::string* release_plant_id();
  void set_allocated_plant_id(::std::string* plant_id);

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // uint32 space_id = 3;
  void clear_space_id();
  static const int kSpaceIdFieldNumber = 3;
  ::google::protobuf::uint32 space_id() const;
  void set_space_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NetProto.Plant_PickFruit_Req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plant_id_;
  ::NetProto::MsgHead* head_;
  ::google::protobuf::uint32 space_id_;
  mutable int _cached_size_;
  friend struct protobuf_plant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Plant_PickFruit_Resp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Plant_PickFruit_Resp) */ {
 public:
  Plant_PickFruit_Resp();
  virtual ~Plant_PickFruit_Resp();

  Plant_PickFruit_Resp(const Plant_PickFruit_Resp& from);

  inline Plant_PickFruit_Resp& operator=(const Plant_PickFruit_Resp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plant_PickFruit_Resp& default_instance();

  static inline const Plant_PickFruit_Resp* internal_default_instance() {
    return reinterpret_cast<const Plant_PickFruit_Resp*>(
               &_Plant_PickFruit_Resp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Plant_PickFruit_Resp* other);

  // implements Message ----------------------------------------------

  inline Plant_PickFruit_Resp* New() const PROTOBUF_FINAL { return New(NULL); }

  Plant_PickFruit_Resp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Plant_PickFruit_Resp& from);
  void MergeFrom(const Plant_PickFruit_Resp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Plant_PickFruit_Resp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plant_id = 2;
  void clear_plant_id();
  static const int kPlantIdFieldNumber = 2;
  const ::std::string& plant_id() const;
  void set_plant_id(const ::std::string& value);
  #if LANG_CXX11
  void set_plant_id(::std::string&& value);
  #endif
  void set_plant_id(const char* value);
  void set_plant_id(const char* value, size_t size);
  ::std::string* mutable_plant_id();
  ::std::string* release_plant_id();
  void set_allocated_plant_id(::std::string* plant_id);

  // string fruit = 4;
  void clear_fruit();
  static const int kFruitFieldNumber = 4;
  const ::std::string& fruit() const;
  void set_fruit(const ::std::string& value);
  #if LANG_CXX11
  void set_fruit(::std::string&& value);
  #endif
  void set_fruit(const char* value);
  void set_fruit(const char* value, size_t size);
  ::std::string* mutable_fruit();
  ::std::string* release_fruit();
  void set_allocated_fruit(::std::string* fruit);

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // uint32 space_id = 3;
  void clear_space_id();
  static const int kSpaceIdFieldNumber = 3;
  ::google::protobuf::uint32 space_id() const;
  void set_space_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NetProto.Plant_PickFruit_Resp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plant_id_;
  ::google::protobuf::internal::ArenaStringPtr fruit_;
  ::NetProto::MsgHead* head_;
  ::google::protobuf::uint32 space_id_;
  mutable int _cached_size_;
  friend struct protobuf_plant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Plant_Delete_Req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Plant_Delete_Req) */ {
 public:
  Plant_Delete_Req();
  virtual ~Plant_Delete_Req();

  Plant_Delete_Req(const Plant_Delete_Req& from);

  inline Plant_Delete_Req& operator=(const Plant_Delete_Req& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plant_Delete_Req& default_instance();

  static inline const Plant_Delete_Req* internal_default_instance() {
    return reinterpret_cast<const Plant_Delete_Req*>(
               &_Plant_Delete_Req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Plant_Delete_Req* other);

  // implements Message ----------------------------------------------

  inline Plant_Delete_Req* New() const PROTOBUF_FINAL { return New(NULL); }

  Plant_Delete_Req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Plant_Delete_Req& from);
  void MergeFrom(const Plant_Delete_Req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Plant_Delete_Req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plant_id = 2;
  void clear_plant_id();
  static const int kPlantIdFieldNumber = 2;
  const ::std::string& plant_id() const;
  void set_plant_id(const ::std::string& value);
  #if LANG_CXX11
  void set_plant_id(::std::string&& value);
  #endif
  void set_plant_id(const char* value);
  void set_plant_id(const char* value, size_t size);
  ::std::string* mutable_plant_id();
  ::std::string* release_plant_id();
  void set_allocated_plant_id(::std::string* plant_id);

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // uint32 space_id = 3;
  void clear_space_id();
  static const int kSpaceIdFieldNumber = 3;
  ::google::protobuf::uint32 space_id() const;
  void set_space_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NetProto.Plant_Delete_Req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plant_id_;
  ::NetProto::MsgHead* head_;
  ::google::protobuf::uint32 space_id_;
  mutable int _cached_size_;
  friend struct protobuf_plant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Plant_Delete_Resp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Plant_Delete_Resp) */ {
 public:
  Plant_Delete_Resp();
  virtual ~Plant_Delete_Resp();

  Plant_Delete_Resp(const Plant_Delete_Resp& from);

  inline Plant_Delete_Resp& operator=(const Plant_Delete_Resp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plant_Delete_Resp& default_instance();

  static inline const Plant_Delete_Resp* internal_default_instance() {
    return reinterpret_cast<const Plant_Delete_Resp*>(
               &_Plant_Delete_Resp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Plant_Delete_Resp* other);

  // implements Message ----------------------------------------------

  inline Plant_Delete_Resp* New() const PROTOBUF_FINAL { return New(NULL); }

  Plant_Delete_Resp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Plant_Delete_Resp& from);
  void MergeFrom(const Plant_Delete_Resp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Plant_Delete_Resp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plant_id = 2;
  void clear_plant_id();
  static const int kPlantIdFieldNumber = 2;
  const ::std::string& plant_id() const;
  void set_plant_id(const ::std::string& value);
  #if LANG_CXX11
  void set_plant_id(::std::string&& value);
  #endif
  void set_plant_id(const char* value);
  void set_plant_id(const char* value, size_t size);
  ::std::string* mutable_plant_id();
  ::std::string* release_plant_id();
  void set_allocated_plant_id(::std::string* plant_id);

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // uint32 space_id = 3;
  void clear_space_id();
  static const int kSpaceIdFieldNumber = 3;
  ::google::protobuf::uint32 space_id() const;
  void set_space_id(::google::protobuf::uint32 value);

  // bool result = 4;
  void clear_result();
  static const int kResultFieldNumber = 4;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:NetProto.Plant_Delete_Resp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plant_id_;
  ::NetProto::MsgHead* head_;
  ::google::protobuf::uint32 space_id_;
  bool result_;
  mutable int _cached_size_;
  friend struct protobuf_plant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Plant_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Plant_State) */ {
 public:
  Plant_State();
  virtual ~Plant_State();

  Plant_State(const Plant_State& from);

  inline Plant_State& operator=(const Plant_State& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plant_State& default_instance();

  static inline const Plant_State* internal_default_instance() {
    return reinterpret_cast<const Plant_State*>(
               &_Plant_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Plant_State* other);

  // implements Message ----------------------------------------------

  inline Plant_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Plant_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Plant_State& from);
  void MergeFrom(const Plant_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Plant_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plant_type = 1;
  void clear_plant_type();
  static const int kPlantTypeFieldNumber = 1;
  const ::std::string& plant_type() const;
  void set_plant_type(const ::std::string& value);
  #if LANG_CXX11
  void set_plant_type(::std::string&& value);
  #endif
  void set_plant_type(const char* value);
  void set_plant_type(const char* value, size_t size);
  ::std::string* mutable_plant_type();
  ::std::string* release_plant_type();
  void set_allocated_plant_type(::std::string* plant_type);

  // string plant_id = 2;
  void clear_plant_id();
  static const int kPlantIdFieldNumber = 2;
  const ::std::string& plant_id() const;
  void set_plant_id(const ::std::string& value);
  #if LANG_CXX11
  void set_plant_id(::std::string&& value);
  #endif
  void set_plant_id(const char* value);
  void set_plant_id(const char* value, size_t size);
  ::std::string* mutable_plant_id();
  ::std::string* release_plant_id();
  void set_allocated_plant_id(::std::string* plant_id);

  // string fruit_type = 4;
  void clear_fruit_type();
  static const int kFruitTypeFieldNumber = 4;
  const ::std::string& fruit_type() const;
  void set_fruit_type(const ::std::string& value);
  #if LANG_CXX11
  void set_fruit_type(::std::string&& value);
  #endif
  void set_fruit_type(const char* value);
  void set_fruit_type(const char* value, size_t size);
  ::std::string* mutable_fruit_type();
  ::std::string* release_fruit_type();
  void set_allocated_fruit_type(::std::string* fruit_type);

  // string live_state = 5;
  void clear_live_state();
  static const int kLiveStateFieldNumber = 5;
  const ::std::string& live_state() const;
  void set_live_state(const ::std::string& value);
  #if LANG_CXX11
  void set_live_state(::std::string&& value);
  #endif
  void set_live_state(const char* value);
  void set_live_state(const char* value, size_t size);
  ::std::string* mutable_live_state();
  ::std::string* release_live_state();
  void set_allocated_live_state(::std::string* live_state);

  // string life_stage = 6;
  void clear_life_stage();
  static const int kLifeStageFieldNumber = 6;
  const ::std::string& life_stage() const;
  void set_life_stage(const ::std::string& value);
  #if LANG_CXX11
  void set_life_stage(::std::string&& value);
  #endif
  void set_life_stage(const char* value);
  void set_life_stage(const char* value, size_t size);
  ::std::string* mutable_life_stage();
  ::std::string* release_life_stage();
  void set_allocated_life_stage(::std::string* life_stage);

  // string reproduct_state = 7;
  void clear_reproduct_state();
  static const int kReproductStateFieldNumber = 7;
  const ::std::string& reproduct_state() const;
  void set_reproduct_state(const ::std::string& value);
  #if LANG_CXX11
  void set_reproduct_state(::std::string&& value);
  #endif
  void set_reproduct_state(const char* value);
  void set_reproduct_state(const char* value, size_t size);
  ::std::string* mutable_reproduct_state();
  ::std::string* release_reproduct_state();
  void set_allocated_reproduct_state(::std::string* reproduct_state);

  // uint32 space_id = 3;
  void clear_space_id();
  static const int kSpaceIdFieldNumber = 3;
  ::google::protobuf::uint32 space_id() const;
  void set_space_id(::google::protobuf::uint32 value);

  // float leaf_level = 8;
  void clear_leaf_level();
  static const int kLeafLevelFieldNumber = 8;
  float leaf_level() const;
  void set_leaf_level(float value);

  // float live_level = 9;
  void clear_live_level();
  static const int kLiveLevelFieldNumber = 9;
  float live_level() const;
  void set_live_level(float value);

  // bool is_adult = 10;
  void clear_is_adult();
  static const int kIsAdultFieldNumber = 10;
  bool is_adult() const;
  void set_is_adult(bool value);

  // bool is_fruit = 11;
  void clear_is_fruit();
  static const int kIsFruitFieldNumber = 11;
  bool is_fruit() const;
  void set_is_fruit(bool value);

  // @@protoc_insertion_point(class_scope:NetProto.Plant_State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plant_type_;
  ::google::protobuf::internal::ArenaStringPtr plant_id_;
  ::google::protobuf::internal::ArenaStringPtr fruit_type_;
  ::google::protobuf::internal::ArenaStringPtr live_state_;
  ::google::protobuf::internal::ArenaStringPtr life_stage_;
  ::google::protobuf::internal::ArenaStringPtr reproduct_state_;
  ::google::protobuf::uint32 space_id_;
  float leaf_level_;
  float live_level_;
  bool is_adult_;
  bool is_fruit_;
  mutable int _cached_size_;
  friend struct protobuf_plant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Plant_Info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Plant_Info) */ {
 public:
  Plant_Info();
  virtual ~Plant_Info();

  Plant_Info(const Plant_Info& from);

  inline Plant_Info& operator=(const Plant_Info& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plant_Info& default_instance();

  static inline const Plant_Info* internal_default_instance() {
    return reinterpret_cast<const Plant_Info*>(
               &_Plant_Info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Plant_Info* other);

  // implements Message ----------------------------------------------

  inline Plant_Info* New() const PROTOBUF_FINAL { return New(NULL); }

  Plant_Info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Plant_Info& from);
  void MergeFrom(const Plant_Info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Plant_Info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NetProto.Plant_State plant = 2;
  int plant_size() const;
  void clear_plant();
  static const int kPlantFieldNumber = 2;
  const ::NetProto::Plant_State& plant(int index) const;
  ::NetProto::Plant_State* mutable_plant(int index);
  ::NetProto::Plant_State* add_plant();
  ::google::protobuf::RepeatedPtrField< ::NetProto::Plant_State >*
      mutable_plant();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::Plant_State >&
      plant() const;

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // @@protoc_insertion_point(class_scope:NetProto.Plant_Info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::Plant_State > plant_;
  ::NetProto::MsgHead* head_;
  mutable int _cached_size_;
  friend struct protobuf_plant_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Plant_Create

// .NetProto.MsgHead head = 1;
inline bool Plant_Create::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void Plant_Create::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& Plant_Create::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* Plant_Create::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.head)
  return head_;
}
inline ::NetProto::MsgHead* Plant_Create::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Plant_Create::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.head)
}

// string plant_type = 2;
inline void Plant_Create::clear_plant_type() {
  plant_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_Create::plant_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.plant_type)
  return plant_type_.GetNoArena();
}
inline void Plant_Create::set_plant_type(const ::std::string& value) {
  
  plant_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.plant_type)
}
#if LANG_CXX11
inline void Plant_Create::set_plant_type(::std::string&& value) {
  
  plant_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.plant_type)
}
#endif
inline void Plant_Create::set_plant_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.plant_type)
}
inline void Plant_Create::set_plant_type(const char* value, size_t size) {
  
  plant_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.plant_type)
}
inline ::std::string* Plant_Create::mutable_plant_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.plant_type)
  return plant_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_Create::release_plant_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.plant_type)
  
  return plant_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_Create::set_allocated_plant_type(::std::string* plant_type) {
  if (plant_type != NULL) {
    
  } else {
    
  }
  plant_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.plant_type)
}

// string plant_id = 3;
inline void Plant_Create::clear_plant_id() {
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_Create::plant_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.plant_id)
  return plant_id_.GetNoArena();
}
inline void Plant_Create::set_plant_id(const ::std::string& value) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.plant_id)
}
#if LANG_CXX11
inline void Plant_Create::set_plant_id(::std::string&& value) {
  
  plant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.plant_id)
}
#endif
inline void Plant_Create::set_plant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.plant_id)
}
inline void Plant_Create::set_plant_id(const char* value, size_t size) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.plant_id)
}
inline ::std::string* Plant_Create::mutable_plant_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.plant_id)
  return plant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_Create::release_plant_id() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.plant_id)
  
  return plant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_Create::set_allocated_plant_id(::std::string* plant_id) {
  if (plant_id != NULL) {
    
  } else {
    
  }
  plant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.plant_id)
}

// uint32 space_id = 4;
inline void Plant_Create::clear_space_id() {
  space_id_ = 0u;
}
inline ::google::protobuf::uint32 Plant_Create::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.space_id)
  return space_id_;
}
inline void Plant_Create::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.space_id)
}

// string fruit_type = 5;
inline void Plant_Create::clear_fruit_type() {
  fruit_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_Create::fruit_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.fruit_type)
  return fruit_type_.GetNoArena();
}
inline void Plant_Create::set_fruit_type(const ::std::string& value) {
  
  fruit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.fruit_type)
}
#if LANG_CXX11
inline void Plant_Create::set_fruit_type(::std::string&& value) {
  
  fruit_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.fruit_type)
}
#endif
inline void Plant_Create::set_fruit_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fruit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.fruit_type)
}
inline void Plant_Create::set_fruit_type(const char* value, size_t size) {
  
  fruit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.fruit_type)
}
inline ::std::string* Plant_Create::mutable_fruit_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.fruit_type)
  return fruit_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_Create::release_fruit_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.fruit_type)
  
  return fruit_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_Create::set_allocated_fruit_type(::std::string* fruit_type) {
  if (fruit_type != NULL) {
    
  } else {
    
  }
  fruit_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fruit_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.fruit_type)
}

// string energe_type = 6;
inline void Plant_Create::clear_energe_type() {
  energe_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_Create::energe_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.energe_type)
  return energe_type_.GetNoArena();
}
inline void Plant_Create::set_energe_type(const ::std::string& value) {
  
  energe_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.energe_type)
}
#if LANG_CXX11
inline void Plant_Create::set_energe_type(::std::string&& value) {
  
  energe_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.energe_type)
}
#endif
inline void Plant_Create::set_energe_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  energe_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.energe_type)
}
inline void Plant_Create::set_energe_type(const char* value, size_t size) {
  
  energe_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.energe_type)
}
inline ::std::string* Plant_Create::mutable_energe_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.energe_type)
  return energe_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_Create::release_energe_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.energe_type)
  
  return energe_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_Create::set_allocated_energe_type(::std::string* energe_type) {
  if (energe_type != NULL) {
    
  } else {
    
  }
  energe_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), energe_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.energe_type)
}

// string live_type = 7;
inline void Plant_Create::clear_live_type() {
  live_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_Create::live_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.live_type)
  return live_type_.GetNoArena();
}
inline void Plant_Create::set_live_type(const ::std::string& value) {
  
  live_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.live_type)
}
#if LANG_CXX11
inline void Plant_Create::set_live_type(::std::string&& value) {
  
  live_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.live_type)
}
#endif
inline void Plant_Create::set_live_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  live_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.live_type)
}
inline void Plant_Create::set_live_type(const char* value, size_t size) {
  
  live_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.live_type)
}
inline ::std::string* Plant_Create::mutable_live_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.live_type)
  return live_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_Create::release_live_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.live_type)
  
  return live_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_Create::set_allocated_live_type(::std::string* live_type) {
  if (live_type != NULL) {
    
  } else {
    
  }
  live_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), live_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.live_type)
}

// string life_type = 8;
inline void Plant_Create::clear_life_type() {
  life_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_Create::life_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.life_type)
  return life_type_.GetNoArena();
}
inline void Plant_Create::set_life_type(const ::std::string& value) {
  
  life_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.life_type)
}
#if LANG_CXX11
inline void Plant_Create::set_life_type(::std::string&& value) {
  
  life_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.life_type)
}
#endif
inline void Plant_Create::set_life_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  life_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.life_type)
}
inline void Plant_Create::set_life_type(const char* value, size_t size) {
  
  life_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.life_type)
}
inline ::std::string* Plant_Create::mutable_life_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.life_type)
  return life_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_Create::release_life_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.life_type)
  
  return life_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_Create::set_allocated_life_type(::std::string* life_type) {
  if (life_type != NULL) {
    
  } else {
    
  }
  life_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), life_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.life_type)
}

// string reproduct_type = 9;
inline void Plant_Create::clear_reproduct_type() {
  reproduct_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_Create::reproduct_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.reproduct_type)
  return reproduct_type_.GetNoArena();
}
inline void Plant_Create::set_reproduct_type(const ::std::string& value) {
  
  reproduct_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.reproduct_type)
}
#if LANG_CXX11
inline void Plant_Create::set_reproduct_type(::std::string&& value) {
  
  reproduct_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.reproduct_type)
}
#endif
inline void Plant_Create::set_reproduct_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reproduct_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.reproduct_type)
}
inline void Plant_Create::set_reproduct_type(const char* value, size_t size) {
  
  reproduct_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.reproduct_type)
}
inline ::std::string* Plant_Create::mutable_reproduct_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.reproduct_type)
  return reproduct_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_Create::release_reproduct_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.reproduct_type)
  
  return reproduct_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_Create::set_allocated_reproduct_type(::std::string* reproduct_type) {
  if (reproduct_type != NULL) {
    
  } else {
    
  }
  reproduct_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reproduct_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.reproduct_type)
}

// string denger_type = 10;
inline void Plant_Create::clear_denger_type() {
  denger_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_Create::denger_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Create.denger_type)
  return denger_type_.GetNoArena();
}
inline void Plant_Create::set_denger_type(const ::std::string& value) {
  
  denger_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Create.denger_type)
}
#if LANG_CXX11
inline void Plant_Create::set_denger_type(::std::string&& value) {
  
  denger_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Create.denger_type)
}
#endif
inline void Plant_Create::set_denger_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  denger_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Create.denger_type)
}
inline void Plant_Create::set_denger_type(const char* value, size_t size) {
  
  denger_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Create.denger_type)
}
inline ::std::string* Plant_Create::mutable_denger_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Create.denger_type)
  return denger_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_Create::release_denger_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Create.denger_type)
  
  return denger_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_Create::set_allocated_denger_type(::std::string* denger_type) {
  if (denger_type != NULL) {
    
  } else {
    
  }
  denger_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), denger_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Create.denger_type)
}

// -------------------------------------------------------------------

// Plant_Water

// .NetProto.MsgHead head = 1;
inline bool Plant_Water::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void Plant_Water::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& Plant_Water::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Water.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* Plant_Water::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Water.head)
  return head_;
}
inline ::NetProto::MsgHead* Plant_Water::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Water.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Plant_Water::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Water.head)
}

// string plant_id = 2;
inline void Plant_Water::clear_plant_id() {
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_Water::plant_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Water.plant_id)
  return plant_id_.GetNoArena();
}
inline void Plant_Water::set_plant_id(const ::std::string& value) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Water.plant_id)
}
#if LANG_CXX11
inline void Plant_Water::set_plant_id(::std::string&& value) {
  
  plant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Water.plant_id)
}
#endif
inline void Plant_Water::set_plant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Water.plant_id)
}
inline void Plant_Water::set_plant_id(const char* value, size_t size) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Water.plant_id)
}
inline ::std::string* Plant_Water::mutable_plant_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Water.plant_id)
  return plant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_Water::release_plant_id() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Water.plant_id)
  
  return plant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_Water::set_allocated_plant_id(::std::string* plant_id) {
  if (plant_id != NULL) {
    
  } else {
    
  }
  plant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Water.plant_id)
}

// uint32 space_id = 3;
inline void Plant_Water::clear_space_id() {
  space_id_ = 0u;
}
inline ::google::protobuf::uint32 Plant_Water::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Water.space_id)
  return space_id_;
}
inline void Plant_Water::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_Water.space_id)
}

// float value = 4;
inline void Plant_Water::clear_value() {
  value_ = 0;
}
inline float Plant_Water::value() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Water.value)
  return value_;
}
inline void Plant_Water::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_Water.value)
}

// -------------------------------------------------------------------

// Plant_Weather

// .NetProto.MsgHead head = 1;
inline bool Plant_Weather::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void Plant_Weather::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& Plant_Weather::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Weather.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* Plant_Weather::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Weather.head)
  return head_;
}
inline ::NetProto::MsgHead* Plant_Weather::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Weather.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Plant_Weather::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Weather.head)
}

// uint32 space_id = 2;
inline void Plant_Weather::clear_space_id() {
  space_id_ = 0u;
}
inline ::google::protobuf::uint32 Plant_Weather::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Weather.space_id)
  return space_id_;
}
inline void Plant_Weather::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_Weather.space_id)
}

// .NetProto.WeatherRawData weather = 3;
inline bool Plant_Weather::has_weather() const {
  return this != internal_default_instance() && weather_ != NULL;
}
inline void Plant_Weather::clear_weather() {
  if (GetArenaNoVirtual() == NULL && weather_ != NULL) delete weather_;
  weather_ = NULL;
}
inline const ::NetProto::WeatherRawData& Plant_Weather::weather() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Weather.weather)
  return weather_ != NULL ? *weather_
                         : *::NetProto::WeatherRawData::internal_default_instance();
}
inline ::NetProto::WeatherRawData* Plant_Weather::mutable_weather() {
  
  if (weather_ == NULL) {
    weather_ = new ::NetProto::WeatherRawData;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Weather.weather)
  return weather_;
}
inline ::NetProto::WeatherRawData* Plant_Weather::release_weather() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Weather.weather)
  
  ::NetProto::WeatherRawData* temp = weather_;
  weather_ = NULL;
  return temp;
}
inline void Plant_Weather::set_allocated_weather(::NetProto::WeatherRawData* weather) {
  delete weather_;
  weather_ = weather;
  if (weather) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Weather.weather)
}

// -------------------------------------------------------------------

// Plant_PickFruit_Req

// .NetProto.MsgHead head = 1;
inline bool Plant_PickFruit_Req::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void Plant_PickFruit_Req::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& Plant_PickFruit_Req::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_PickFruit_Req.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* Plant_PickFruit_Req::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_PickFruit_Req.head)
  return head_;
}
inline ::NetProto::MsgHead* Plant_PickFruit_Req::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_PickFruit_Req.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Plant_PickFruit_Req::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_PickFruit_Req.head)
}

// string plant_id = 2;
inline void Plant_PickFruit_Req::clear_plant_id() {
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_PickFruit_Req::plant_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_PickFruit_Req.plant_id)
  return plant_id_.GetNoArena();
}
inline void Plant_PickFruit_Req::set_plant_id(const ::std::string& value) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_PickFruit_Req.plant_id)
}
#if LANG_CXX11
inline void Plant_PickFruit_Req::set_plant_id(::std::string&& value) {
  
  plant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_PickFruit_Req.plant_id)
}
#endif
inline void Plant_PickFruit_Req::set_plant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_PickFruit_Req.plant_id)
}
inline void Plant_PickFruit_Req::set_plant_id(const char* value, size_t size) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_PickFruit_Req.plant_id)
}
inline ::std::string* Plant_PickFruit_Req::mutable_plant_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_PickFruit_Req.plant_id)
  return plant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_PickFruit_Req::release_plant_id() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_PickFruit_Req.plant_id)
  
  return plant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_PickFruit_Req::set_allocated_plant_id(::std::string* plant_id) {
  if (plant_id != NULL) {
    
  } else {
    
  }
  plant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_PickFruit_Req.plant_id)
}

// uint32 space_id = 3;
inline void Plant_PickFruit_Req::clear_space_id() {
  space_id_ = 0u;
}
inline ::google::protobuf::uint32 Plant_PickFruit_Req::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_PickFruit_Req.space_id)
  return space_id_;
}
inline void Plant_PickFruit_Req::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_PickFruit_Req.space_id)
}

// -------------------------------------------------------------------

// Plant_PickFruit_Resp

// .NetProto.MsgHead head = 1;
inline bool Plant_PickFruit_Resp::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void Plant_PickFruit_Resp::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& Plant_PickFruit_Resp::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_PickFruit_Resp.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* Plant_PickFruit_Resp::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_PickFruit_Resp.head)
  return head_;
}
inline ::NetProto::MsgHead* Plant_PickFruit_Resp::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_PickFruit_Resp.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Plant_PickFruit_Resp::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_PickFruit_Resp.head)
}

// string plant_id = 2;
inline void Plant_PickFruit_Resp::clear_plant_id() {
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_PickFruit_Resp::plant_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_PickFruit_Resp.plant_id)
  return plant_id_.GetNoArena();
}
inline void Plant_PickFruit_Resp::set_plant_id(const ::std::string& value) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_PickFruit_Resp.plant_id)
}
#if LANG_CXX11
inline void Plant_PickFruit_Resp::set_plant_id(::std::string&& value) {
  
  plant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_PickFruit_Resp.plant_id)
}
#endif
inline void Plant_PickFruit_Resp::set_plant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_PickFruit_Resp.plant_id)
}
inline void Plant_PickFruit_Resp::set_plant_id(const char* value, size_t size) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_PickFruit_Resp.plant_id)
}
inline ::std::string* Plant_PickFruit_Resp::mutable_plant_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_PickFruit_Resp.plant_id)
  return plant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_PickFruit_Resp::release_plant_id() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_PickFruit_Resp.plant_id)
  
  return plant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_PickFruit_Resp::set_allocated_plant_id(::std::string* plant_id) {
  if (plant_id != NULL) {
    
  } else {
    
  }
  plant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_PickFruit_Resp.plant_id)
}

// uint32 space_id = 3;
inline void Plant_PickFruit_Resp::clear_space_id() {
  space_id_ = 0u;
}
inline ::google::protobuf::uint32 Plant_PickFruit_Resp::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_PickFruit_Resp.space_id)
  return space_id_;
}
inline void Plant_PickFruit_Resp::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_PickFruit_Resp.space_id)
}

// string fruit = 4;
inline void Plant_PickFruit_Resp::clear_fruit() {
  fruit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_PickFruit_Resp::fruit() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_PickFruit_Resp.fruit)
  return fruit_.GetNoArena();
}
inline void Plant_PickFruit_Resp::set_fruit(const ::std::string& value) {
  
  fruit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_PickFruit_Resp.fruit)
}
#if LANG_CXX11
inline void Plant_PickFruit_Resp::set_fruit(::std::string&& value) {
  
  fruit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_PickFruit_Resp.fruit)
}
#endif
inline void Plant_PickFruit_Resp::set_fruit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fruit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_PickFruit_Resp.fruit)
}
inline void Plant_PickFruit_Resp::set_fruit(const char* value, size_t size) {
  
  fruit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_PickFruit_Resp.fruit)
}
inline ::std::string* Plant_PickFruit_Resp::mutable_fruit() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_PickFruit_Resp.fruit)
  return fruit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_PickFruit_Resp::release_fruit() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_PickFruit_Resp.fruit)
  
  return fruit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_PickFruit_Resp::set_allocated_fruit(::std::string* fruit) {
  if (fruit != NULL) {
    
  } else {
    
  }
  fruit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fruit);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_PickFruit_Resp.fruit)
}

// -------------------------------------------------------------------

// Plant_Delete_Req

// .NetProto.MsgHead head = 1;
inline bool Plant_Delete_Req::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void Plant_Delete_Req::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& Plant_Delete_Req::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Delete_Req.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* Plant_Delete_Req::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Delete_Req.head)
  return head_;
}
inline ::NetProto::MsgHead* Plant_Delete_Req::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Delete_Req.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Plant_Delete_Req::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Delete_Req.head)
}

// string plant_id = 2;
inline void Plant_Delete_Req::clear_plant_id() {
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_Delete_Req::plant_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Delete_Req.plant_id)
  return plant_id_.GetNoArena();
}
inline void Plant_Delete_Req::set_plant_id(const ::std::string& value) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Delete_Req.plant_id)
}
#if LANG_CXX11
inline void Plant_Delete_Req::set_plant_id(::std::string&& value) {
  
  plant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Delete_Req.plant_id)
}
#endif
inline void Plant_Delete_Req::set_plant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Delete_Req.plant_id)
}
inline void Plant_Delete_Req::set_plant_id(const char* value, size_t size) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Delete_Req.plant_id)
}
inline ::std::string* Plant_Delete_Req::mutable_plant_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Delete_Req.plant_id)
  return plant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_Delete_Req::release_plant_id() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Delete_Req.plant_id)
  
  return plant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_Delete_Req::set_allocated_plant_id(::std::string* plant_id) {
  if (plant_id != NULL) {
    
  } else {
    
  }
  plant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Delete_Req.plant_id)
}

// uint32 space_id = 3;
inline void Plant_Delete_Req::clear_space_id() {
  space_id_ = 0u;
}
inline ::google::protobuf::uint32 Plant_Delete_Req::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Delete_Req.space_id)
  return space_id_;
}
inline void Plant_Delete_Req::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_Delete_Req.space_id)
}

// -------------------------------------------------------------------

// Plant_Delete_Resp

// .NetProto.MsgHead head = 1;
inline bool Plant_Delete_Resp::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void Plant_Delete_Resp::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& Plant_Delete_Resp::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Delete_Resp.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* Plant_Delete_Resp::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Delete_Resp.head)
  return head_;
}
inline ::NetProto::MsgHead* Plant_Delete_Resp::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Delete_Resp.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Plant_Delete_Resp::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Delete_Resp.head)
}

// string plant_id = 2;
inline void Plant_Delete_Resp::clear_plant_id() {
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_Delete_Resp::plant_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Delete_Resp.plant_id)
  return plant_id_.GetNoArena();
}
inline void Plant_Delete_Resp::set_plant_id(const ::std::string& value) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_Delete_Resp.plant_id)
}
#if LANG_CXX11
inline void Plant_Delete_Resp::set_plant_id(::std::string&& value) {
  
  plant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_Delete_Resp.plant_id)
}
#endif
inline void Plant_Delete_Resp::set_plant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_Delete_Resp.plant_id)
}
inline void Plant_Delete_Resp::set_plant_id(const char* value, size_t size) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_Delete_Resp.plant_id)
}
inline ::std::string* Plant_Delete_Resp::mutable_plant_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Delete_Resp.plant_id)
  return plant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_Delete_Resp::release_plant_id() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Delete_Resp.plant_id)
  
  return plant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_Delete_Resp::set_allocated_plant_id(::std::string* plant_id) {
  if (plant_id != NULL) {
    
  } else {
    
  }
  plant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Delete_Resp.plant_id)
}

// uint32 space_id = 3;
inline void Plant_Delete_Resp::clear_space_id() {
  space_id_ = 0u;
}
inline ::google::protobuf::uint32 Plant_Delete_Resp::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Delete_Resp.space_id)
  return space_id_;
}
inline void Plant_Delete_Resp::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_Delete_Resp.space_id)
}

// bool result = 4;
inline void Plant_Delete_Resp::clear_result() {
  result_ = false;
}
inline bool Plant_Delete_Resp::result() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Delete_Resp.result)
  return result_;
}
inline void Plant_Delete_Resp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_Delete_Resp.result)
}

// -------------------------------------------------------------------

// Plant_State

// string plant_type = 1;
inline void Plant_State::clear_plant_type() {
  plant_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_State::plant_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.plant_type)
  return plant_type_.GetNoArena();
}
inline void Plant_State::set_plant_type(const ::std::string& value) {
  
  plant_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.plant_type)
}
#if LANG_CXX11
inline void Plant_State::set_plant_type(::std::string&& value) {
  
  plant_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_State.plant_type)
}
#endif
inline void Plant_State::set_plant_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_State.plant_type)
}
inline void Plant_State::set_plant_type(const char* value, size_t size) {
  
  plant_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_State.plant_type)
}
inline ::std::string* Plant_State::mutable_plant_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_State.plant_type)
  return plant_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_State::release_plant_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_State.plant_type)
  
  return plant_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_State::set_allocated_plant_type(::std::string* plant_type) {
  if (plant_type != NULL) {
    
  } else {
    
  }
  plant_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_State.plant_type)
}

// string plant_id = 2;
inline void Plant_State::clear_plant_id() {
  plant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_State::plant_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.plant_id)
  return plant_id_.GetNoArena();
}
inline void Plant_State::set_plant_id(const ::std::string& value) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.plant_id)
}
#if LANG_CXX11
inline void Plant_State::set_plant_id(::std::string&& value) {
  
  plant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_State.plant_id)
}
#endif
inline void Plant_State::set_plant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_State.plant_id)
}
inline void Plant_State::set_plant_id(const char* value, size_t size) {
  
  plant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_State.plant_id)
}
inline ::std::string* Plant_State::mutable_plant_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_State.plant_id)
  return plant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_State::release_plant_id() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_State.plant_id)
  
  return plant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_State::set_allocated_plant_id(::std::string* plant_id) {
  if (plant_id != NULL) {
    
  } else {
    
  }
  plant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plant_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_State.plant_id)
}

// uint32 space_id = 3;
inline void Plant_State::clear_space_id() {
  space_id_ = 0u;
}
inline ::google::protobuf::uint32 Plant_State::space_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.space_id)
  return space_id_;
}
inline void Plant_State::set_space_id(::google::protobuf::uint32 value) {
  
  space_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.space_id)
}

// string fruit_type = 4;
inline void Plant_State::clear_fruit_type() {
  fruit_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_State::fruit_type() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.fruit_type)
  return fruit_type_.GetNoArena();
}
inline void Plant_State::set_fruit_type(const ::std::string& value) {
  
  fruit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.fruit_type)
}
#if LANG_CXX11
inline void Plant_State::set_fruit_type(::std::string&& value) {
  
  fruit_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_State.fruit_type)
}
#endif
inline void Plant_State::set_fruit_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fruit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_State.fruit_type)
}
inline void Plant_State::set_fruit_type(const char* value, size_t size) {
  
  fruit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_State.fruit_type)
}
inline ::std::string* Plant_State::mutable_fruit_type() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_State.fruit_type)
  return fruit_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_State::release_fruit_type() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_State.fruit_type)
  
  return fruit_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_State::set_allocated_fruit_type(::std::string* fruit_type) {
  if (fruit_type != NULL) {
    
  } else {
    
  }
  fruit_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fruit_type);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_State.fruit_type)
}

// string live_state = 5;
inline void Plant_State::clear_live_state() {
  live_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_State::live_state() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.live_state)
  return live_state_.GetNoArena();
}
inline void Plant_State::set_live_state(const ::std::string& value) {
  
  live_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.live_state)
}
#if LANG_CXX11
inline void Plant_State::set_live_state(::std::string&& value) {
  
  live_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_State.live_state)
}
#endif
inline void Plant_State::set_live_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  live_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_State.live_state)
}
inline void Plant_State::set_live_state(const char* value, size_t size) {
  
  live_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_State.live_state)
}
inline ::std::string* Plant_State::mutable_live_state() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_State.live_state)
  return live_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_State::release_live_state() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_State.live_state)
  
  return live_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_State::set_allocated_live_state(::std::string* live_state) {
  if (live_state != NULL) {
    
  } else {
    
  }
  live_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), live_state);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_State.live_state)
}

// string life_stage = 6;
inline void Plant_State::clear_life_stage() {
  life_stage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_State::life_stage() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.life_stage)
  return life_stage_.GetNoArena();
}
inline void Plant_State::set_life_stage(const ::std::string& value) {
  
  life_stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.life_stage)
}
#if LANG_CXX11
inline void Plant_State::set_life_stage(::std::string&& value) {
  
  life_stage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_State.life_stage)
}
#endif
inline void Plant_State::set_life_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  life_stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_State.life_stage)
}
inline void Plant_State::set_life_stage(const char* value, size_t size) {
  
  life_stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_State.life_stage)
}
inline ::std::string* Plant_State::mutable_life_stage() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_State.life_stage)
  return life_stage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_State::release_life_stage() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_State.life_stage)
  
  return life_stage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_State::set_allocated_life_stage(::std::string* life_stage) {
  if (life_stage != NULL) {
    
  } else {
    
  }
  life_stage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), life_stage);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_State.life_stage)
}

// string reproduct_state = 7;
inline void Plant_State::clear_reproduct_state() {
  reproduct_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plant_State::reproduct_state() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.reproduct_state)
  return reproduct_state_.GetNoArena();
}
inline void Plant_State::set_reproduct_state(const ::std::string& value) {
  
  reproduct_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.reproduct_state)
}
#if LANG_CXX11
inline void Plant_State::set_reproduct_state(::std::string&& value) {
  
  reproduct_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Plant_State.reproduct_state)
}
#endif
inline void Plant_State::set_reproduct_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reproduct_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Plant_State.reproduct_state)
}
inline void Plant_State::set_reproduct_state(const char* value, size_t size) {
  
  reproduct_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Plant_State.reproduct_state)
}
inline ::std::string* Plant_State::mutable_reproduct_state() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_State.reproduct_state)
  return reproduct_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plant_State::release_reproduct_state() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_State.reproduct_state)
  
  return reproduct_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plant_State::set_allocated_reproduct_state(::std::string* reproduct_state) {
  if (reproduct_state != NULL) {
    
  } else {
    
  }
  reproduct_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reproduct_state);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_State.reproduct_state)
}

// float leaf_level = 8;
inline void Plant_State::clear_leaf_level() {
  leaf_level_ = 0;
}
inline float Plant_State::leaf_level() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.leaf_level)
  return leaf_level_;
}
inline void Plant_State::set_leaf_level(float value) {
  
  leaf_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.leaf_level)
}

// float live_level = 9;
inline void Plant_State::clear_live_level() {
  live_level_ = 0;
}
inline float Plant_State::live_level() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.live_level)
  return live_level_;
}
inline void Plant_State::set_live_level(float value) {
  
  live_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.live_level)
}

// bool is_adult = 10;
inline void Plant_State::clear_is_adult() {
  is_adult_ = false;
}
inline bool Plant_State::is_adult() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.is_adult)
  return is_adult_;
}
inline void Plant_State::set_is_adult(bool value) {
  
  is_adult_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.is_adult)
}

// bool is_fruit = 11;
inline void Plant_State::clear_is_fruit() {
  is_fruit_ = false;
}
inline bool Plant_State::is_fruit() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_State.is_fruit)
  return is_fruit_;
}
inline void Plant_State::set_is_fruit(bool value) {
  
  is_fruit_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Plant_State.is_fruit)
}

// -------------------------------------------------------------------

// Plant_Info

// .NetProto.MsgHead head = 1;
inline bool Plant_Info::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void Plant_Info::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& Plant_Info::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Info.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* Plant_Info::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Info.head)
  return head_;
}
inline ::NetProto::MsgHead* Plant_Info::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Plant_Info.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Plant_Info::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Plant_Info.head)
}

// repeated .NetProto.Plant_State plant = 2;
inline int Plant_Info::plant_size() const {
  return plant_.size();
}
inline void Plant_Info::clear_plant() {
  plant_.Clear();
}
inline const ::NetProto::Plant_State& Plant_Info::plant(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.Plant_Info.plant)
  return plant_.Get(index);
}
inline ::NetProto::Plant_State* Plant_Info::mutable_plant(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.Plant_Info.plant)
  return plant_.Mutable(index);
}
inline ::NetProto::Plant_State* Plant_Info::add_plant() {
  // @@protoc_insertion_point(field_add:NetProto.Plant_Info.plant)
  return plant_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::Plant_State >*
Plant_Info::mutable_plant() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.Plant_Info.plant)
  return &plant_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::Plant_State >&
Plant_Info::plant() const {
  // @@protoc_insertion_point(field_list:NetProto.Plant_Info.plant)
  return plant_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace NetProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_plant_2eproto__INCLUDED
