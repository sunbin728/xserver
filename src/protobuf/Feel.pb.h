// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Feel.proto

#ifndef PROTOBUF_Feel_2eproto__INCLUDED
#define PROTOBUF_Feel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "msg_head.pb.h"
// @@protoc_insertion_point(includes)
namespace NetProto {
class Feels;
class FeelsDefaultTypeInternal;
extern FeelsDefaultTypeInternal _Feels_default_instance_;
class Feels_Feel;
class Feels_FeelDefaultTypeInternal;
extern Feels_FeelDefaultTypeInternal _Feels_Feel_default_instance_;
class MsgHead;
class MsgHeadDefaultTypeInternal;
extern MsgHeadDefaultTypeInternal _MsgHead_default_instance_;
}  // namespace NetProto

namespace NetProto {

namespace protobuf_Feel_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Feel_2eproto

enum Feels_DIMEN_TYPE {
  Feels_DIMEN_TYPE_VISUAL = 0,
  Feels_DIMEN_TYPE_TACTILE = 1,
  Feels_DIMEN_TYPE_TASTE = 2,
  Feels_DIMEN_TYPE_SMELL = 3,
  Feels_DIMEN_TYPE_FEELINGS = 4,
  Feels_DIMEN_TYPE_HEARING = 5,
  Feels_DIMEN_TYPE_POS = 6,
  Feels_DIMEN_TYPE_Feels_DIMEN_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Feels_DIMEN_TYPE_Feels_DIMEN_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Feels_DIMEN_TYPE_IsValid(int value);
const Feels_DIMEN_TYPE Feels_DIMEN_TYPE_DIMEN_TYPE_MIN = Feels_DIMEN_TYPE_VISUAL;
const Feels_DIMEN_TYPE Feels_DIMEN_TYPE_DIMEN_TYPE_MAX = Feels_DIMEN_TYPE_POS;
const int Feels_DIMEN_TYPE_DIMEN_TYPE_ARRAYSIZE = Feels_DIMEN_TYPE_DIMEN_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* Feels_DIMEN_TYPE_descriptor();
inline const ::std::string& Feels_DIMEN_TYPE_Name(Feels_DIMEN_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    Feels_DIMEN_TYPE_descriptor(), value);
}
inline bool Feels_DIMEN_TYPE_Parse(
    const ::std::string& name, Feels_DIMEN_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Feels_DIMEN_TYPE>(
    Feels_DIMEN_TYPE_descriptor(), name, value);
}
// ===================================================================

class Feels_Feel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Feels.Feel) */ {
 public:
  Feels_Feel();
  virtual ~Feels_Feel();

  Feels_Feel(const Feels_Feel& from);

  inline Feels_Feel& operator=(const Feels_Feel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Feels_Feel& default_instance();

  static inline const Feels_Feel* internal_default_instance() {
    return reinterpret_cast<const Feels_Feel*>(
               &_Feels_Feel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Feels_Feel* other);

  // implements Message ----------------------------------------------

  inline Feels_Feel* New() const PROTOBUF_FINAL { return New(NULL); }

  Feels_Feel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Feels_Feel& from);
  void MergeFrom(const Feels_Feel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Feels_Feel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string feel = 2;
  void clear_feel();
  static const int kFeelFieldNumber = 2;
  const ::std::string& feel() const;
  void set_feel(const ::std::string& value);
  #if LANG_CXX11
  void set_feel(::std::string&& value);
  #endif
  void set_feel(const char* value);
  void set_feel(const char* value, size_t size);
  ::std::string* mutable_feel();
  ::std::string* release_feel();
  void set_allocated_feel(::std::string* feel);

  // .NetProto.Feels.DIMEN_TYPE type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::NetProto::Feels_DIMEN_TYPE type() const;
  void set_type(::NetProto::Feels_DIMEN_TYPE value);

  // @@protoc_insertion_point(class_scope:NetProto.Feels.Feel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr feel_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_Feel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Feels : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Feels) */ {
 public:
  Feels();
  virtual ~Feels();

  Feels(const Feels& from);

  inline Feels& operator=(const Feels& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Feels& default_instance();

  static inline const Feels* internal_default_instance() {
    return reinterpret_cast<const Feels*>(
               &_Feels_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Feels* other);

  // implements Message ----------------------------------------------

  inline Feels* New() const PROTOBUF_FINAL { return New(NULL); }

  Feels* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Feels& from);
  void MergeFrom(const Feels& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Feels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Feels_Feel Feel;

  typedef Feels_DIMEN_TYPE DIMEN_TYPE;
  static const DIMEN_TYPE VISUAL =
    Feels_DIMEN_TYPE_VISUAL;
  static const DIMEN_TYPE TACTILE =
    Feels_DIMEN_TYPE_TACTILE;
  static const DIMEN_TYPE TASTE =
    Feels_DIMEN_TYPE_TASTE;
  static const DIMEN_TYPE SMELL =
    Feels_DIMEN_TYPE_SMELL;
  static const DIMEN_TYPE FEELINGS =
    Feels_DIMEN_TYPE_FEELINGS;
  static const DIMEN_TYPE HEARING =
    Feels_DIMEN_TYPE_HEARING;
  static const DIMEN_TYPE POS =
    Feels_DIMEN_TYPE_POS;
  static inline bool DIMEN_TYPE_IsValid(int value) {
    return Feels_DIMEN_TYPE_IsValid(value);
  }
  static const DIMEN_TYPE DIMEN_TYPE_MIN =
    Feels_DIMEN_TYPE_DIMEN_TYPE_MIN;
  static const DIMEN_TYPE DIMEN_TYPE_MAX =
    Feels_DIMEN_TYPE_DIMEN_TYPE_MAX;
  static const int DIMEN_TYPE_ARRAYSIZE =
    Feels_DIMEN_TYPE_DIMEN_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DIMEN_TYPE_descriptor() {
    return Feels_DIMEN_TYPE_descriptor();
  }
  static inline const ::std::string& DIMEN_TYPE_Name(DIMEN_TYPE value) {
    return Feels_DIMEN_TYPE_Name(value);
  }
  static inline bool DIMEN_TYPE_Parse(const ::std::string& name,
      DIMEN_TYPE* value) {
    return Feels_DIMEN_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NetProto.Feels.Feel feel = 2;
  int feel_size() const;
  void clear_feel();
  static const int kFeelFieldNumber = 2;
  const ::NetProto::Feels_Feel& feel(int index) const;
  ::NetProto::Feels_Feel* mutable_feel(int index);
  ::NetProto::Feels_Feel* add_feel();
  ::google::protobuf::RepeatedPtrField< ::NetProto::Feels_Feel >*
      mutable_feel();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::Feels_Feel >&
      feel() const;

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // @@protoc_insertion_point(class_scope:NetProto.Feels)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::Feels_Feel > feel_;
  ::NetProto::MsgHead* head_;
  mutable int _cached_size_;
  friend struct protobuf_Feel_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Feels_Feel

// .NetProto.Feels.DIMEN_TYPE type = 1;
inline void Feels_Feel::clear_type() {
  type_ = 0;
}
inline ::NetProto::Feels_DIMEN_TYPE Feels_Feel::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Feels.Feel.type)
  return static_cast< ::NetProto::Feels_DIMEN_TYPE >(type_);
}
inline void Feels_Feel::set_type(::NetProto::Feels_DIMEN_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Feels.Feel.type)
}

// string feel = 2;
inline void Feels_Feel::clear_feel() {
  feel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feels_Feel::feel() const {
  // @@protoc_insertion_point(field_get:NetProto.Feels.Feel.feel)
  return feel_.GetNoArena();
}
inline void Feels_Feel::set_feel(const ::std::string& value) {
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Feels.Feel.feel)
}
#if LANG_CXX11
inline void Feels_Feel::set_feel(::std::string&& value) {
  
  feel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Feels.Feel.feel)
}
#endif
inline void Feels_Feel::set_feel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Feels.Feel.feel)
}
inline void Feels_Feel::set_feel(const char* value, size_t size) {
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Feels.Feel.feel)
}
inline ::std::string* Feels_Feel::mutable_feel() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Feels.Feel.feel)
  return feel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feels_Feel::release_feel() {
  // @@protoc_insertion_point(field_release:NetProto.Feels.Feel.feel)
  
  return feel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feels_Feel::set_allocated_feel(::std::string* feel) {
  if (feel != NULL) {
    
  } else {
    
  }
  feel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feel);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Feels.Feel.feel)
}

// -------------------------------------------------------------------

// Feels

// .NetProto.MsgHead head = 1;
inline bool Feels::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void Feels::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& Feels::head() const {
  // @@protoc_insertion_point(field_get:NetProto.Feels.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* Feels::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Feels.head)
  return head_;
}
inline ::NetProto::MsgHead* Feels::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.Feels.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Feels::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Feels.head)
}

// repeated .NetProto.Feels.Feel feel = 2;
inline int Feels::feel_size() const {
  return feel_.size();
}
inline void Feels::clear_feel() {
  feel_.Clear();
}
inline const ::NetProto::Feels_Feel& Feels::feel(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.Feels.feel)
  return feel_.Get(index);
}
inline ::NetProto::Feels_Feel* Feels::mutable_feel(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.Feels.feel)
  return feel_.Mutable(index);
}
inline ::NetProto::Feels_Feel* Feels::add_feel() {
  // @@protoc_insertion_point(field_add:NetProto.Feels.feel)
  return feel_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::Feels_Feel >*
Feels::mutable_feel() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.Feels.feel)
  return &feel_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::Feels_Feel >&
Feels::feel() const {
  // @@protoc_insertion_point(field_list:NetProto.Feels.feel)
  return feel_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace NetProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NetProto::Feels_DIMEN_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::Feels_DIMEN_TYPE>() {
  return ::NetProto::Feels_DIMEN_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Feel_2eproto__INCLUDED
