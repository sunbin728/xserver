// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weather_item_2_client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "weather_item_2_client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
class WeatherItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeatherItem> {
} _WeatherItem_default_instance_;

namespace protobuf_weather_5fitem_5f2_5fclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, sun_shine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, cloud_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, rain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, hail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, moon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, thunder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, snow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, wind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, typhoon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, meteor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, ice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, vegetation_leaf_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, vegetation_leaf_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, vegetation_flower_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, vegetation_flower_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, warmwinter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, humidity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, sun_high_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherItem, sun_orig_angle_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(WeatherItem)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeatherItem_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "weather_item_2_client.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _WeatherItem_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::NetProto::protobuf_msg_5fhead_2eproto::InitDefaults();
  _WeatherItem_default_instance_.DefaultConstruct();
  _WeatherItem_default_instance_.get_mutable()->head_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\033weather_item_2_client.proto\022\010NetProto\032"
      "\016msg_head.proto\"\260\003\n\013WeatherItem\022\037\n\004head\030"
      "\001 \001(\0132\021.NetProto.MsgHead\022\021\n\tsun_shine\030\002 "
      "\001(\r\022\r\n\005cloud\030\003 \001(\r\022\014\n\004rain\030\004 \001(\r\022\014\n\004hail"
      "\030\005 \001(\r\022\014\n\004moon\030\006 \001(\r\022\017\n\007thunder\030\007 \001(\r\022\014\n"
      "\004snow\030\010 \001(\r\022\014\n\004wind\030\014 \001(\r\022\017\n\007typhoon\030\r \001"
      "(\r\022\016\n\006meteor\030\016 \001(\r\022\013\n\003ice\030\017 \001(\r\022\031\n\021veget"
      "ation_leaf_a\030\022 \001(\r\022\031\n\021vegetation_leaf_b\030"
      "\023 \001(\r\022\033\n\023vegetation_flower_a\030\024 \001(\r\022\033\n\023ve"
      "getation_flower_b\030\025 \001(\r\022\023\n\013temperature\030\026"
      " \001(\r\022\022\n\nwarmwinter\030\030 \001(\r\022\020\n\010humidity\030\031 \001"
      "(\r\022\026\n\016sun_high_angle\030\036 \001(\r\022\026\n\016sun_orig_a"
      "ngle\030\037 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 498);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "weather_item_2_client.proto", &protobuf_RegisterTypes);
  ::NetProto::protobuf_msg_5fhead_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_weather_5fitem_5f2_5fclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeatherItem::kHeadFieldNumber;
const int WeatherItem::kSunShineFieldNumber;
const int WeatherItem::kCloudFieldNumber;
const int WeatherItem::kRainFieldNumber;
const int WeatherItem::kHailFieldNumber;
const int WeatherItem::kMoonFieldNumber;
const int WeatherItem::kThunderFieldNumber;
const int WeatherItem::kSnowFieldNumber;
const int WeatherItem::kWindFieldNumber;
const int WeatherItem::kTyphoonFieldNumber;
const int WeatherItem::kMeteorFieldNumber;
const int WeatherItem::kIceFieldNumber;
const int WeatherItem::kVegetationLeafAFieldNumber;
const int WeatherItem::kVegetationLeafBFieldNumber;
const int WeatherItem::kVegetationFlowerAFieldNumber;
const int WeatherItem::kVegetationFlowerBFieldNumber;
const int WeatherItem::kTemperatureFieldNumber;
const int WeatherItem::kWarmwinterFieldNumber;
const int WeatherItem::kHumidityFieldNumber;
const int WeatherItem::kSunHighAngleFieldNumber;
const int WeatherItem::kSunOrigAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeatherItem::WeatherItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_weather_5fitem_5f2_5fclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.WeatherItem)
}
WeatherItem::WeatherItem(const WeatherItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::NetProto::MsgHead(*from.head_);
  } else {
    head_ = NULL;
  }
  ::memcpy(&sun_shine_, &from.sun_shine_,
    reinterpret_cast<char*>(&sun_orig_angle_) -
    reinterpret_cast<char*>(&sun_shine_) + sizeof(sun_orig_angle_));
  // @@protoc_insertion_point(copy_constructor:NetProto.WeatherItem)
}

void WeatherItem::SharedCtor() {
  ::memset(&head_, 0, reinterpret_cast<char*>(&sun_orig_angle_) -
    reinterpret_cast<char*>(&head_) + sizeof(sun_orig_angle_));
  _cached_size_ = 0;
}

WeatherItem::~WeatherItem() {
  // @@protoc_insertion_point(destructor:NetProto.WeatherItem)
  SharedDtor();
}

void WeatherItem::SharedDtor() {
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void WeatherItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherItem::descriptor() {
  protobuf_weather_5fitem_5f2_5fclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_5f2_5fclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeatherItem& WeatherItem::default_instance() {
  protobuf_weather_5fitem_5f2_5fclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeatherItem* WeatherItem::New(::google::protobuf::Arena* arena) const {
  WeatherItem* n = new WeatherItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeatherItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.WeatherItem)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  ::memset(&sun_shine_, 0, reinterpret_cast<char*>(&sun_orig_angle_) -
    reinterpret_cast<char*>(&sun_shine_) + sizeof(sun_orig_angle_));
}

bool WeatherItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.WeatherItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sun_shine = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sun_shine_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cloud = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloud_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hail = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 moon = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 thunder = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thunder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 snow = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wind = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 typhoon = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &typhoon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 meteor = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meteor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ice = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vegetation_leaf_a = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vegetation_leaf_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vegetation_leaf_b = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vegetation_leaf_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vegetation_flower_a = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vegetation_flower_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vegetation_flower_b = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vegetation_flower_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 temperature = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 warmwinter = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warmwinter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 humidity = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &humidity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sun_high_angle = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sun_high_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sun_orig_angle = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sun_orig_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.WeatherItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.WeatherItem)
  return false;
#undef DO_
}

void WeatherItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.WeatherItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // uint32 sun_shine = 2;
  if (this->sun_shine() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sun_shine(), output);
  }

  // uint32 cloud = 3;
  if (this->cloud() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cloud(), output);
  }

  // uint32 rain = 4;
  if (this->rain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rain(), output);
  }

  // uint32 hail = 5;
  if (this->hail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hail(), output);
  }

  // uint32 moon = 6;
  if (this->moon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->moon(), output);
  }

  // uint32 thunder = 7;
  if (this->thunder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->thunder(), output);
  }

  // uint32 snow = 8;
  if (this->snow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->snow(), output);
  }

  // uint32 wind = 12;
  if (this->wind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->wind(), output);
  }

  // uint32 typhoon = 13;
  if (this->typhoon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->typhoon(), output);
  }

  // uint32 meteor = 14;
  if (this->meteor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->meteor(), output);
  }

  // uint32 ice = 15;
  if (this->ice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ice(), output);
  }

  // uint32 vegetation_leaf_a = 18;
  if (this->vegetation_leaf_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->vegetation_leaf_a(), output);
  }

  // uint32 vegetation_leaf_b = 19;
  if (this->vegetation_leaf_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->vegetation_leaf_b(), output);
  }

  // uint32 vegetation_flower_a = 20;
  if (this->vegetation_flower_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->vegetation_flower_a(), output);
  }

  // uint32 vegetation_flower_b = 21;
  if (this->vegetation_flower_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->vegetation_flower_b(), output);
  }

  // uint32 temperature = 22;
  if (this->temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->temperature(), output);
  }

  // uint32 warmwinter = 24;
  if (this->warmwinter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->warmwinter(), output);
  }

  // uint32 humidity = 25;
  if (this->humidity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->humidity(), output);
  }

  // uint32 sun_high_angle = 30;
  if (this->sun_high_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->sun_high_angle(), output);
  }

  // uint32 sun_orig_angle = 31;
  if (this->sun_orig_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->sun_orig_angle(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.WeatherItem)
}

::google::protobuf::uint8* WeatherItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.WeatherItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // uint32 sun_shine = 2;
  if (this->sun_shine() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sun_shine(), target);
  }

  // uint32 cloud = 3;
  if (this->cloud() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cloud(), target);
  }

  // uint32 rain = 4;
  if (this->rain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rain(), target);
  }

  // uint32 hail = 5;
  if (this->hail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hail(), target);
  }

  // uint32 moon = 6;
  if (this->moon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->moon(), target);
  }

  // uint32 thunder = 7;
  if (this->thunder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->thunder(), target);
  }

  // uint32 snow = 8;
  if (this->snow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->snow(), target);
  }

  // uint32 wind = 12;
  if (this->wind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->wind(), target);
  }

  // uint32 typhoon = 13;
  if (this->typhoon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->typhoon(), target);
  }

  // uint32 meteor = 14;
  if (this->meteor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->meteor(), target);
  }

  // uint32 ice = 15;
  if (this->ice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ice(), target);
  }

  // uint32 vegetation_leaf_a = 18;
  if (this->vegetation_leaf_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->vegetation_leaf_a(), target);
  }

  // uint32 vegetation_leaf_b = 19;
  if (this->vegetation_leaf_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->vegetation_leaf_b(), target);
  }

  // uint32 vegetation_flower_a = 20;
  if (this->vegetation_flower_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->vegetation_flower_a(), target);
  }

  // uint32 vegetation_flower_b = 21;
  if (this->vegetation_flower_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->vegetation_flower_b(), target);
  }

  // uint32 temperature = 22;
  if (this->temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->temperature(), target);
  }

  // uint32 warmwinter = 24;
  if (this->warmwinter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->warmwinter(), target);
  }

  // uint32 humidity = 25;
  if (this->humidity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->humidity(), target);
  }

  // uint32 sun_high_angle = 30;
  if (this->sun_high_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->sun_high_angle(), target);
  }

  // uint32 sun_orig_angle = 31;
  if (this->sun_orig_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->sun_orig_angle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.WeatherItem)
  return target;
}

size_t WeatherItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.WeatherItem)
  size_t total_size = 0;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // uint32 sun_shine = 2;
  if (this->sun_shine() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sun_shine());
  }

  // uint32 cloud = 3;
  if (this->cloud() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cloud());
  }

  // uint32 rain = 4;
  if (this->rain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rain());
  }

  // uint32 hail = 5;
  if (this->hail() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hail());
  }

  // uint32 moon = 6;
  if (this->moon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->moon());
  }

  // uint32 thunder = 7;
  if (this->thunder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thunder());
  }

  // uint32 snow = 8;
  if (this->snow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->snow());
  }

  // uint32 wind = 12;
  if (this->wind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wind());
  }

  // uint32 typhoon = 13;
  if (this->typhoon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->typhoon());
  }

  // uint32 meteor = 14;
  if (this->meteor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->meteor());
  }

  // uint32 ice = 15;
  if (this->ice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ice());
  }

  // uint32 vegetation_leaf_a = 18;
  if (this->vegetation_leaf_a() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vegetation_leaf_a());
  }

  // uint32 vegetation_leaf_b = 19;
  if (this->vegetation_leaf_b() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vegetation_leaf_b());
  }

  // uint32 vegetation_flower_a = 20;
  if (this->vegetation_flower_a() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vegetation_flower_a());
  }

  // uint32 vegetation_flower_b = 21;
  if (this->vegetation_flower_b() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vegetation_flower_b());
  }

  // uint32 temperature = 22;
  if (this->temperature() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->temperature());
  }

  // uint32 warmwinter = 24;
  if (this->warmwinter() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->warmwinter());
  }

  // uint32 humidity = 25;
  if (this->humidity() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->humidity());
  }

  // uint32 sun_high_angle = 30;
  if (this->sun_high_angle() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sun_high_angle());
  }

  // uint32 sun_orig_angle = 31;
  if (this->sun_orig_angle() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sun_orig_angle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.WeatherItem)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeatherItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.WeatherItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.WeatherItem)
    MergeFrom(*source);
  }
}

void WeatherItem::MergeFrom(const WeatherItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.WeatherItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::NetProto::MsgHead::MergeFrom(from.head());
  }
  if (from.sun_shine() != 0) {
    set_sun_shine(from.sun_shine());
  }
  if (from.cloud() != 0) {
    set_cloud(from.cloud());
  }
  if (from.rain() != 0) {
    set_rain(from.rain());
  }
  if (from.hail() != 0) {
    set_hail(from.hail());
  }
  if (from.moon() != 0) {
    set_moon(from.moon());
  }
  if (from.thunder() != 0) {
    set_thunder(from.thunder());
  }
  if (from.snow() != 0) {
    set_snow(from.snow());
  }
  if (from.wind() != 0) {
    set_wind(from.wind());
  }
  if (from.typhoon() != 0) {
    set_typhoon(from.typhoon());
  }
  if (from.meteor() != 0) {
    set_meteor(from.meteor());
  }
  if (from.ice() != 0) {
    set_ice(from.ice());
  }
  if (from.vegetation_leaf_a() != 0) {
    set_vegetation_leaf_a(from.vegetation_leaf_a());
  }
  if (from.vegetation_leaf_b() != 0) {
    set_vegetation_leaf_b(from.vegetation_leaf_b());
  }
  if (from.vegetation_flower_a() != 0) {
    set_vegetation_flower_a(from.vegetation_flower_a());
  }
  if (from.vegetation_flower_b() != 0) {
    set_vegetation_flower_b(from.vegetation_flower_b());
  }
  if (from.temperature() != 0) {
    set_temperature(from.temperature());
  }
  if (from.warmwinter() != 0) {
    set_warmwinter(from.warmwinter());
  }
  if (from.humidity() != 0) {
    set_humidity(from.humidity());
  }
  if (from.sun_high_angle() != 0) {
    set_sun_high_angle(from.sun_high_angle());
  }
  if (from.sun_orig_angle() != 0) {
    set_sun_orig_angle(from.sun_orig_angle());
  }
}

void WeatherItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.WeatherItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherItem::CopyFrom(const WeatherItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.WeatherItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherItem::IsInitialized() const {
  return true;
}

void WeatherItem::Swap(WeatherItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeatherItem::InternalSwap(WeatherItem* other) {
  std::swap(head_, other->head_);
  std::swap(sun_shine_, other->sun_shine_);
  std::swap(cloud_, other->cloud_);
  std::swap(rain_, other->rain_);
  std::swap(hail_, other->hail_);
  std::swap(moon_, other->moon_);
  std::swap(thunder_, other->thunder_);
  std::swap(snow_, other->snow_);
  std::swap(wind_, other->wind_);
  std::swap(typhoon_, other->typhoon_);
  std::swap(meteor_, other->meteor_);
  std::swap(ice_, other->ice_);
  std::swap(vegetation_leaf_a_, other->vegetation_leaf_a_);
  std::swap(vegetation_leaf_b_, other->vegetation_leaf_b_);
  std::swap(vegetation_flower_a_, other->vegetation_flower_a_);
  std::swap(vegetation_flower_b_, other->vegetation_flower_b_);
  std::swap(temperature_, other->temperature_);
  std::swap(warmwinter_, other->warmwinter_);
  std::swap(humidity_, other->humidity_);
  std::swap(sun_high_angle_, other->sun_high_angle_);
  std::swap(sun_orig_angle_, other->sun_orig_angle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeatherItem::GetMetadata() const {
  protobuf_weather_5fitem_5f2_5fclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fitem_5f2_5fclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeatherItem

// .NetProto.MsgHead head = 1;
bool WeatherItem::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void WeatherItem::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::NetProto::MsgHead& WeatherItem::head() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* WeatherItem::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherItem.head)
  return head_;
}
::NetProto::MsgHead* WeatherItem::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherItem.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
void WeatherItem::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherItem.head)
}

// uint32 sun_shine = 2;
void WeatherItem::clear_sun_shine() {
  sun_shine_ = 0u;
}
::google::protobuf::uint32 WeatherItem::sun_shine() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.sun_shine)
  return sun_shine_;
}
void WeatherItem::set_sun_shine(::google::protobuf::uint32 value) {
  
  sun_shine_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.sun_shine)
}

// uint32 cloud = 3;
void WeatherItem::clear_cloud() {
  cloud_ = 0u;
}
::google::protobuf::uint32 WeatherItem::cloud() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.cloud)
  return cloud_;
}
void WeatherItem::set_cloud(::google::protobuf::uint32 value) {
  
  cloud_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.cloud)
}

// uint32 rain = 4;
void WeatherItem::clear_rain() {
  rain_ = 0u;
}
::google::protobuf::uint32 WeatherItem::rain() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.rain)
  return rain_;
}
void WeatherItem::set_rain(::google::protobuf::uint32 value) {
  
  rain_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.rain)
}

// uint32 hail = 5;
void WeatherItem::clear_hail() {
  hail_ = 0u;
}
::google::protobuf::uint32 WeatherItem::hail() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.hail)
  return hail_;
}
void WeatherItem::set_hail(::google::protobuf::uint32 value) {
  
  hail_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.hail)
}

// uint32 moon = 6;
void WeatherItem::clear_moon() {
  moon_ = 0u;
}
::google::protobuf::uint32 WeatherItem::moon() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.moon)
  return moon_;
}
void WeatherItem::set_moon(::google::protobuf::uint32 value) {
  
  moon_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.moon)
}

// uint32 thunder = 7;
void WeatherItem::clear_thunder() {
  thunder_ = 0u;
}
::google::protobuf::uint32 WeatherItem::thunder() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.thunder)
  return thunder_;
}
void WeatherItem::set_thunder(::google::protobuf::uint32 value) {
  
  thunder_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.thunder)
}

// uint32 snow = 8;
void WeatherItem::clear_snow() {
  snow_ = 0u;
}
::google::protobuf::uint32 WeatherItem::snow() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.snow)
  return snow_;
}
void WeatherItem::set_snow(::google::protobuf::uint32 value) {
  
  snow_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.snow)
}

// uint32 wind = 12;
void WeatherItem::clear_wind() {
  wind_ = 0u;
}
::google::protobuf::uint32 WeatherItem::wind() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.wind)
  return wind_;
}
void WeatherItem::set_wind(::google::protobuf::uint32 value) {
  
  wind_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.wind)
}

// uint32 typhoon = 13;
void WeatherItem::clear_typhoon() {
  typhoon_ = 0u;
}
::google::protobuf::uint32 WeatherItem::typhoon() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.typhoon)
  return typhoon_;
}
void WeatherItem::set_typhoon(::google::protobuf::uint32 value) {
  
  typhoon_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.typhoon)
}

// uint32 meteor = 14;
void WeatherItem::clear_meteor() {
  meteor_ = 0u;
}
::google::protobuf::uint32 WeatherItem::meteor() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.meteor)
  return meteor_;
}
void WeatherItem::set_meteor(::google::protobuf::uint32 value) {
  
  meteor_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.meteor)
}

// uint32 ice = 15;
void WeatherItem::clear_ice() {
  ice_ = 0u;
}
::google::protobuf::uint32 WeatherItem::ice() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.ice)
  return ice_;
}
void WeatherItem::set_ice(::google::protobuf::uint32 value) {
  
  ice_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.ice)
}

// uint32 vegetation_leaf_a = 18;
void WeatherItem::clear_vegetation_leaf_a() {
  vegetation_leaf_a_ = 0u;
}
::google::protobuf::uint32 WeatherItem::vegetation_leaf_a() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.vegetation_leaf_a)
  return vegetation_leaf_a_;
}
void WeatherItem::set_vegetation_leaf_a(::google::protobuf::uint32 value) {
  
  vegetation_leaf_a_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.vegetation_leaf_a)
}

// uint32 vegetation_leaf_b = 19;
void WeatherItem::clear_vegetation_leaf_b() {
  vegetation_leaf_b_ = 0u;
}
::google::protobuf::uint32 WeatherItem::vegetation_leaf_b() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.vegetation_leaf_b)
  return vegetation_leaf_b_;
}
void WeatherItem::set_vegetation_leaf_b(::google::protobuf::uint32 value) {
  
  vegetation_leaf_b_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.vegetation_leaf_b)
}

// uint32 vegetation_flower_a = 20;
void WeatherItem::clear_vegetation_flower_a() {
  vegetation_flower_a_ = 0u;
}
::google::protobuf::uint32 WeatherItem::vegetation_flower_a() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.vegetation_flower_a)
  return vegetation_flower_a_;
}
void WeatherItem::set_vegetation_flower_a(::google::protobuf::uint32 value) {
  
  vegetation_flower_a_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.vegetation_flower_a)
}

// uint32 vegetation_flower_b = 21;
void WeatherItem::clear_vegetation_flower_b() {
  vegetation_flower_b_ = 0u;
}
::google::protobuf::uint32 WeatherItem::vegetation_flower_b() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.vegetation_flower_b)
  return vegetation_flower_b_;
}
void WeatherItem::set_vegetation_flower_b(::google::protobuf::uint32 value) {
  
  vegetation_flower_b_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.vegetation_flower_b)
}

// uint32 temperature = 22;
void WeatherItem::clear_temperature() {
  temperature_ = 0u;
}
::google::protobuf::uint32 WeatherItem::temperature() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.temperature)
  return temperature_;
}
void WeatherItem::set_temperature(::google::protobuf::uint32 value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.temperature)
}

// uint32 warmwinter = 24;
void WeatherItem::clear_warmwinter() {
  warmwinter_ = 0u;
}
::google::protobuf::uint32 WeatherItem::warmwinter() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.warmwinter)
  return warmwinter_;
}
void WeatherItem::set_warmwinter(::google::protobuf::uint32 value) {
  
  warmwinter_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.warmwinter)
}

// uint32 humidity = 25;
void WeatherItem::clear_humidity() {
  humidity_ = 0u;
}
::google::protobuf::uint32 WeatherItem::humidity() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.humidity)
  return humidity_;
}
void WeatherItem::set_humidity(::google::protobuf::uint32 value) {
  
  humidity_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.humidity)
}

// uint32 sun_high_angle = 30;
void WeatherItem::clear_sun_high_angle() {
  sun_high_angle_ = 0u;
}
::google::protobuf::uint32 WeatherItem::sun_high_angle() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.sun_high_angle)
  return sun_high_angle_;
}
void WeatherItem::set_sun_high_angle(::google::protobuf::uint32 value) {
  
  sun_high_angle_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.sun_high_angle)
}

// uint32 sun_orig_angle = 31;
void WeatherItem::clear_sun_orig_angle() {
  sun_orig_angle_ = 0u;
}
::google::protobuf::uint32 WeatherItem::sun_orig_angle() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherItem.sun_orig_angle)
  return sun_orig_angle_;
}
void WeatherItem::set_sun_orig_angle(::google::protobuf::uint32 value) {
  
  sun_orig_angle_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherItem.sun_orig_angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
