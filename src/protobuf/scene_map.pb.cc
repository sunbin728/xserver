// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene_map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "scene_map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
class SceneMap_ObjInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SceneMap_ObjInfo> {
} _SceneMap_ObjInfo_default_instance_;
class SceneMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SceneMap> {
} _SceneMap_default_instance_;

namespace protobuf_scene_5fmap_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMap_ObjInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMap_ObjInfo, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMap_ObjInfo, class_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMap_ObjInfo, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMap_ObjInfo, pos_rot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMap, owner_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMap, map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMap, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMap, obj_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMap, status_vector_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SceneMap_ObjInfo)},
  { 9, -1, sizeof(SceneMap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneMap_ObjInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneMap_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "scene_map.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _SceneMap_ObjInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SceneMap_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::NetProto::protobuf_pos_5frot_2eproto::InitDefaults();
  ::NetProto::protobuf_obj_5fpos_5frelation_2eproto::InitDefaults();
  ::NetProto::Action::Status::protobuf_natural_5faction_5fstatus_2eproto::InitDefaults();
  _SceneMap_ObjInfo_default_instance_.DefaultConstruct();
  _SceneMap_default_instance_.DefaultConstruct();
  _SceneMap_ObjInfo_default_instance_.get_mutable()->pos_rot_ = const_cast< ::NetProto::PosRot*>(
      ::NetProto::PosRot::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017scene_map.proto\022\010NetProto\032\rpos_rot.pro"
      "to\032\026obj_pos_relation.proto\032\033natural_acti"
      "on_status.proto\"\226\002\n\010SceneMap\022\023\n\nowner_uu"
      "id\030\350\007 \001(\t\022\017\n\006map_id\030\351\007 \001(\r\022\021\n\010scene_id\030\352"
      "\007 \001(\t\022-\n\010obj_info\030\353\007 \003(\0132\032.NetProto.Scen"
      "eMap.ObjInfo\022C\n\rstatus_vector\030\355\007 \003(\0132+.N"
      "etProto.Action.Status.NaturalActionStatu"
      "s\032]\n\007ObjInfo\022\014\n\004uuid\030\001 \001(\t\022\020\n\010class_id\030\002"
      " \001(\r\022\017\n\007item_id\030\003 \001(\r\022!\n\007pos_rot\030\004 \001(\0132\020"
      ".NetProto.PosRotb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 384);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "scene_map.proto", &protobuf_RegisterTypes);
  ::NetProto::protobuf_pos_5frot_2eproto::AddDescriptors();
  ::NetProto::protobuf_obj_5fpos_5frelation_2eproto::AddDescriptors();
  ::NetProto::Action::Status::protobuf_natural_5faction_5fstatus_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_scene_5fmap_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneMap_ObjInfo::kUuidFieldNumber;
const int SceneMap_ObjInfo::kClassIdFieldNumber;
const int SceneMap_ObjInfo::kItemIdFieldNumber;
const int SceneMap_ObjInfo::kPosRotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneMap_ObjInfo::SceneMap_ObjInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_scene_5fmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.SceneMap.ObjInfo)
}
SceneMap_ObjInfo::SceneMap_ObjInfo(const SceneMap_ObjInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_pos_rot()) {
    pos_rot_ = new ::NetProto::PosRot(*from.pos_rot_);
  } else {
    pos_rot_ = NULL;
  }
  ::memcpy(&class_id_, &from.class_id_,
    reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&class_id_) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:NetProto.SceneMap.ObjInfo)
}

void SceneMap_ObjInfo::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_rot_, 0, reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&pos_rot_) + sizeof(item_id_));
  _cached_size_ = 0;
}

SceneMap_ObjInfo::~SceneMap_ObjInfo() {
  // @@protoc_insertion_point(destructor:NetProto.SceneMap.ObjInfo)
  SharedDtor();
}

void SceneMap_ObjInfo::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete pos_rot_;
  }
}

void SceneMap_ObjInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneMap_ObjInfo::descriptor() {
  protobuf_scene_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scene_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneMap_ObjInfo& SceneMap_ObjInfo::default_instance() {
  protobuf_scene_5fmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneMap_ObjInfo* SceneMap_ObjInfo::New(::google::protobuf::Arena* arena) const {
  SceneMap_ObjInfo* n = new SceneMap_ObjInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneMap_ObjInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.SceneMap.ObjInfo)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pos_rot_ != NULL) {
    delete pos_rot_;
  }
  pos_rot_ = NULL;
  ::memset(&class_id_, 0, reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&class_id_) + sizeof(item_id_));
}

bool SceneMap_ObjInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.SceneMap.ObjInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.SceneMap.ObjInfo.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 class_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 item_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.PosRot pos_rot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos_rot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.SceneMap.ObjInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.SceneMap.ObjInfo)
  return false;
#undef DO_
}

void SceneMap_ObjInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.SceneMap.ObjInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.SceneMap.ObjInfo.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // uint32 class_id = 2;
  if (this->class_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->class_id(), output);
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_id(), output);
  }

  // .NetProto.PosRot pos_rot = 4;
  if (this->has_pos_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pos_rot_, output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.SceneMap.ObjInfo)
}

::google::protobuf::uint8* SceneMap_ObjInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.SceneMap.ObjInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.SceneMap.ObjInfo.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // uint32 class_id = 2;
  if (this->class_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->class_id(), target);
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_id(), target);
  }

  // .NetProto.PosRot pos_rot = 4;
  if (this->has_pos_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pos_rot_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.SceneMap.ObjInfo)
  return target;
}

size_t SceneMap_ObjInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.SceneMap.ObjInfo)
  size_t total_size = 0;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // .NetProto.PosRot pos_rot = 4;
  if (this->has_pos_rot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_rot_);
  }

  // uint32 class_id = 2;
  if (this->class_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->class_id());
  }

  // uint32 item_id = 3;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneMap_ObjInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.SceneMap.ObjInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneMap_ObjInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneMap_ObjInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.SceneMap.ObjInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.SceneMap.ObjInfo)
    MergeFrom(*source);
  }
}

void SceneMap_ObjInfo::MergeFrom(const SceneMap_ObjInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.SceneMap.ObjInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_pos_rot()) {
    mutable_pos_rot()->::NetProto::PosRot::MergeFrom(from.pos_rot());
  }
  if (from.class_id() != 0) {
    set_class_id(from.class_id());
  }
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
}

void SceneMap_ObjInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.SceneMap.ObjInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneMap_ObjInfo::CopyFrom(const SceneMap_ObjInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.SceneMap.ObjInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneMap_ObjInfo::IsInitialized() const {
  return true;
}

void SceneMap_ObjInfo::Swap(SceneMap_ObjInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneMap_ObjInfo::InternalSwap(SceneMap_ObjInfo* other) {
  uuid_.Swap(&other->uuid_);
  std::swap(pos_rot_, other->pos_rot_);
  std::swap(class_id_, other->class_id_);
  std::swap(item_id_, other->item_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneMap_ObjInfo::GetMetadata() const {
  protobuf_scene_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scene_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneMap_ObjInfo

// string uuid = 1;
void SceneMap_ObjInfo::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SceneMap_ObjInfo::uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.ObjInfo.uuid)
  return uuid_.GetNoArena();
}
void SceneMap_ObjInfo::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.SceneMap.ObjInfo.uuid)
}
#if LANG_CXX11
void SceneMap_ObjInfo::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.SceneMap.ObjInfo.uuid)
}
#endif
void SceneMap_ObjInfo::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.SceneMap.ObjInfo.uuid)
}
void SceneMap_ObjInfo::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.SceneMap.ObjInfo.uuid)
}
::std::string* SceneMap_ObjInfo::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.SceneMap.ObjInfo.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SceneMap_ObjInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.SceneMap.ObjInfo.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SceneMap_ObjInfo::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.SceneMap.ObjInfo.uuid)
}

// uint32 class_id = 2;
void SceneMap_ObjInfo::clear_class_id() {
  class_id_ = 0u;
}
::google::protobuf::uint32 SceneMap_ObjInfo::class_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.ObjInfo.class_id)
  return class_id_;
}
void SceneMap_ObjInfo::set_class_id(::google::protobuf::uint32 value) {
  
  class_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SceneMap.ObjInfo.class_id)
}

// uint32 item_id = 3;
void SceneMap_ObjInfo::clear_item_id() {
  item_id_ = 0u;
}
::google::protobuf::uint32 SceneMap_ObjInfo::item_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.ObjInfo.item_id)
  return item_id_;
}
void SceneMap_ObjInfo::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SceneMap.ObjInfo.item_id)
}

// .NetProto.PosRot pos_rot = 4;
bool SceneMap_ObjInfo::has_pos_rot() const {
  return this != internal_default_instance() && pos_rot_ != NULL;
}
void SceneMap_ObjInfo::clear_pos_rot() {
  if (GetArenaNoVirtual() == NULL && pos_rot_ != NULL) delete pos_rot_;
  pos_rot_ = NULL;
}
const ::NetProto::PosRot& SceneMap_ObjInfo::pos_rot() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.ObjInfo.pos_rot)
  return pos_rot_ != NULL ? *pos_rot_
                         : *::NetProto::PosRot::internal_default_instance();
}
::NetProto::PosRot* SceneMap_ObjInfo::mutable_pos_rot() {
  
  if (pos_rot_ == NULL) {
    pos_rot_ = new ::NetProto::PosRot;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.SceneMap.ObjInfo.pos_rot)
  return pos_rot_;
}
::NetProto::PosRot* SceneMap_ObjInfo::release_pos_rot() {
  // @@protoc_insertion_point(field_release:NetProto.SceneMap.ObjInfo.pos_rot)
  
  ::NetProto::PosRot* temp = pos_rot_;
  pos_rot_ = NULL;
  return temp;
}
void SceneMap_ObjInfo::set_allocated_pos_rot(::NetProto::PosRot* pos_rot) {
  delete pos_rot_;
  pos_rot_ = pos_rot;
  if (pos_rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.SceneMap.ObjInfo.pos_rot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneMap::kOwnerUuidFieldNumber;
const int SceneMap::kMapIdFieldNumber;
const int SceneMap::kSceneIdFieldNumber;
const int SceneMap::kObjInfoFieldNumber;
const int SceneMap::kStatusVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneMap::SceneMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_scene_5fmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.SceneMap)
}
SceneMap::SceneMap(const SceneMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      obj_info_(from.obj_info_),
      status_vector_(from.status_vector_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner_uuid().size() > 0) {
    owner_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_uuid_);
  }
  scene_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.scene_id().size() > 0) {
    scene_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
  map_id_ = from.map_id_;
  // @@protoc_insertion_point(copy_constructor:NetProto.SceneMap)
}

void SceneMap::SharedCtor() {
  owner_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_id_ = 0u;
  _cached_size_ = 0;
}

SceneMap::~SceneMap() {
  // @@protoc_insertion_point(destructor:NetProto.SceneMap)
  SharedDtor();
}

void SceneMap::SharedDtor() {
  owner_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SceneMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneMap::descriptor() {
  protobuf_scene_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scene_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneMap& SceneMap::default_instance() {
  protobuf_scene_5fmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneMap* SceneMap::New(::google::protobuf::Arena* arena) const {
  SceneMap* n = new SceneMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneMap::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.SceneMap)
  obj_info_.Clear();
  status_vector_.Clear();
  owner_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_id_ = 0u;
}

bool SceneMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.SceneMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string owner_uuid = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8002u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_uuid().data(), this->owner_uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.SceneMap.owner_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 map_id = 1001;
      case 1001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8008u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string scene_id = 1002;
      case 1002: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8018u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scene_id().data(), this->scene_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetProto.SceneMap.scene_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.SceneMap.ObjInfo obj_info = 1003;
      case 1003: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8026u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obj_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
      case 1005: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8042u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.SceneMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.SceneMap)
  return false;
#undef DO_
}

void SceneMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.SceneMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_uuid = 1000;
  if (this->owner_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_uuid().data(), this->owner_uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.SceneMap.owner_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1000, this->owner_uuid(), output);
  }

  // uint32 map_id = 1001;
  if (this->map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1001, this->map_id(), output);
  }

  // string scene_id = 1002;
  if (this->scene_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene_id().data(), this->scene_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.SceneMap.scene_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1002, this->scene_id(), output);
  }

  // repeated .NetProto.SceneMap.ObjInfo obj_info = 1003;
  for (unsigned int i = 0, n = this->obj_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1003, this->obj_info(i), output);
  }

  // repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
  for (unsigned int i = 0, n = this->status_vector_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1005, this->status_vector(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.SceneMap)
}

::google::protobuf::uint8* SceneMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.SceneMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_uuid = 1000;
  if (this->owner_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_uuid().data(), this->owner_uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.SceneMap.owner_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1000, this->owner_uuid(), target);
  }

  // uint32 map_id = 1001;
  if (this->map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1001, this->map_id(), target);
  }

  // string scene_id = 1002;
  if (this->scene_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene_id().data(), this->scene_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetProto.SceneMap.scene_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1002, this->scene_id(), target);
  }

  // repeated .NetProto.SceneMap.ObjInfo obj_info = 1003;
  for (unsigned int i = 0, n = this->obj_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1003, this->obj_info(i), deterministic, target);
  }

  // repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
  for (unsigned int i = 0, n = this->status_vector_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1005, this->status_vector(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.SceneMap)
  return target;
}

size_t SceneMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.SceneMap)
  size_t total_size = 0;

  // repeated .NetProto.SceneMap.ObjInfo obj_info = 1003;
  {
    unsigned int count = this->obj_info_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obj_info(i));
    }
  }

  // repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
  {
    unsigned int count = this->status_vector_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status_vector(i));
    }
  }

  // string owner_uuid = 1000;
  if (this->owner_uuid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner_uuid());
  }

  // string scene_id = 1002;
  if (this->scene_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scene_id());
  }

  // uint32 map_id = 1001;
  if (this->map_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->map_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.SceneMap)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.SceneMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.SceneMap)
    MergeFrom(*source);
  }
}

void SceneMap::MergeFrom(const SceneMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.SceneMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obj_info_.MergeFrom(from.obj_info_);
  status_vector_.MergeFrom(from.status_vector_);
  if (from.owner_uuid().size() > 0) {

    owner_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_uuid_);
  }
  if (from.scene_id().size() > 0) {

    scene_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
  if (from.map_id() != 0) {
    set_map_id(from.map_id());
  }
}

void SceneMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.SceneMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneMap::CopyFrom(const SceneMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.SceneMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneMap::IsInitialized() const {
  return true;
}

void SceneMap::Swap(SceneMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneMap::InternalSwap(SceneMap* other) {
  obj_info_.InternalSwap(&other->obj_info_);
  status_vector_.InternalSwap(&other->status_vector_);
  owner_uuid_.Swap(&other->owner_uuid_);
  scene_id_.Swap(&other->scene_id_);
  std::swap(map_id_, other->map_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneMap::GetMetadata() const {
  protobuf_scene_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scene_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneMap

// string owner_uuid = 1000;
void SceneMap::clear_owner_uuid() {
  owner_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SceneMap::owner_uuid() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.owner_uuid)
  return owner_uuid_.GetNoArena();
}
void SceneMap::set_owner_uuid(const ::std::string& value) {
  
  owner_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.SceneMap.owner_uuid)
}
#if LANG_CXX11
void SceneMap::set_owner_uuid(::std::string&& value) {
  
  owner_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.SceneMap.owner_uuid)
}
#endif
void SceneMap::set_owner_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.SceneMap.owner_uuid)
}
void SceneMap::set_owner_uuid(const char* value, size_t size) {
  
  owner_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.SceneMap.owner_uuid)
}
::std::string* SceneMap::mutable_owner_uuid() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.SceneMap.owner_uuid)
  return owner_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SceneMap::release_owner_uuid() {
  // @@protoc_insertion_point(field_release:NetProto.SceneMap.owner_uuid)
  
  return owner_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SceneMap::set_allocated_owner_uuid(::std::string* owner_uuid) {
  if (owner_uuid != NULL) {
    
  } else {
    
  }
  owner_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_uuid);
  // @@protoc_insertion_point(field_set_allocated:NetProto.SceneMap.owner_uuid)
}

// uint32 map_id = 1001;
void SceneMap::clear_map_id() {
  map_id_ = 0u;
}
::google::protobuf::uint32 SceneMap::map_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.map_id)
  return map_id_;
}
void SceneMap::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SceneMap.map_id)
}

// string scene_id = 1002;
void SceneMap::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SceneMap::scene_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.scene_id)
  return scene_id_.GetNoArena();
}
void SceneMap::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.SceneMap.scene_id)
}
#if LANG_CXX11
void SceneMap::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.SceneMap.scene_id)
}
#endif
void SceneMap::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.SceneMap.scene_id)
}
void SceneMap::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.SceneMap.scene_id)
}
::std::string* SceneMap::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.SceneMap.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SceneMap::release_scene_id() {
  // @@protoc_insertion_point(field_release:NetProto.SceneMap.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SceneMap::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.SceneMap.scene_id)
}

// repeated .NetProto.SceneMap.ObjInfo obj_info = 1003;
int SceneMap::obj_info_size() const {
  return obj_info_.size();
}
void SceneMap::clear_obj_info() {
  obj_info_.Clear();
}
const ::NetProto::SceneMap_ObjInfo& SceneMap::obj_info(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.obj_info)
  return obj_info_.Get(index);
}
::NetProto::SceneMap_ObjInfo* SceneMap::mutable_obj_info(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.SceneMap.obj_info)
  return obj_info_.Mutable(index);
}
::NetProto::SceneMap_ObjInfo* SceneMap::add_obj_info() {
  // @@protoc_insertion_point(field_add:NetProto.SceneMap.obj_info)
  return obj_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::SceneMap_ObjInfo >*
SceneMap::mutable_obj_info() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.SceneMap.obj_info)
  return &obj_info_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::SceneMap_ObjInfo >&
SceneMap::obj_info() const {
  // @@protoc_insertion_point(field_list:NetProto.SceneMap.obj_info)
  return obj_info_;
}

// repeated .NetProto.Action.Status.NaturalActionStatus status_vector = 1005;
int SceneMap::status_vector_size() const {
  return status_vector_.size();
}
void SceneMap::clear_status_vector() {
  status_vector_.Clear();
}
const ::NetProto::Action::Status::NaturalActionStatus& SceneMap::status_vector(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.SceneMap.status_vector)
  return status_vector_.Get(index);
}
::NetProto::Action::Status::NaturalActionStatus* SceneMap::mutable_status_vector(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.SceneMap.status_vector)
  return status_vector_.Mutable(index);
}
::NetProto::Action::Status::NaturalActionStatus* SceneMap::add_status_vector() {
  // @@protoc_insertion_point(field_add:NetProto.SceneMap.status_vector)
  return status_vector_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >*
SceneMap::mutable_status_vector() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.SceneMap.status_vector)
  return &status_vector_;
}
const ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >&
SceneMap::status_vector() const {
  // @@protoc_insertion_point(field_list:NetProto.SceneMap.status_vector)
  return status_vector_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
