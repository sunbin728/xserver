// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weather_dimension.proto

#ifndef PROTOBUF_weather_5fdimension_2eproto__INCLUDED
#define PROTOBUF_weather_5fdimension_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "msg_head.pb.h"
// @@protoc_insertion_point(includes)
namespace NetProto {
class MsgHead;
class MsgHeadDefaultTypeInternal;
extern MsgHeadDefaultTypeInternal _MsgHead_default_instance_;
class SpaceWeatherFeel;
class SpaceWeatherFeelDefaultTypeInternal;
extern SpaceWeatherFeelDefaultTypeInternal _SpaceWeatherFeel_default_instance_;
class SpaceWeatherHeard;
class SpaceWeatherHeardDefaultTypeInternal;
extern SpaceWeatherHeardDefaultTypeInternal _SpaceWeatherHeard_default_instance_;
class SpaceWeatherSee;
class SpaceWeatherSeeDefaultTypeInternal;
extern SpaceWeatherSeeDefaultTypeInternal _SpaceWeatherSee_default_instance_;
}  // namespace NetProto

namespace NetProto {

namespace protobuf_weather_5fdimension_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_weather_5fdimension_2eproto

// ===================================================================

class SpaceWeatherSee : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.SpaceWeatherSee) */ {
 public:
  SpaceWeatherSee();
  virtual ~SpaceWeatherSee();

  SpaceWeatherSee(const SpaceWeatherSee& from);

  inline SpaceWeatherSee& operator=(const SpaceWeatherSee& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpaceWeatherSee& default_instance();

  static inline const SpaceWeatherSee* internal_default_instance() {
    return reinterpret_cast<const SpaceWeatherSee*>(
               &_SpaceWeatherSee_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SpaceWeatherSee* other);

  // implements Message ----------------------------------------------

  inline SpaceWeatherSee* New() const PROTOBUF_FINAL { return New(NULL); }

  SpaceWeatherSee* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpaceWeatherSee& from);
  void MergeFrom(const SpaceWeatherSee& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpaceWeatherSee* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // float sunshine_level = 2;
  void clear_sunshine_level();
  static const int kSunshineLevelFieldNumber = 2;
  float sunshine_level() const;
  void set_sunshine_level(float value);

  // float cloud_level = 5;
  void clear_cloud_level();
  static const int kCloudLevelFieldNumber = 5;
  float cloud_level() const;
  void set_cloud_level(float value);

  // float rain_flag = 7;
  void clear_rain_flag();
  static const int kRainFlagFieldNumber = 7;
  float rain_flag() const;
  void set_rain_flag(float value);

  // float rain_level = 8;
  void clear_rain_level();
  static const int kRainLevelFieldNumber = 8;
  float rain_level() const;
  void set_rain_level(float value);

  // float snow_level = 9;
  void clear_snow_level();
  static const int kSnowLevelFieldNumber = 9;
  float snow_level() const;
  void set_snow_level(float value);

  // float hail_level = 10;
  void clear_hail_level();
  static const int kHailLevelFieldNumber = 10;
  float hail_level() const;
  void set_hail_level(float value);

  // float thunder_level = 11;
  void clear_thunder_level();
  static const int kThunderLevelFieldNumber = 11;
  float thunder_level() const;
  void set_thunder_level(float value);

  // float moon_wanes = 12;
  void clear_moon_wanes();
  static const int kMoonWanesFieldNumber = 12;
  float moon_wanes() const;
  void set_moon_wanes(float value);

  // float moon_shape = 13;
  void clear_moon_shape();
  static const int kMoonShapeFieldNumber = 13;
  float moon_shape() const;
  void set_moon_shape(float value);

  // float sun_rise = 14;
  void clear_sun_rise();
  static const int kSunRiseFieldNumber = 14;
  float sun_rise() const;
  void set_sun_rise(float value);

  // float sun_fall = 15;
  void clear_sun_fall();
  static const int kSunFallFieldNumber = 15;
  float sun_fall() const;
  void set_sun_fall(float value);

  // float wind_level = 16;
  void clear_wind_level();
  static const int kWindLevelFieldNumber = 16;
  float wind_level() const;
  void set_wind_level(float value);

  // float typhoon_flag = 17;
  void clear_typhoon_flag();
  static const int kTyphoonFlagFieldNumber = 17;
  float typhoon_flag() const;
  void set_typhoon_flag(float value);

  // float typhoon_level = 18;
  void clear_typhoon_level();
  static const int kTyphoonLevelFieldNumber = 18;
  float typhoon_level() const;
  void set_typhoon_level(float value);

  // float ice_level = 21;
  void clear_ice_level();
  static const int kIceLevelFieldNumber = 21;
  float ice_level() const;
  void set_ice_level(float value);

  // float meteor_flag = 19;
  void clear_meteor_flag();
  static const int kMeteorFlagFieldNumber = 19;
  float meteor_flag() const;
  void set_meteor_flag(float value);

  // float meteor_level = 20;
  void clear_meteor_level();
  static const int kMeteorLevelFieldNumber = 20;
  float meteor_level() const;
  void set_meteor_level(float value);

  // @@protoc_insertion_point(class_scope:NetProto.SpaceWeatherSee)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NetProto::MsgHead* head_;
  float sunshine_level_;
  float cloud_level_;
  float rain_flag_;
  float rain_level_;
  float snow_level_;
  float hail_level_;
  float thunder_level_;
  float moon_wanes_;
  float moon_shape_;
  float sun_rise_;
  float sun_fall_;
  float wind_level_;
  float typhoon_flag_;
  float typhoon_level_;
  float ice_level_;
  float meteor_flag_;
  float meteor_level_;
  mutable int _cached_size_;
  friend struct protobuf_weather_5fdimension_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpaceWeatherHeard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.SpaceWeatherHeard) */ {
 public:
  SpaceWeatherHeard();
  virtual ~SpaceWeatherHeard();

  SpaceWeatherHeard(const SpaceWeatherHeard& from);

  inline SpaceWeatherHeard& operator=(const SpaceWeatherHeard& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpaceWeatherHeard& default_instance();

  static inline const SpaceWeatherHeard* internal_default_instance() {
    return reinterpret_cast<const SpaceWeatherHeard*>(
               &_SpaceWeatherHeard_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SpaceWeatherHeard* other);

  // implements Message ----------------------------------------------

  inline SpaceWeatherHeard* New() const PROTOBUF_FINAL { return New(NULL); }

  SpaceWeatherHeard* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpaceWeatherHeard& from);
  void MergeFrom(const SpaceWeatherHeard& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpaceWeatherHeard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // float wind_level = 16;
  void clear_wind_level();
  static const int kWindLevelFieldNumber = 16;
  float wind_level() const;
  void set_wind_level(float value);

  // float rain_flag = 7;
  void clear_rain_flag();
  static const int kRainFlagFieldNumber = 7;
  float rain_flag() const;
  void set_rain_flag(float value);

  // float rain_level = 8;
  void clear_rain_level();
  static const int kRainLevelFieldNumber = 8;
  float rain_level() const;
  void set_rain_level(float value);

  // float hail_level = 10;
  void clear_hail_level();
  static const int kHailLevelFieldNumber = 10;
  float hail_level() const;
  void set_hail_level(float value);

  // float thunder_level = 11;
  void clear_thunder_level();
  static const int kThunderLevelFieldNumber = 11;
  float thunder_level() const;
  void set_thunder_level(float value);

  // @@protoc_insertion_point(class_scope:NetProto.SpaceWeatherHeard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NetProto::MsgHead* head_;
  float wind_level_;
  float rain_flag_;
  float rain_level_;
  float hail_level_;
  float thunder_level_;
  mutable int _cached_size_;
  friend struct protobuf_weather_5fdimension_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpaceWeatherFeel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.SpaceWeatherFeel) */ {
 public:
  SpaceWeatherFeel();
  virtual ~SpaceWeatherFeel();

  SpaceWeatherFeel(const SpaceWeatherFeel& from);

  inline SpaceWeatherFeel& operator=(const SpaceWeatherFeel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpaceWeatherFeel& default_instance();

  static inline const SpaceWeatherFeel* internal_default_instance() {
    return reinterpret_cast<const SpaceWeatherFeel*>(
               &_SpaceWeatherFeel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SpaceWeatherFeel* other);

  // implements Message ----------------------------------------------

  inline SpaceWeatherFeel* New() const PROTOBUF_FINAL { return New(NULL); }

  SpaceWeatherFeel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpaceWeatherFeel& from);
  void MergeFrom(const SpaceWeatherFeel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpaceWeatherFeel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NetProto.MsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::NetProto::MsgHead& head() const;
  ::NetProto::MsgHead* mutable_head();
  ::NetProto::MsgHead* release_head();
  void set_allocated_head(::NetProto::MsgHead* head);

  // float humidity_level = 23;
  void clear_humidity_level();
  static const int kHumidityLevelFieldNumber = 23;
  float humidity_level() const;
  void set_humidity_level(float value);

  // float temperature_level = 6;
  void clear_temperature_level();
  static const int kTemperatureLevelFieldNumber = 6;
  float temperature_level() const;
  void set_temperature_level(float value);

  // float warmwinter_flag = 22;
  void clear_warmwinter_flag();
  static const int kWarmwinterFlagFieldNumber = 22;
  float warmwinter_flag() const;
  void set_warmwinter_flag(float value);

  // @@protoc_insertion_point(class_scope:NetProto.SpaceWeatherFeel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NetProto::MsgHead* head_;
  float humidity_level_;
  float temperature_level_;
  float warmwinter_flag_;
  mutable int _cached_size_;
  friend struct protobuf_weather_5fdimension_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SpaceWeatherSee

// .NetProto.MsgHead head = 1;
inline bool SpaceWeatherSee::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void SpaceWeatherSee::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& SpaceWeatherSee::head() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* SpaceWeatherSee::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.SpaceWeatherSee.head)
  return head_;
}
inline ::NetProto::MsgHead* SpaceWeatherSee::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.SpaceWeatherSee.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void SpaceWeatherSee::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.SpaceWeatherSee.head)
}

// float sunshine_level = 2;
inline void SpaceWeatherSee::clear_sunshine_level() {
  sunshine_level_ = 0;
}
inline float SpaceWeatherSee::sunshine_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.sunshine_level)
  return sunshine_level_;
}
inline void SpaceWeatherSee::set_sunshine_level(float value) {
  
  sunshine_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.sunshine_level)
}

// float cloud_level = 5;
inline void SpaceWeatherSee::clear_cloud_level() {
  cloud_level_ = 0;
}
inline float SpaceWeatherSee::cloud_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.cloud_level)
  return cloud_level_;
}
inline void SpaceWeatherSee::set_cloud_level(float value) {
  
  cloud_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.cloud_level)
}

// float rain_flag = 7;
inline void SpaceWeatherSee::clear_rain_flag() {
  rain_flag_ = 0;
}
inline float SpaceWeatherSee::rain_flag() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.rain_flag)
  return rain_flag_;
}
inline void SpaceWeatherSee::set_rain_flag(float value) {
  
  rain_flag_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.rain_flag)
}

// float rain_level = 8;
inline void SpaceWeatherSee::clear_rain_level() {
  rain_level_ = 0;
}
inline float SpaceWeatherSee::rain_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.rain_level)
  return rain_level_;
}
inline void SpaceWeatherSee::set_rain_level(float value) {
  
  rain_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.rain_level)
}

// float hail_level = 10;
inline void SpaceWeatherSee::clear_hail_level() {
  hail_level_ = 0;
}
inline float SpaceWeatherSee::hail_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.hail_level)
  return hail_level_;
}
inline void SpaceWeatherSee::set_hail_level(float value) {
  
  hail_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.hail_level)
}

// float moon_wanes = 12;
inline void SpaceWeatherSee::clear_moon_wanes() {
  moon_wanes_ = 0;
}
inline float SpaceWeatherSee::moon_wanes() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.moon_wanes)
  return moon_wanes_;
}
inline void SpaceWeatherSee::set_moon_wanes(float value) {
  
  moon_wanes_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.moon_wanes)
}

// float moon_shape = 13;
inline void SpaceWeatherSee::clear_moon_shape() {
  moon_shape_ = 0;
}
inline float SpaceWeatherSee::moon_shape() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.moon_shape)
  return moon_shape_;
}
inline void SpaceWeatherSee::set_moon_shape(float value) {
  
  moon_shape_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.moon_shape)
}

// float thunder_level = 11;
inline void SpaceWeatherSee::clear_thunder_level() {
  thunder_level_ = 0;
}
inline float SpaceWeatherSee::thunder_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.thunder_level)
  return thunder_level_;
}
inline void SpaceWeatherSee::set_thunder_level(float value) {
  
  thunder_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.thunder_level)
}

// float snow_level = 9;
inline void SpaceWeatherSee::clear_snow_level() {
  snow_level_ = 0;
}
inline float SpaceWeatherSee::snow_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.snow_level)
  return snow_level_;
}
inline void SpaceWeatherSee::set_snow_level(float value) {
  
  snow_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.snow_level)
}

// float sun_rise = 14;
inline void SpaceWeatherSee::clear_sun_rise() {
  sun_rise_ = 0;
}
inline float SpaceWeatherSee::sun_rise() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.sun_rise)
  return sun_rise_;
}
inline void SpaceWeatherSee::set_sun_rise(float value) {
  
  sun_rise_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.sun_rise)
}

// float sun_fall = 15;
inline void SpaceWeatherSee::clear_sun_fall() {
  sun_fall_ = 0;
}
inline float SpaceWeatherSee::sun_fall() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.sun_fall)
  return sun_fall_;
}
inline void SpaceWeatherSee::set_sun_fall(float value) {
  
  sun_fall_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.sun_fall)
}

// float wind_level = 16;
inline void SpaceWeatherSee::clear_wind_level() {
  wind_level_ = 0;
}
inline float SpaceWeatherSee::wind_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.wind_level)
  return wind_level_;
}
inline void SpaceWeatherSee::set_wind_level(float value) {
  
  wind_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.wind_level)
}

// float typhoon_flag = 17;
inline void SpaceWeatherSee::clear_typhoon_flag() {
  typhoon_flag_ = 0;
}
inline float SpaceWeatherSee::typhoon_flag() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.typhoon_flag)
  return typhoon_flag_;
}
inline void SpaceWeatherSee::set_typhoon_flag(float value) {
  
  typhoon_flag_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.typhoon_flag)
}

// float typhoon_level = 18;
inline void SpaceWeatherSee::clear_typhoon_level() {
  typhoon_level_ = 0;
}
inline float SpaceWeatherSee::typhoon_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.typhoon_level)
  return typhoon_level_;
}
inline void SpaceWeatherSee::set_typhoon_level(float value) {
  
  typhoon_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.typhoon_level)
}

// float meteor_flag = 19;
inline void SpaceWeatherSee::clear_meteor_flag() {
  meteor_flag_ = 0;
}
inline float SpaceWeatherSee::meteor_flag() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.meteor_flag)
  return meteor_flag_;
}
inline void SpaceWeatherSee::set_meteor_flag(float value) {
  
  meteor_flag_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.meteor_flag)
}

// float meteor_level = 20;
inline void SpaceWeatherSee::clear_meteor_level() {
  meteor_level_ = 0;
}
inline float SpaceWeatherSee::meteor_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.meteor_level)
  return meteor_level_;
}
inline void SpaceWeatherSee::set_meteor_level(float value) {
  
  meteor_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.meteor_level)
}

// float ice_level = 21;
inline void SpaceWeatherSee::clear_ice_level() {
  ice_level_ = 0;
}
inline float SpaceWeatherSee::ice_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherSee.ice_level)
  return ice_level_;
}
inline void SpaceWeatherSee::set_ice_level(float value) {
  
  ice_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherSee.ice_level)
}

// -------------------------------------------------------------------

// SpaceWeatherHeard

// .NetProto.MsgHead head = 1;
inline bool SpaceWeatherHeard::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void SpaceWeatherHeard::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& SpaceWeatherHeard::head() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherHeard.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* SpaceWeatherHeard::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.SpaceWeatherHeard.head)
  return head_;
}
inline ::NetProto::MsgHead* SpaceWeatherHeard::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.SpaceWeatherHeard.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void SpaceWeatherHeard::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.SpaceWeatherHeard.head)
}

// float rain_flag = 7;
inline void SpaceWeatherHeard::clear_rain_flag() {
  rain_flag_ = 0;
}
inline float SpaceWeatherHeard::rain_flag() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherHeard.rain_flag)
  return rain_flag_;
}
inline void SpaceWeatherHeard::set_rain_flag(float value) {
  
  rain_flag_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherHeard.rain_flag)
}

// float rain_level = 8;
inline void SpaceWeatherHeard::clear_rain_level() {
  rain_level_ = 0;
}
inline float SpaceWeatherHeard::rain_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherHeard.rain_level)
  return rain_level_;
}
inline void SpaceWeatherHeard::set_rain_level(float value) {
  
  rain_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherHeard.rain_level)
}

// float hail_level = 10;
inline void SpaceWeatherHeard::clear_hail_level() {
  hail_level_ = 0;
}
inline float SpaceWeatherHeard::hail_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherHeard.hail_level)
  return hail_level_;
}
inline void SpaceWeatherHeard::set_hail_level(float value) {
  
  hail_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherHeard.hail_level)
}

// float thunder_level = 11;
inline void SpaceWeatherHeard::clear_thunder_level() {
  thunder_level_ = 0;
}
inline float SpaceWeatherHeard::thunder_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherHeard.thunder_level)
  return thunder_level_;
}
inline void SpaceWeatherHeard::set_thunder_level(float value) {
  
  thunder_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherHeard.thunder_level)
}

// float wind_level = 16;
inline void SpaceWeatherHeard::clear_wind_level() {
  wind_level_ = 0;
}
inline float SpaceWeatherHeard::wind_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherHeard.wind_level)
  return wind_level_;
}
inline void SpaceWeatherHeard::set_wind_level(float value) {
  
  wind_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherHeard.wind_level)
}

// -------------------------------------------------------------------

// SpaceWeatherFeel

// .NetProto.MsgHead head = 1;
inline bool SpaceWeatherFeel::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void SpaceWeatherFeel::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::NetProto::MsgHead& SpaceWeatherFeel::head() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherFeel.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
inline ::NetProto::MsgHead* SpaceWeatherFeel::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.SpaceWeatherFeel.head)
  return head_;
}
inline ::NetProto::MsgHead* SpaceWeatherFeel::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.SpaceWeatherFeel.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void SpaceWeatherFeel::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.SpaceWeatherFeel.head)
}

// float temperature_level = 6;
inline void SpaceWeatherFeel::clear_temperature_level() {
  temperature_level_ = 0;
}
inline float SpaceWeatherFeel::temperature_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherFeel.temperature_level)
  return temperature_level_;
}
inline void SpaceWeatherFeel::set_temperature_level(float value) {
  
  temperature_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherFeel.temperature_level)
}

// float warmwinter_flag = 22;
inline void SpaceWeatherFeel::clear_warmwinter_flag() {
  warmwinter_flag_ = 0;
}
inline float SpaceWeatherFeel::warmwinter_flag() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherFeel.warmwinter_flag)
  return warmwinter_flag_;
}
inline void SpaceWeatherFeel::set_warmwinter_flag(float value) {
  
  warmwinter_flag_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherFeel.warmwinter_flag)
}

// float humidity_level = 23;
inline void SpaceWeatherFeel::clear_humidity_level() {
  humidity_level_ = 0;
}
inline float SpaceWeatherFeel::humidity_level() const {
  // @@protoc_insertion_point(field_get:NetProto.SpaceWeatherFeel.humidity_level)
  return humidity_level_;
}
inline void SpaceWeatherFeel::set_humidity_level(float value) {
  
  humidity_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SpaceWeatherFeel.humidity_level)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace NetProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_weather_5fdimension_2eproto__INCLUDED
