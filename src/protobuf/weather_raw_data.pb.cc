// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weather_raw_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "weather_raw_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
class WeatherRawDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeatherRawData> {
} _WeatherRawData_default_instance_;

namespace protobuf_weather_5fraw_5fdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, sunshine_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, sun_angle_elevation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, sun_angle_azimuth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, cloud_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, temperature_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, rain_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, rain_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, snow_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, hail_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, thunder_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, moon_wanes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, moon_shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, sun_rise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, sun_fall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, wind_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, typhoon_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, typhoon_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, meteor_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, meteor_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, ice_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, warmwinter_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherRawData, humidity_level_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(WeatherRawData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeatherRawData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "weather_raw_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _WeatherRawData_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::NetProto::protobuf_msg_5fhead_2eproto::InitDefaults();
  _WeatherRawData_default_instance_.DefaultConstruct();
  _WeatherRawData_default_instance_.get_mutable()->head_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026weather_raw_data.proto\022\010NetProto\032\016msg_"
      "head.proto\"\223\004\n\016WeatherRawData\022\037\n\004head\030\001 "
      "\001(\0132\021.NetProto.MsgHead\022\026\n\016sunshine_level"
      "\030\002 \001(\002\022\033\n\023sun_angle_elevation\030\003 \001(\002\022\031\n\021s"
      "un_angle_azimuth\030\004 \001(\002\022\023\n\013cloud_level\030\005 "
      "\001(\002\022\031\n\021temperature_level\030\006 \001(\002\022\021\n\train_f"
      "lag\030\007 \001(\002\022\022\n\nrain_level\030\010 \001(\002\022\022\n\nsnow_le"
      "vel\030\t \001(\002\022\022\n\nhail_level\030\n \001(\002\022\025\n\rthunder"
      "_level\030\013 \001(\002\022\022\n\nmoon_wanes\030\014 \001(\002\022\022\n\nmoon"
      "_shape\030\r \001(\002\022\020\n\010sun_rise\030\016 \001(\002\022\020\n\010sun_fa"
      "ll\030\017 \001(\002\022\022\n\nwind_level\030\020 \001(\002\022\024\n\014typhoon_"
      "flag\030\021 \001(\002\022\025\n\rtyphoon_level\030\022 \001(\002\022\023\n\013met"
      "eor_flag\030\023 \001(\002\022\024\n\014meteor_level\030\024 \001(\002\022\021\n\t"
      "ice_level\030\025 \001(\002\022\027\n\017warmwinter_flag\030\026 \001(\002"
      "\022\026\n\016humidity_level\030\027 \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 592);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "weather_raw_data.proto", &protobuf_RegisterTypes);
  ::NetProto::protobuf_msg_5fhead_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_weather_5fraw_5fdata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeatherRawData::kHeadFieldNumber;
const int WeatherRawData::kSunshineLevelFieldNumber;
const int WeatherRawData::kSunAngleElevationFieldNumber;
const int WeatherRawData::kSunAngleAzimuthFieldNumber;
const int WeatherRawData::kCloudLevelFieldNumber;
const int WeatherRawData::kTemperatureLevelFieldNumber;
const int WeatherRawData::kRainFlagFieldNumber;
const int WeatherRawData::kRainLevelFieldNumber;
const int WeatherRawData::kSnowLevelFieldNumber;
const int WeatherRawData::kHailLevelFieldNumber;
const int WeatherRawData::kThunderLevelFieldNumber;
const int WeatherRawData::kMoonWanesFieldNumber;
const int WeatherRawData::kMoonShapeFieldNumber;
const int WeatherRawData::kSunRiseFieldNumber;
const int WeatherRawData::kSunFallFieldNumber;
const int WeatherRawData::kWindLevelFieldNumber;
const int WeatherRawData::kTyphoonFlagFieldNumber;
const int WeatherRawData::kTyphoonLevelFieldNumber;
const int WeatherRawData::kMeteorFlagFieldNumber;
const int WeatherRawData::kMeteorLevelFieldNumber;
const int WeatherRawData::kIceLevelFieldNumber;
const int WeatherRawData::kWarmwinterFlagFieldNumber;
const int WeatherRawData::kHumidityLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeatherRawData::WeatherRawData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_weather_5fraw_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.WeatherRawData)
}
WeatherRawData::WeatherRawData(const WeatherRawData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::NetProto::MsgHead(*from.head_);
  } else {
    head_ = NULL;
  }
  ::memcpy(&sunshine_level_, &from.sunshine_level_,
    reinterpret_cast<char*>(&humidity_level_) -
    reinterpret_cast<char*>(&sunshine_level_) + sizeof(humidity_level_));
  // @@protoc_insertion_point(copy_constructor:NetProto.WeatherRawData)
}

void WeatherRawData::SharedCtor() {
  ::memset(&head_, 0, reinterpret_cast<char*>(&humidity_level_) -
    reinterpret_cast<char*>(&head_) + sizeof(humidity_level_));
  _cached_size_ = 0;
}

WeatherRawData::~WeatherRawData() {
  // @@protoc_insertion_point(destructor:NetProto.WeatherRawData)
  SharedDtor();
}

void WeatherRawData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void WeatherRawData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherRawData::descriptor() {
  protobuf_weather_5fraw_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fraw_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeatherRawData& WeatherRawData::default_instance() {
  protobuf_weather_5fraw_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeatherRawData* WeatherRawData::New(::google::protobuf::Arena* arena) const {
  WeatherRawData* n = new WeatherRawData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeatherRawData::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.WeatherRawData)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  ::memset(&sunshine_level_, 0, reinterpret_cast<char*>(&humidity_level_) -
    reinterpret_cast<char*>(&sunshine_level_) + sizeof(humidity_level_));
}

bool WeatherRawData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.WeatherRawData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sunshine_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sunshine_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sun_angle_elevation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sun_angle_elevation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sun_angle_azimuth = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sun_angle_azimuth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cloud_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cloud_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float temperature_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rain_flag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rain_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rain_level = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rain_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float snow_level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &snow_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hail_level = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hail_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float thunder_level = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thunder_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float moon_wanes = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moon_wanes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float moon_shape = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moon_shape_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sun_rise = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sun_rise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sun_fall = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sun_fall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wind_level = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wind_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float typhoon_flag = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &typhoon_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float typhoon_level = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &typhoon_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float meteor_flag = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &meteor_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float meteor_level = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &meteor_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ice_level = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ice_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float warmwinter_flag = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &warmwinter_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float humidity_level = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &humidity_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.WeatherRawData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.WeatherRawData)
  return false;
#undef DO_
}

void WeatherRawData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.WeatherRawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // float sunshine_level = 2;
  if (this->sunshine_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sunshine_level(), output);
  }

  // float sun_angle_elevation = 3;
  if (this->sun_angle_elevation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sun_angle_elevation(), output);
  }

  // float sun_angle_azimuth = 4;
  if (this->sun_angle_azimuth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sun_angle_azimuth(), output);
  }

  // float cloud_level = 5;
  if (this->cloud_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cloud_level(), output);
  }

  // float temperature_level = 6;
  if (this->temperature_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->temperature_level(), output);
  }

  // float rain_flag = 7;
  if (this->rain_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rain_flag(), output);
  }

  // float rain_level = 8;
  if (this->rain_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->rain_level(), output);
  }

  // float snow_level = 9;
  if (this->snow_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->snow_level(), output);
  }

  // float hail_level = 10;
  if (this->hail_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->hail_level(), output);
  }

  // float thunder_level = 11;
  if (this->thunder_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->thunder_level(), output);
  }

  // float moon_wanes = 12;
  if (this->moon_wanes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->moon_wanes(), output);
  }

  // float moon_shape = 13;
  if (this->moon_shape() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->moon_shape(), output);
  }

  // float sun_rise = 14;
  if (this->sun_rise() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->sun_rise(), output);
  }

  // float sun_fall = 15;
  if (this->sun_fall() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->sun_fall(), output);
  }

  // float wind_level = 16;
  if (this->wind_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->wind_level(), output);
  }

  // float typhoon_flag = 17;
  if (this->typhoon_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->typhoon_flag(), output);
  }

  // float typhoon_level = 18;
  if (this->typhoon_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->typhoon_level(), output);
  }

  // float meteor_flag = 19;
  if (this->meteor_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->meteor_flag(), output);
  }

  // float meteor_level = 20;
  if (this->meteor_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->meteor_level(), output);
  }

  // float ice_level = 21;
  if (this->ice_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->ice_level(), output);
  }

  // float warmwinter_flag = 22;
  if (this->warmwinter_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->warmwinter_flag(), output);
  }

  // float humidity_level = 23;
  if (this->humidity_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->humidity_level(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.WeatherRawData)
}

::google::protobuf::uint8* WeatherRawData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.WeatherRawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // float sunshine_level = 2;
  if (this->sunshine_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sunshine_level(), target);
  }

  // float sun_angle_elevation = 3;
  if (this->sun_angle_elevation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sun_angle_elevation(), target);
  }

  // float sun_angle_azimuth = 4;
  if (this->sun_angle_azimuth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sun_angle_azimuth(), target);
  }

  // float cloud_level = 5;
  if (this->cloud_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cloud_level(), target);
  }

  // float temperature_level = 6;
  if (this->temperature_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->temperature_level(), target);
  }

  // float rain_flag = 7;
  if (this->rain_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rain_flag(), target);
  }

  // float rain_level = 8;
  if (this->rain_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->rain_level(), target);
  }

  // float snow_level = 9;
  if (this->snow_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->snow_level(), target);
  }

  // float hail_level = 10;
  if (this->hail_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->hail_level(), target);
  }

  // float thunder_level = 11;
  if (this->thunder_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->thunder_level(), target);
  }

  // float moon_wanes = 12;
  if (this->moon_wanes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->moon_wanes(), target);
  }

  // float moon_shape = 13;
  if (this->moon_shape() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->moon_shape(), target);
  }

  // float sun_rise = 14;
  if (this->sun_rise() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->sun_rise(), target);
  }

  // float sun_fall = 15;
  if (this->sun_fall() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->sun_fall(), target);
  }

  // float wind_level = 16;
  if (this->wind_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->wind_level(), target);
  }

  // float typhoon_flag = 17;
  if (this->typhoon_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->typhoon_flag(), target);
  }

  // float typhoon_level = 18;
  if (this->typhoon_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->typhoon_level(), target);
  }

  // float meteor_flag = 19;
  if (this->meteor_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->meteor_flag(), target);
  }

  // float meteor_level = 20;
  if (this->meteor_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->meteor_level(), target);
  }

  // float ice_level = 21;
  if (this->ice_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->ice_level(), target);
  }

  // float warmwinter_flag = 22;
  if (this->warmwinter_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->warmwinter_flag(), target);
  }

  // float humidity_level = 23;
  if (this->humidity_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->humidity_level(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.WeatherRawData)
  return target;
}

size_t WeatherRawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.WeatherRawData)
  size_t total_size = 0;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // float sunshine_level = 2;
  if (this->sunshine_level() != 0) {
    total_size += 1 + 4;
  }

  // float sun_angle_elevation = 3;
  if (this->sun_angle_elevation() != 0) {
    total_size += 1 + 4;
  }

  // float sun_angle_azimuth = 4;
  if (this->sun_angle_azimuth() != 0) {
    total_size += 1 + 4;
  }

  // float cloud_level = 5;
  if (this->cloud_level() != 0) {
    total_size += 1 + 4;
  }

  // float temperature_level = 6;
  if (this->temperature_level() != 0) {
    total_size += 1 + 4;
  }

  // float rain_flag = 7;
  if (this->rain_flag() != 0) {
    total_size += 1 + 4;
  }

  // float rain_level = 8;
  if (this->rain_level() != 0) {
    total_size += 1 + 4;
  }

  // float snow_level = 9;
  if (this->snow_level() != 0) {
    total_size += 1 + 4;
  }

  // float hail_level = 10;
  if (this->hail_level() != 0) {
    total_size += 1 + 4;
  }

  // float thunder_level = 11;
  if (this->thunder_level() != 0) {
    total_size += 1 + 4;
  }

  // float moon_wanes = 12;
  if (this->moon_wanes() != 0) {
    total_size += 1 + 4;
  }

  // float moon_shape = 13;
  if (this->moon_shape() != 0) {
    total_size += 1 + 4;
  }

  // float sun_rise = 14;
  if (this->sun_rise() != 0) {
    total_size += 1 + 4;
  }

  // float sun_fall = 15;
  if (this->sun_fall() != 0) {
    total_size += 1 + 4;
  }

  // float wind_level = 16;
  if (this->wind_level() != 0) {
    total_size += 2 + 4;
  }

  // float typhoon_flag = 17;
  if (this->typhoon_flag() != 0) {
    total_size += 2 + 4;
  }

  // float typhoon_level = 18;
  if (this->typhoon_level() != 0) {
    total_size += 2 + 4;
  }

  // float meteor_flag = 19;
  if (this->meteor_flag() != 0) {
    total_size += 2 + 4;
  }

  // float meteor_level = 20;
  if (this->meteor_level() != 0) {
    total_size += 2 + 4;
  }

  // float ice_level = 21;
  if (this->ice_level() != 0) {
    total_size += 2 + 4;
  }

  // float warmwinter_flag = 22;
  if (this->warmwinter_flag() != 0) {
    total_size += 2 + 4;
  }

  // float humidity_level = 23;
  if (this->humidity_level() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherRawData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.WeatherRawData)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherRawData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeatherRawData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.WeatherRawData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.WeatherRawData)
    MergeFrom(*source);
  }
}

void WeatherRawData::MergeFrom(const WeatherRawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.WeatherRawData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::NetProto::MsgHead::MergeFrom(from.head());
  }
  if (from.sunshine_level() != 0) {
    set_sunshine_level(from.sunshine_level());
  }
  if (from.sun_angle_elevation() != 0) {
    set_sun_angle_elevation(from.sun_angle_elevation());
  }
  if (from.sun_angle_azimuth() != 0) {
    set_sun_angle_azimuth(from.sun_angle_azimuth());
  }
  if (from.cloud_level() != 0) {
    set_cloud_level(from.cloud_level());
  }
  if (from.temperature_level() != 0) {
    set_temperature_level(from.temperature_level());
  }
  if (from.rain_flag() != 0) {
    set_rain_flag(from.rain_flag());
  }
  if (from.rain_level() != 0) {
    set_rain_level(from.rain_level());
  }
  if (from.snow_level() != 0) {
    set_snow_level(from.snow_level());
  }
  if (from.hail_level() != 0) {
    set_hail_level(from.hail_level());
  }
  if (from.thunder_level() != 0) {
    set_thunder_level(from.thunder_level());
  }
  if (from.moon_wanes() != 0) {
    set_moon_wanes(from.moon_wanes());
  }
  if (from.moon_shape() != 0) {
    set_moon_shape(from.moon_shape());
  }
  if (from.sun_rise() != 0) {
    set_sun_rise(from.sun_rise());
  }
  if (from.sun_fall() != 0) {
    set_sun_fall(from.sun_fall());
  }
  if (from.wind_level() != 0) {
    set_wind_level(from.wind_level());
  }
  if (from.typhoon_flag() != 0) {
    set_typhoon_flag(from.typhoon_flag());
  }
  if (from.typhoon_level() != 0) {
    set_typhoon_level(from.typhoon_level());
  }
  if (from.meteor_flag() != 0) {
    set_meteor_flag(from.meteor_flag());
  }
  if (from.meteor_level() != 0) {
    set_meteor_level(from.meteor_level());
  }
  if (from.ice_level() != 0) {
    set_ice_level(from.ice_level());
  }
  if (from.warmwinter_flag() != 0) {
    set_warmwinter_flag(from.warmwinter_flag());
  }
  if (from.humidity_level() != 0) {
    set_humidity_level(from.humidity_level());
  }
}

void WeatherRawData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.WeatherRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherRawData::CopyFrom(const WeatherRawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.WeatherRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherRawData::IsInitialized() const {
  return true;
}

void WeatherRawData::Swap(WeatherRawData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeatherRawData::InternalSwap(WeatherRawData* other) {
  std::swap(head_, other->head_);
  std::swap(sunshine_level_, other->sunshine_level_);
  std::swap(sun_angle_elevation_, other->sun_angle_elevation_);
  std::swap(sun_angle_azimuth_, other->sun_angle_azimuth_);
  std::swap(cloud_level_, other->cloud_level_);
  std::swap(temperature_level_, other->temperature_level_);
  std::swap(rain_flag_, other->rain_flag_);
  std::swap(rain_level_, other->rain_level_);
  std::swap(snow_level_, other->snow_level_);
  std::swap(hail_level_, other->hail_level_);
  std::swap(thunder_level_, other->thunder_level_);
  std::swap(moon_wanes_, other->moon_wanes_);
  std::swap(moon_shape_, other->moon_shape_);
  std::swap(sun_rise_, other->sun_rise_);
  std::swap(sun_fall_, other->sun_fall_);
  std::swap(wind_level_, other->wind_level_);
  std::swap(typhoon_flag_, other->typhoon_flag_);
  std::swap(typhoon_level_, other->typhoon_level_);
  std::swap(meteor_flag_, other->meteor_flag_);
  std::swap(meteor_level_, other->meteor_level_);
  std::swap(ice_level_, other->ice_level_);
  std::swap(warmwinter_flag_, other->warmwinter_flag_);
  std::swap(humidity_level_, other->humidity_level_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeatherRawData::GetMetadata() const {
  protobuf_weather_5fraw_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weather_5fraw_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeatherRawData

// .NetProto.MsgHead head = 1;
bool WeatherRawData::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void WeatherRawData::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::NetProto::MsgHead& WeatherRawData::head() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* WeatherRawData::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.WeatherRawData.head)
  return head_;
}
::NetProto::MsgHead* WeatherRawData::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.WeatherRawData.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
void WeatherRawData::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.WeatherRawData.head)
}

// float sunshine_level = 2;
void WeatherRawData::clear_sunshine_level() {
  sunshine_level_ = 0;
}
float WeatherRawData::sunshine_level() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.sunshine_level)
  return sunshine_level_;
}
void WeatherRawData::set_sunshine_level(float value) {
  
  sunshine_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.sunshine_level)
}

// float sun_angle_elevation = 3;
void WeatherRawData::clear_sun_angle_elevation() {
  sun_angle_elevation_ = 0;
}
float WeatherRawData::sun_angle_elevation() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.sun_angle_elevation)
  return sun_angle_elevation_;
}
void WeatherRawData::set_sun_angle_elevation(float value) {
  
  sun_angle_elevation_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.sun_angle_elevation)
}

// float sun_angle_azimuth = 4;
void WeatherRawData::clear_sun_angle_azimuth() {
  sun_angle_azimuth_ = 0;
}
float WeatherRawData::sun_angle_azimuth() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.sun_angle_azimuth)
  return sun_angle_azimuth_;
}
void WeatherRawData::set_sun_angle_azimuth(float value) {
  
  sun_angle_azimuth_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.sun_angle_azimuth)
}

// float cloud_level = 5;
void WeatherRawData::clear_cloud_level() {
  cloud_level_ = 0;
}
float WeatherRawData::cloud_level() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.cloud_level)
  return cloud_level_;
}
void WeatherRawData::set_cloud_level(float value) {
  
  cloud_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.cloud_level)
}

// float temperature_level = 6;
void WeatherRawData::clear_temperature_level() {
  temperature_level_ = 0;
}
float WeatherRawData::temperature_level() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.temperature_level)
  return temperature_level_;
}
void WeatherRawData::set_temperature_level(float value) {
  
  temperature_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.temperature_level)
}

// float rain_flag = 7;
void WeatherRawData::clear_rain_flag() {
  rain_flag_ = 0;
}
float WeatherRawData::rain_flag() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.rain_flag)
  return rain_flag_;
}
void WeatherRawData::set_rain_flag(float value) {
  
  rain_flag_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.rain_flag)
}

// float rain_level = 8;
void WeatherRawData::clear_rain_level() {
  rain_level_ = 0;
}
float WeatherRawData::rain_level() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.rain_level)
  return rain_level_;
}
void WeatherRawData::set_rain_level(float value) {
  
  rain_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.rain_level)
}

// float snow_level = 9;
void WeatherRawData::clear_snow_level() {
  snow_level_ = 0;
}
float WeatherRawData::snow_level() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.snow_level)
  return snow_level_;
}
void WeatherRawData::set_snow_level(float value) {
  
  snow_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.snow_level)
}

// float hail_level = 10;
void WeatherRawData::clear_hail_level() {
  hail_level_ = 0;
}
float WeatherRawData::hail_level() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.hail_level)
  return hail_level_;
}
void WeatherRawData::set_hail_level(float value) {
  
  hail_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.hail_level)
}

// float thunder_level = 11;
void WeatherRawData::clear_thunder_level() {
  thunder_level_ = 0;
}
float WeatherRawData::thunder_level() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.thunder_level)
  return thunder_level_;
}
void WeatherRawData::set_thunder_level(float value) {
  
  thunder_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.thunder_level)
}

// float moon_wanes = 12;
void WeatherRawData::clear_moon_wanes() {
  moon_wanes_ = 0;
}
float WeatherRawData::moon_wanes() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.moon_wanes)
  return moon_wanes_;
}
void WeatherRawData::set_moon_wanes(float value) {
  
  moon_wanes_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.moon_wanes)
}

// float moon_shape = 13;
void WeatherRawData::clear_moon_shape() {
  moon_shape_ = 0;
}
float WeatherRawData::moon_shape() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.moon_shape)
  return moon_shape_;
}
void WeatherRawData::set_moon_shape(float value) {
  
  moon_shape_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.moon_shape)
}

// float sun_rise = 14;
void WeatherRawData::clear_sun_rise() {
  sun_rise_ = 0;
}
float WeatherRawData::sun_rise() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.sun_rise)
  return sun_rise_;
}
void WeatherRawData::set_sun_rise(float value) {
  
  sun_rise_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.sun_rise)
}

// float sun_fall = 15;
void WeatherRawData::clear_sun_fall() {
  sun_fall_ = 0;
}
float WeatherRawData::sun_fall() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.sun_fall)
  return sun_fall_;
}
void WeatherRawData::set_sun_fall(float value) {
  
  sun_fall_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.sun_fall)
}

// float wind_level = 16;
void WeatherRawData::clear_wind_level() {
  wind_level_ = 0;
}
float WeatherRawData::wind_level() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.wind_level)
  return wind_level_;
}
void WeatherRawData::set_wind_level(float value) {
  
  wind_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.wind_level)
}

// float typhoon_flag = 17;
void WeatherRawData::clear_typhoon_flag() {
  typhoon_flag_ = 0;
}
float WeatherRawData::typhoon_flag() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.typhoon_flag)
  return typhoon_flag_;
}
void WeatherRawData::set_typhoon_flag(float value) {
  
  typhoon_flag_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.typhoon_flag)
}

// float typhoon_level = 18;
void WeatherRawData::clear_typhoon_level() {
  typhoon_level_ = 0;
}
float WeatherRawData::typhoon_level() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.typhoon_level)
  return typhoon_level_;
}
void WeatherRawData::set_typhoon_level(float value) {
  
  typhoon_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.typhoon_level)
}

// float meteor_flag = 19;
void WeatherRawData::clear_meteor_flag() {
  meteor_flag_ = 0;
}
float WeatherRawData::meteor_flag() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.meteor_flag)
  return meteor_flag_;
}
void WeatherRawData::set_meteor_flag(float value) {
  
  meteor_flag_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.meteor_flag)
}

// float meteor_level = 20;
void WeatherRawData::clear_meteor_level() {
  meteor_level_ = 0;
}
float WeatherRawData::meteor_level() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.meteor_level)
  return meteor_level_;
}
void WeatherRawData::set_meteor_level(float value) {
  
  meteor_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.meteor_level)
}

// float ice_level = 21;
void WeatherRawData::clear_ice_level() {
  ice_level_ = 0;
}
float WeatherRawData::ice_level() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.ice_level)
  return ice_level_;
}
void WeatherRawData::set_ice_level(float value) {
  
  ice_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.ice_level)
}

// float warmwinter_flag = 22;
void WeatherRawData::clear_warmwinter_flag() {
  warmwinter_flag_ = 0;
}
float WeatherRawData::warmwinter_flag() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.warmwinter_flag)
  return warmwinter_flag_;
}
void WeatherRawData::set_warmwinter_flag(float value) {
  
  warmwinter_flag_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.warmwinter_flag)
}

// float humidity_level = 23;
void WeatherRawData::clear_humidity_level() {
  humidity_level_ = 0;
}
float WeatherRawData::humidity_level() const {
  // @@protoc_insertion_point(field_get:NetProto.WeatherRawData.humidity_level)
  return humidity_level_;
}
void WeatherRawData::set_humidity_level(float value) {
  
  humidity_level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.WeatherRawData.humidity_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
