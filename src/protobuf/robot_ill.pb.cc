// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_ill.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "robot_ill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProto {
class IllEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IllEvent> {
} _IllEvent_default_instance_;

namespace protobuf_robot_5fill_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IllEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IllEvent, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IllEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IllEvent, level_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(IllEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_IllEvent_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "robot_ill.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _IllEvent_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::NetProto::protobuf_msg_5fhead_2eproto::InitDefaults();
  _IllEvent_default_instance_.DefaultConstruct();
  _IllEvent_default_instance_.get_mutable()->head_ = const_cast< ::NetProto::MsgHead*>(
      ::NetProto::MsgHead::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017robot_ill.proto\022\010NetProto\032\016msg_head.pr"
      "oto\"o\n\010IllEvent\022\037\n\004head\030\001 \001(\0132\021.NetProto"
      ".MsgHead\022\037\n\004type\030\002 \001(\0162\021.NetProto.IllTyp"
      "e\022!\n\005level\030\003 \001(\0162\022.NetProto.IllLevel*I\n\007"
      "IllType\022\017\n\013ILL_UNKNOWN\020\000\022\017\n\013ILL_STOMACH\020"
      "\001\022\r\n\tILL_TOOTH\020\002\022\r\n\tILL_FEVER\020\003*O\n\010IllLe"
      "vel\022\021\n\rLEVEL_UNKNOWN\020\000\022\016\n\nLEVEL_NONE\020\001\022\017"
      "\n\013LEVEL_LIGHT\020\002\022\017\n\013LEVEL_HEAVY\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robot_ill.proto", &protobuf_RegisterTypes);
  ::NetProto::protobuf_msg_5fhead_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_robot_5fill_2eproto

const ::google::protobuf::EnumDescriptor* IllType_descriptor() {
  protobuf_robot_5fill_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_5fill_2eproto::file_level_enum_descriptors[0];
}
bool IllType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IllLevel_descriptor() {
  protobuf_robot_5fill_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_5fill_2eproto::file_level_enum_descriptors[1];
}
bool IllLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IllEvent::kHeadFieldNumber;
const int IllEvent::kTypeFieldNumber;
const int IllEvent::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IllEvent::IllEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_robot_5fill_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetProto.IllEvent)
}
IllEvent::IllEvent(const IllEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::NetProto::MsgHead(*from.head_);
  } else {
    head_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&type_) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:NetProto.IllEvent)
}

void IllEvent::SharedCtor() {
  ::memset(&head_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&head_) + sizeof(level_));
  _cached_size_ = 0;
}

IllEvent::~IllEvent() {
  // @@protoc_insertion_point(destructor:NetProto.IllEvent)
  SharedDtor();
}

void IllEvent::SharedDtor() {
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void IllEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IllEvent::descriptor() {
  protobuf_robot_5fill_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_5fill_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IllEvent& IllEvent::default_instance() {
  protobuf_robot_5fill_2eproto::InitDefaults();
  return *internal_default_instance();
}

IllEvent* IllEvent::New(::google::protobuf::Arena* arena) const {
  IllEvent* n = new IllEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IllEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:NetProto.IllEvent)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  ::memset(&type_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&type_) + sizeof(level_));
}

bool IllEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetProto.IllEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NetProto.MsgHead head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.IllType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NetProto::IllType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetProto.IllLevel level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::NetProto::IllLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetProto.IllEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetProto.IllEvent)
  return false;
#undef DO_
}

void IllEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetProto.IllEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // .NetProto.IllType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .NetProto.IllLevel level = 3;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->level(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetProto.IllEvent)
}

::google::protobuf::uint8* IllEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetProto.IllEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // .NetProto.IllType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .NetProto.IllLevel level = 3;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->level(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetProto.IllEvent)
  return target;
}

size_t IllEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetProto.IllEvent)
  size_t total_size = 0;

  // .NetProto.MsgHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // .NetProto.IllType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .NetProto.IllLevel level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IllEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetProto.IllEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const IllEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IllEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetProto.IllEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetProto.IllEvent)
    MergeFrom(*source);
  }
}

void IllEvent::MergeFrom(const IllEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetProto.IllEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::NetProto::MsgHead::MergeFrom(from.head());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void IllEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetProto.IllEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IllEvent::CopyFrom(const IllEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetProto.IllEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IllEvent::IsInitialized() const {
  return true;
}

void IllEvent::Swap(IllEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IllEvent::InternalSwap(IllEvent* other) {
  std::swap(head_, other->head_);
  std::swap(type_, other->type_);
  std::swap(level_, other->level_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IllEvent::GetMetadata() const {
  protobuf_robot_5fill_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_5fill_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IllEvent

// .NetProto.MsgHead head = 1;
bool IllEvent::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void IllEvent::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::NetProto::MsgHead& IllEvent::head() const {
  // @@protoc_insertion_point(field_get:NetProto.IllEvent.head)
  return head_ != NULL ? *head_
                         : *::NetProto::MsgHead::internal_default_instance();
}
::NetProto::MsgHead* IllEvent::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::NetProto::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.IllEvent.head)
  return head_;
}
::NetProto::MsgHead* IllEvent::release_head() {
  // @@protoc_insertion_point(field_release:NetProto.IllEvent.head)
  
  ::NetProto::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
void IllEvent::set_allocated_head(::NetProto::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.IllEvent.head)
}

// .NetProto.IllType type = 2;
void IllEvent::clear_type() {
  type_ = 0;
}
::NetProto::IllType IllEvent::type() const {
  // @@protoc_insertion_point(field_get:NetProto.IllEvent.type)
  return static_cast< ::NetProto::IllType >(type_);
}
void IllEvent::set_type(::NetProto::IllType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.IllEvent.type)
}

// .NetProto.IllLevel level = 3;
void IllEvent::clear_level() {
  level_ = 0;
}
::NetProto::IllLevel IllEvent::level() const {
  // @@protoc_insertion_point(field_get:NetProto.IllEvent.level)
  return static_cast< ::NetProto::IllLevel >(level_);
}
void IllEvent::set_level(::NetProto::IllLevel value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:NetProto.IllEvent.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NetProto

// @@protoc_insertion_point(global_scope)
