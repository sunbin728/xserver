// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: natural_action_status.proto

#ifndef PROTOBUF_natural_5faction_5fstatus_2eproto__INCLUDED
#define PROTOBUF_natural_5faction_5fstatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "obj_pos_relation.pb.h"
#include "my_proto.pb.h"
#include "role_status_event.pb.h"
// @@protoc_insertion_point(includes)
namespace NetProto {
class ObjPosRelation;
class ObjPosRelationDefaultTypeInternal;
extern ObjPosRelationDefaultTypeInternal _ObjPosRelation_default_instance_;
namespace Action {
namespace Status {
class ActStatus;
class ActStatusDefaultTypeInternal;
extern ActStatusDefaultTypeInternal _ActStatus_default_instance_;
class AllOpenStatus;
class AllOpenStatusDefaultTypeInternal;
extern AllOpenStatusDefaultTypeInternal _AllOpenStatus_default_instance_;
class AttrStatus;
class AttrStatusDefaultTypeInternal;
extern AttrStatusDefaultTypeInternal _AttrStatus_default_instance_;
class BurnStatus;
class BurnStatusDefaultTypeInternal;
extern BurnStatusDefaultTypeInternal _BurnStatus_default_instance_;
class ContainerStatus;
class ContainerStatusDefaultTypeInternal;
extern ContainerStatusDefaultTypeInternal _ContainerStatus_default_instance_;
class EmsComing;
class EmsComingDefaultTypeInternal;
extern EmsComingDefaultTypeInternal _EmsComing_default_instance_;
class FillAttr;
class FillAttrDefaultTypeInternal;
extern FillAttrDefaultTypeInternal _FillAttr_default_instance_;
class NaturalActionStatus;
class NaturalActionStatusDefaultTypeInternal;
extern NaturalActionStatusDefaultTypeInternal _NaturalActionStatus_default_instance_;
class NaturalActionStatusData;
class NaturalActionStatusDataDefaultTypeInternal;
extern NaturalActionStatusDataDefaultTypeInternal _NaturalActionStatusData_default_instance_;
class NotifyNaturalStatusChange;
class NotifyNaturalStatusChangeDefaultTypeInternal;
extern NotifyNaturalStatusChangeDefaultTypeInternal _NotifyNaturalStatusChange_default_instance_;
class OpenStatus;
class OpenStatusDefaultTypeInternal;
extern OpenStatusDefaultTypeInternal _OpenStatus_default_instance_;
class Pretend;
class PretendDefaultTypeInternal;
extern PretendDefaultTypeInternal _Pretend_default_instance_;
}  // namespace Status
}  // namespace Action
}  // namespace NetProto

namespace NetProto {
namespace Action {
namespace Status {

namespace protobuf_natural_5faction_5fstatus_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_natural_5faction_5fstatus_2eproto

enum AttrStatus_Attr {
  AttrStatus_Attr_COLOR = 0,
  AttrStatus_Attr_WEIGHT = 1,
  AttrStatus_Attr_TACTILE = 2,
  AttrStatus_Attr_SMELL = 3,
  AttrStatus_Attr_BUBBLE = 4,
  AttrStatus_Attr_VOICE = 5,
  AttrStatus_Attr_TEMPERATURE = 6,
  AttrStatus_Attr_TOTAL = 7,
  AttrStatus_Attr_SELF = 8,
  AttrStatus_Attr_AttrStatus_Attr_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AttrStatus_Attr_AttrStatus_Attr_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AttrStatus_Attr_IsValid(int value);
const AttrStatus_Attr AttrStatus_Attr_Attr_MIN = AttrStatus_Attr_COLOR;
const AttrStatus_Attr AttrStatus_Attr_Attr_MAX = AttrStatus_Attr_SELF;
const int AttrStatus_Attr_Attr_ARRAYSIZE = AttrStatus_Attr_Attr_MAX + 1;

const ::google::protobuf::EnumDescriptor* AttrStatus_Attr_descriptor();
inline const ::std::string& AttrStatus_Attr_Name(AttrStatus_Attr value) {
  return ::google::protobuf::internal::NameOfEnum(
    AttrStatus_Attr_descriptor(), value);
}
inline bool AttrStatus_Attr_Parse(
    const ::std::string& name, AttrStatus_Attr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AttrStatus_Attr>(
    AttrStatus_Attr_descriptor(), name, value);
}
enum OpenStatusType {
  OPENED = 0,
  CLOSED = 1,
  OpenStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OpenStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OpenStatusType_IsValid(int value);
const OpenStatusType OpenStatusType_MIN = OPENED;
const OpenStatusType OpenStatusType_MAX = CLOSED;
const int OpenStatusType_ARRAYSIZE = OpenStatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpenStatusType_descriptor();
inline const ::std::string& OpenStatusType_Name(OpenStatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpenStatusType_descriptor(), value);
}
inline bool OpenStatusType_Parse(
    const ::std::string& name, OpenStatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpenStatusType>(
    OpenStatusType_descriptor(), name, value);
}
enum ContainerStatusType {
  CS_OVERFLOW = 0,
  CS_FULL = 1,
  CS_EMPTY = 2,
  CS_PARTIAL = 3,
  ContainerStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ContainerStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ContainerStatusType_IsValid(int value);
const ContainerStatusType ContainerStatusType_MIN = CS_OVERFLOW;
const ContainerStatusType ContainerStatusType_MAX = CS_PARTIAL;
const int ContainerStatusType_ARRAYSIZE = ContainerStatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ContainerStatusType_descriptor();
inline const ::std::string& ContainerStatusType_Name(ContainerStatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ContainerStatusType_descriptor(), value);
}
inline bool ContainerStatusType_Parse(
    const ::std::string& name, ContainerStatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContainerStatusType>(
    ContainerStatusType_descriptor(), name, value);
}
enum FillAttrType {
  ONE_ONE = 0,
  ONE_TWO = 1,
  ONE_THIRD = 2,
  FillAttrType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FillAttrType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FillAttrType_IsValid(int value);
const FillAttrType FillAttrType_MIN = ONE_ONE;
const FillAttrType FillAttrType_MAX = ONE_THIRD;
const int FillAttrType_ARRAYSIZE = FillAttrType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillAttrType_descriptor();
inline const ::std::string& FillAttrType_Name(FillAttrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillAttrType_descriptor(), value);
}
inline bool FillAttrType_Parse(
    const ::std::string& name, FillAttrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillAttrType>(
    FillAttrType_descriptor(), name, value);
}
enum BurnStatusType {
  BURNNING = 0,
  WENT_OUT = 1,
  BurnStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BurnStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BurnStatusType_IsValid(int value);
const BurnStatusType BurnStatusType_MIN = BURNNING;
const BurnStatusType BurnStatusType_MAX = WENT_OUT;
const int BurnStatusType_ARRAYSIZE = BurnStatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BurnStatusType_descriptor();
inline const ::std::string& BurnStatusType_Name(BurnStatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BurnStatusType_descriptor(), value);
}
inline bool BurnStatusType_Parse(
    const ::std::string& name, BurnStatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BurnStatusType>(
    BurnStatusType_descriptor(), name, value);
}
enum NaturalActionStatusType {
  Unkown = 0,
  RELATION_POSITION = 1,
  STATUS_OPENNING = 3,
  STATUS_ACTION = 4,
  STATUS_CONTAINER = 5,
  ATTR_FILLING_WITH = 6,
  STATUS_BURNNING = 7,
  STATUS_ALL_OPENNING = 8,
  STATUS_ATTR = 9,
  STATUS_EMS = 20,
  STATUS_PRETEND = 21,
  NaturalActionStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NaturalActionStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NaturalActionStatusType_IsValid(int value);
const NaturalActionStatusType NaturalActionStatusType_MIN = Unkown;
const NaturalActionStatusType NaturalActionStatusType_MAX = STATUS_PRETEND;
const int NaturalActionStatusType_ARRAYSIZE = NaturalActionStatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NaturalActionStatusType_descriptor();
inline const ::std::string& NaturalActionStatusType_Name(NaturalActionStatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NaturalActionStatusType_descriptor(), value);
}
inline bool NaturalActionStatusType_Parse(
    const ::std::string& name, NaturalActionStatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NaturalActionStatusType>(
    NaturalActionStatusType_descriptor(), name, value);
}
// ===================================================================

class ActStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Action.Status.ActStatus) */ {
 public:
  ActStatus();
  virtual ~ActStatus();

  ActStatus(const ActStatus& from);

  inline ActStatus& operator=(const ActStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActStatus& default_instance();

  static inline const ActStatus* internal_default_instance() {
    return reinterpret_cast<const ActStatus*>(
               &_ActStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ActStatus* other);

  // implements Message ----------------------------------------------

  inline ActStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  ActStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActStatus& from);
  void MergeFrom(const ActStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string robot_id = 10;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 10;
  const ::std::string& robot_id() const;
  void set_robot_id(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_id(::std::string&& value);
  #endif
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  ::std::string* mutable_robot_id();
  ::std::string* release_robot_id();
  void set_allocated_robot_id(::std::string* robot_id);

  // string obj_id = 30;
  void clear_obj_id();
  static const int kObjIdFieldNumber = 30;
  const ::std::string& obj_id() const;
  void set_obj_id(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_id(::std::string&& value);
  #endif
  void set_obj_id(const char* value);
  void set_obj_id(const char* value, size_t size);
  ::std::string* mutable_obj_id();
  ::std::string* release_obj_id();
  void set_allocated_obj_id(::std::string* obj_id);

  // .NetProto.RoleStatusEvent type = 20;
  void clear_type();
  static const int kTypeFieldNumber = 20;
  ::NetProto::RoleStatusEvent type() const;
  void set_type(::NetProto::RoleStatusEvent value);

  // @@protoc_insertion_point(class_scope:NetProto.Action.Status.ActStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr robot_id_;
  ::google::protobuf::internal::ArenaStringPtr obj_id_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_natural_5faction_5fstatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpenStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Action.Status.OpenStatus) */ {
 public:
  OpenStatus();
  virtual ~OpenStatus();

  OpenStatus(const OpenStatus& from);

  inline OpenStatus& operator=(const OpenStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenStatus& default_instance();

  static inline const OpenStatus* internal_default_instance() {
    return reinterpret_cast<const OpenStatus*>(
               &_OpenStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(OpenStatus* other);

  // implements Message ----------------------------------------------

  inline OpenStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  OpenStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OpenStatus& from);
  void MergeFrom(const OpenStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OpenStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string obj_id = 10;
  void clear_obj_id();
  static const int kObjIdFieldNumber = 10;
  const ::std::string& obj_id() const;
  void set_obj_id(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_id(::std::string&& value);
  #endif
  void set_obj_id(const char* value);
  void set_obj_id(const char* value, size_t size);
  ::std::string* mutable_obj_id();
  ::std::string* release_obj_id();
  void set_allocated_obj_id(::std::string* obj_id);

  // string feel = 30;
  void clear_feel();
  static const int kFeelFieldNumber = 30;
  const ::std::string& feel() const;
  void set_feel(const ::std::string& value);
  #if LANG_CXX11
  void set_feel(::std::string&& value);
  #endif
  void set_feel(const char* value);
  void set_feel(const char* value, size_t size);
  ::std::string* mutable_feel();
  ::std::string* release_feel();
  void set_allocated_feel(::std::string* feel);

  // .NetProto.Action.Status.OpenStatusType type = 20;
  void clear_type();
  static const int kTypeFieldNumber = 20;
  ::NetProto::Action::Status::OpenStatusType type() const;
  void set_type(::NetProto::Action::Status::OpenStatusType value);

  // @@protoc_insertion_point(class_scope:NetProto.Action.Status.OpenStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr obj_id_;
  ::google::protobuf::internal::ArenaStringPtr feel_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_natural_5faction_5fstatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContainerStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Action.Status.ContainerStatus) */ {
 public:
  ContainerStatus();
  virtual ~ContainerStatus();

  ContainerStatus(const ContainerStatus& from);

  inline ContainerStatus& operator=(const ContainerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerStatus& default_instance();

  static inline const ContainerStatus* internal_default_instance() {
    return reinterpret_cast<const ContainerStatus*>(
               &_ContainerStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ContainerStatus* other);

  // implements Message ----------------------------------------------

  inline ContainerStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  ContainerStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ContainerStatus& from);
  void MergeFrom(const ContainerStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ContainerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string container_id = 10;
  void clear_container_id();
  static const int kContainerIdFieldNumber = 10;
  const ::std::string& container_id() const;
  void set_container_id(const ::std::string& value);
  #if LANG_CXX11
  void set_container_id(::std::string&& value);
  #endif
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  ::std::string* mutable_container_id();
  ::std::string* release_container_id();
  void set_allocated_container_id(::std::string* container_id);

  // uint32 type = 20;
  void clear_type();
  static const int kTypeFieldNumber = 20;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NetProto.Action.Status.ContainerStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr container_id_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct protobuf_natural_5faction_5fstatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FillAttr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Action.Status.FillAttr) */ {
 public:
  FillAttr();
  virtual ~FillAttr();

  FillAttr(const FillAttr& from);

  inline FillAttr& operator=(const FillAttr& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillAttr& default_instance();

  static inline const FillAttr* internal_default_instance() {
    return reinterpret_cast<const FillAttr*>(
               &_FillAttr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FillAttr* other);

  // implements Message ----------------------------------------------

  inline FillAttr* New() const PROTOBUF_FINAL { return New(NULL); }

  FillAttr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FillAttr& from);
  void MergeFrom(const FillAttr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FillAttr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string container_id = 10;
  void clear_container_id();
  static const int kContainerIdFieldNumber = 10;
  const ::std::string& container_id() const;
  void set_container_id(const ::std::string& value);
  #if LANG_CXX11
  void set_container_id(::std::string&& value);
  #endif
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  ::std::string* mutable_container_id();
  ::std::string* release_container_id();
  void set_allocated_container_id(::std::string* container_id);

  // string obj_id = 20;
  void clear_obj_id();
  static const int kObjIdFieldNumber = 20;
  const ::std::string& obj_id() const;
  void set_obj_id(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_id(::std::string&& value);
  #endif
  void set_obj_id(const char* value);
  void set_obj_id(const char* value, size_t size);
  ::std::string* mutable_obj_id();
  ::std::string* release_obj_id();
  void set_allocated_obj_id(::std::string* obj_id);

  // .NetProto.Action.Status.FillAttrType type = 30;
  void clear_type();
  static const int kTypeFieldNumber = 30;
  ::NetProto::Action::Status::FillAttrType type() const;
  void set_type(::NetProto::Action::Status::FillAttrType value);

  // @@protoc_insertion_point(class_scope:NetProto.Action.Status.FillAttr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr container_id_;
  ::google::protobuf::internal::ArenaStringPtr obj_id_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_natural_5faction_5fstatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BurnStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Action.Status.BurnStatus) */ {
 public:
  BurnStatus();
  virtual ~BurnStatus();

  BurnStatus(const BurnStatus& from);

  inline BurnStatus& operator=(const BurnStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BurnStatus& default_instance();

  static inline const BurnStatus* internal_default_instance() {
    return reinterpret_cast<const BurnStatus*>(
               &_BurnStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(BurnStatus* other);

  // implements Message ----------------------------------------------

  inline BurnStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  BurnStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BurnStatus& from);
  void MergeFrom(const BurnStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BurnStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string obj_id = 10;
  void clear_obj_id();
  static const int kObjIdFieldNumber = 10;
  const ::std::string& obj_id() const;
  void set_obj_id(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_id(::std::string&& value);
  #endif
  void set_obj_id(const char* value);
  void set_obj_id(const char* value, size_t size);
  ::std::string* mutable_obj_id();
  ::std::string* release_obj_id();
  void set_allocated_obj_id(::std::string* obj_id);

  // .NetProto.Action.Status.BurnStatusType type = 20;
  void clear_type();
  static const int kTypeFieldNumber = 20;
  ::NetProto::Action::Status::BurnStatusType type() const;
  void set_type(::NetProto::Action::Status::BurnStatusType value);

  // @@protoc_insertion_point(class_scope:NetProto.Action.Status.BurnStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr obj_id_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_natural_5faction_5fstatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllOpenStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Action.Status.AllOpenStatus) */ {
 public:
  AllOpenStatus();
  virtual ~AllOpenStatus();

  AllOpenStatus(const AllOpenStatus& from);

  inline AllOpenStatus& operator=(const AllOpenStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllOpenStatus& default_instance();

  static inline const AllOpenStatus* internal_default_instance() {
    return reinterpret_cast<const AllOpenStatus*>(
               &_AllOpenStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(AllOpenStatus* other);

  // implements Message ----------------------------------------------

  inline AllOpenStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  AllOpenStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AllOpenStatus& from);
  void MergeFrom(const AllOpenStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AllOpenStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string room_id = 10;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 10;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  #if LANG_CXX11
  void set_room_id(::std::string&& value);
  #endif
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // string abstract_id = 20;
  void clear_abstract_id();
  static const int kAbstractIdFieldNumber = 20;
  const ::std::string& abstract_id() const;
  void set_abstract_id(const ::std::string& value);
  #if LANG_CXX11
  void set_abstract_id(::std::string&& value);
  #endif
  void set_abstract_id(const char* value);
  void set_abstract_id(const char* value, size_t size);
  ::std::string* mutable_abstract_id();
  ::std::string* release_abstract_id();
  void set_allocated_abstract_id(::std::string* abstract_id);

  // .NetProto.Action.Status.OpenStatusType type = 30;
  void clear_type();
  static const int kTypeFieldNumber = 30;
  ::NetProto::Action::Status::OpenStatusType type() const;
  void set_type(::NetProto::Action::Status::OpenStatusType value);

  // @@protoc_insertion_point(class_scope:NetProto.Action.Status.AllOpenStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr room_id_;
  ::google::protobuf::internal::ArenaStringPtr abstract_id_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_natural_5faction_5fstatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttrStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Action.Status.AttrStatus) */ {
 public:
  AttrStatus();
  virtual ~AttrStatus();

  AttrStatus(const AttrStatus& from);

  inline AttrStatus& operator=(const AttrStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttrStatus& default_instance();

  static inline const AttrStatus* internal_default_instance() {
    return reinterpret_cast<const AttrStatus*>(
               &_AttrStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(AttrStatus* other);

  // implements Message ----------------------------------------------

  inline AttrStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  AttrStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AttrStatus& from);
  void MergeFrom(const AttrStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AttrStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AttrStatus_Attr Attr;
  static const Attr COLOR =
    AttrStatus_Attr_COLOR;
  static const Attr WEIGHT =
    AttrStatus_Attr_WEIGHT;
  static const Attr TACTILE =
    AttrStatus_Attr_TACTILE;
  static const Attr SMELL =
    AttrStatus_Attr_SMELL;
  static const Attr BUBBLE =
    AttrStatus_Attr_BUBBLE;
  static const Attr VOICE =
    AttrStatus_Attr_VOICE;
  static const Attr TEMPERATURE =
    AttrStatus_Attr_TEMPERATURE;
  static const Attr TOTAL =
    AttrStatus_Attr_TOTAL;
  static const Attr SELF =
    AttrStatus_Attr_SELF;
  static inline bool Attr_IsValid(int value) {
    return AttrStatus_Attr_IsValid(value);
  }
  static const Attr Attr_MIN =
    AttrStatus_Attr_Attr_MIN;
  static const Attr Attr_MAX =
    AttrStatus_Attr_Attr_MAX;
  static const int Attr_ARRAYSIZE =
    AttrStatus_Attr_Attr_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Attr_descriptor() {
    return AttrStatus_Attr_descriptor();
  }
  static inline const ::std::string& Attr_Name(Attr value) {
    return AttrStatus_Attr_Name(value);
  }
  static inline bool Attr_Parse(const ::std::string& name,
      Attr* value) {
    return AttrStatus_Attr_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string obj_id = 1;
  void clear_obj_id();
  static const int kObjIdFieldNumber = 1;
  const ::std::string& obj_id() const;
  void set_obj_id(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_id(::std::string&& value);
  #endif
  void set_obj_id(const char* value);
  void set_obj_id(const char* value, size_t size);
  ::std::string* mutable_obj_id();
  ::std::string* release_obj_id();
  void set_allocated_obj_id(::std::string* obj_id);

  // string desc = 3;
  void clear_desc();
  static const int kDescFieldNumber = 3;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // string feel = 4;
  void clear_feel();
  static const int kFeelFieldNumber = 4;
  const ::std::string& feel() const;
  void set_feel(const ::std::string& value);
  #if LANG_CXX11
  void set_feel(::std::string&& value);
  #endif
  void set_feel(const char* value);
  void set_feel(const char* value, size_t size);
  ::std::string* mutable_feel();
  ::std::string* release_feel();
  void set_allocated_feel(::std::string* feel);

  // .NetProto.Action.Status.AttrStatus.Attr attr = 2;
  void clear_attr();
  static const int kAttrFieldNumber = 2;
  ::NetProto::Action::Status::AttrStatus_Attr attr() const;
  void set_attr(::NetProto::Action::Status::AttrStatus_Attr value);

  // float feel_degree = 5;
  void clear_feel_degree();
  static const int kFeelDegreeFieldNumber = 5;
  float feel_degree() const;
  void set_feel_degree(float value);

  // @@protoc_insertion_point(class_scope:NetProto.Action.Status.AttrStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr obj_id_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr feel_;
  int attr_;
  float feel_degree_;
  mutable int _cached_size_;
  friend struct protobuf_natural_5faction_5fstatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmsComing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Action.Status.EmsComing) */ {
 public:
  EmsComing();
  virtual ~EmsComing();

  EmsComing(const EmsComing& from);

  inline EmsComing& operator=(const EmsComing& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmsComing& default_instance();

  static inline const EmsComing* internal_default_instance() {
    return reinterpret_cast<const EmsComing*>(
               &_EmsComing_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(EmsComing* other);

  // implements Message ----------------------------------------------

  inline EmsComing* New() const PROTOBUF_FINAL { return New(NULL); }

  EmsComing* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmsComing& from);
  void MergeFrom(const EmsComing& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmsComing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string obj_id = 1;
  void clear_obj_id();
  static const int kObjIdFieldNumber = 1;
  const ::std::string& obj_id() const;
  void set_obj_id(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_id(::std::string&& value);
  #endif
  void set_obj_id(const char* value);
  void set_obj_id(const char* value, size_t size);
  ::std::string* mutable_obj_id();
  ::std::string* release_obj_id();
  void set_allocated_obj_id(::std::string* obj_id);

  // string item_id = 2;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  const ::std::string& item_id() const;
  void set_item_id(const ::std::string& value);
  #if LANG_CXX11
  void set_item_id(::std::string&& value);
  #endif
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  ::std::string* mutable_item_id();
  ::std::string* release_item_id();
  void set_allocated_item_id(::std::string* item_id);

  // @@protoc_insertion_point(class_scope:NetProto.Action.Status.EmsComing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr obj_id_;
  ::google::protobuf::internal::ArenaStringPtr item_id_;
  mutable int _cached_size_;
  friend struct protobuf_natural_5faction_5fstatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NaturalActionStatusData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Action.Status.NaturalActionStatusData) */ {
 public:
  NaturalActionStatusData();
  virtual ~NaturalActionStatusData();

  NaturalActionStatusData(const NaturalActionStatusData& from);

  inline NaturalActionStatusData& operator=(const NaturalActionStatusData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NaturalActionStatusData& default_instance();

  static inline const NaturalActionStatusData* internal_default_instance() {
    return reinterpret_cast<const NaturalActionStatusData*>(
               &_NaturalActionStatusData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(NaturalActionStatusData* other);

  // implements Message ----------------------------------------------

  inline NaturalActionStatusData* New() const PROTOBUF_FINAL { return New(NULL); }

  NaturalActionStatusData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NaturalActionStatusData& from);
  void MergeFrom(const NaturalActionStatusData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NaturalActionStatusData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NetProto.ObjPosRelation pos_relation = 1;
  bool has_pos_relation() const;
  void clear_pos_relation();
  static const int kPosRelationFieldNumber = 1;
  const ::NetProto::ObjPosRelation& pos_relation() const;
  ::NetProto::ObjPosRelation* mutable_pos_relation();
  ::NetProto::ObjPosRelation* release_pos_relation();
  void set_allocated_pos_relation(::NetProto::ObjPosRelation* pos_relation);

  // .NetProto.Action.Status.OpenStatus open_status = 3;
  bool has_open_status() const;
  void clear_open_status();
  static const int kOpenStatusFieldNumber = 3;
  const ::NetProto::Action::Status::OpenStatus& open_status() const;
  ::NetProto::Action::Status::OpenStatus* mutable_open_status();
  ::NetProto::Action::Status::OpenStatus* release_open_status();
  void set_allocated_open_status(::NetProto::Action::Status::OpenStatus* open_status);

  // .NetProto.Action.Status.ActStatus act_status = 4;
  bool has_act_status() const;
  void clear_act_status();
  static const int kActStatusFieldNumber = 4;
  const ::NetProto::Action::Status::ActStatus& act_status() const;
  ::NetProto::Action::Status::ActStatus* mutable_act_status();
  ::NetProto::Action::Status::ActStatus* release_act_status();
  void set_allocated_act_status(::NetProto::Action::Status::ActStatus* act_status);

  // .NetProto.Action.Status.ContainerStatus container_status = 5;
  bool has_container_status() const;
  void clear_container_status();
  static const int kContainerStatusFieldNumber = 5;
  const ::NetProto::Action::Status::ContainerStatus& container_status() const;
  ::NetProto::Action::Status::ContainerStatus* mutable_container_status();
  ::NetProto::Action::Status::ContainerStatus* release_container_status();
  void set_allocated_container_status(::NetProto::Action::Status::ContainerStatus* container_status);

  // .NetProto.Action.Status.FillAttr fill_attr = 6;
  bool has_fill_attr() const;
  void clear_fill_attr();
  static const int kFillAttrFieldNumber = 6;
  const ::NetProto::Action::Status::FillAttr& fill_attr() const;
  ::NetProto::Action::Status::FillAttr* mutable_fill_attr();
  ::NetProto::Action::Status::FillAttr* release_fill_attr();
  void set_allocated_fill_attr(::NetProto::Action::Status::FillAttr* fill_attr);

  // .NetProto.Action.Status.BurnStatus burn_status = 7;
  bool has_burn_status() const;
  void clear_burn_status();
  static const int kBurnStatusFieldNumber = 7;
  const ::NetProto::Action::Status::BurnStatus& burn_status() const;
  ::NetProto::Action::Status::BurnStatus* mutable_burn_status();
  ::NetProto::Action::Status::BurnStatus* release_burn_status();
  void set_allocated_burn_status(::NetProto::Action::Status::BurnStatus* burn_status);

  // .NetProto.Action.Status.AllOpenStatus all_open_status = 8;
  bool has_all_open_status() const;
  void clear_all_open_status();
  static const int kAllOpenStatusFieldNumber = 8;
  const ::NetProto::Action::Status::AllOpenStatus& all_open_status() const;
  ::NetProto::Action::Status::AllOpenStatus* mutable_all_open_status();
  ::NetProto::Action::Status::AllOpenStatus* release_all_open_status();
  void set_allocated_all_open_status(::NetProto::Action::Status::AllOpenStatus* all_open_status);

  // .NetProto.Action.Status.AttrStatus attr_status = 9;
  bool has_attr_status() const;
  void clear_attr_status();
  static const int kAttrStatusFieldNumber = 9;
  const ::NetProto::Action::Status::AttrStatus& attr_status() const;
  ::NetProto::Action::Status::AttrStatus* mutable_attr_status();
  ::NetProto::Action::Status::AttrStatus* release_attr_status();
  void set_allocated_attr_status(::NetProto::Action::Status::AttrStatus* attr_status);

  // .NetProto.Action.Status.EmsComing ems_status = 20;
  bool has_ems_status() const;
  void clear_ems_status();
  static const int kEmsStatusFieldNumber = 20;
  const ::NetProto::Action::Status::EmsComing& ems_status() const;
  ::NetProto::Action::Status::EmsComing* mutable_ems_status();
  ::NetProto::Action::Status::EmsComing* release_ems_status();
  void set_allocated_ems_status(::NetProto::Action::Status::EmsComing* ems_status);

  // .NetProto.Action.Status.Pretend pretend_status = 21;
  bool has_pretend_status() const;
  void clear_pretend_status();
  static const int kPretendStatusFieldNumber = 21;
  const ::NetProto::Action::Status::Pretend& pretend_status() const;
  ::NetProto::Action::Status::Pretend* mutable_pretend_status();
  ::NetProto::Action::Status::Pretend* release_pretend_status();
  void set_allocated_pretend_status(::NetProto::Action::Status::Pretend* pretend_status);

  // @@protoc_insertion_point(class_scope:NetProto.Action.Status.NaturalActionStatusData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NetProto::ObjPosRelation* pos_relation_;
  ::NetProto::Action::Status::OpenStatus* open_status_;
  ::NetProto::Action::Status::ActStatus* act_status_;
  ::NetProto::Action::Status::ContainerStatus* container_status_;
  ::NetProto::Action::Status::FillAttr* fill_attr_;
  ::NetProto::Action::Status::BurnStatus* burn_status_;
  ::NetProto::Action::Status::AllOpenStatus* all_open_status_;
  ::NetProto::Action::Status::AttrStatus* attr_status_;
  ::NetProto::Action::Status::EmsComing* ems_status_;
  ::NetProto::Action::Status::Pretend* pretend_status_;
  mutable int _cached_size_;
  friend struct protobuf_natural_5faction_5fstatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NaturalActionStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Action.Status.NaturalActionStatus) */ {
 public:
  NaturalActionStatus();
  virtual ~NaturalActionStatus();

  NaturalActionStatus(const NaturalActionStatus& from);

  inline NaturalActionStatus& operator=(const NaturalActionStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NaturalActionStatus& default_instance();

  static inline const NaturalActionStatus* internal_default_instance() {
    return reinterpret_cast<const NaturalActionStatus*>(
               &_NaturalActionStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(NaturalActionStatus* other);

  // implements Message ----------------------------------------------

  inline NaturalActionStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  NaturalActionStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NaturalActionStatus& from);
  void MergeFrom(const NaturalActionStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NaturalActionStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NetProto.Action.Status.NaturalActionStatusData data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::NetProto::Action::Status::NaturalActionStatusData& data() const;
  ::NetProto::Action::Status::NaturalActionStatusData* mutable_data();
  ::NetProto::Action::Status::NaturalActionStatusData* release_data();
  void set_allocated_data(::NetProto::Action::Status::NaturalActionStatusData* data);

  // uint32 flag = 1;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  ::google::protobuf::uint32 flag() const;
  void set_flag(::google::protobuf::uint32 value);

  // .NetProto.Action.Status.NaturalActionStatusType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::NetProto::Action::Status::NaturalActionStatusType type() const;
  void set_type(::NetProto::Action::Status::NaturalActionStatusType value);

  // @@protoc_insertion_point(class_scope:NetProto.Action.Status.NaturalActionStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NetProto::Action::Status::NaturalActionStatusData* data_;
  ::google::protobuf::uint32 flag_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_natural_5faction_5fstatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyNaturalStatusChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.Action.Status.NotifyNaturalStatusChange) */ {
 public:
  NotifyNaturalStatusChange();
  virtual ~NotifyNaturalStatusChange();

  NotifyNaturalStatusChange(const NotifyNaturalStatusChange& from);

  inline NotifyNaturalStatusChange& operator=(const NotifyNaturalStatusChange& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyNaturalStatusChange& default_instance();

  static inline const NotifyNaturalStatusChange* internal_default_instance() {
    return reinterpret_cast<const NotifyNaturalStatusChange*>(
               &_NotifyNaturalStatusChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(NotifyNaturalStatusChange* other);

  // implements Message ----------------------------------------------

  inline NotifyNaturalStatusChange* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyNaturalStatusChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyNaturalStatusChange& from);
  void MergeFrom(const NotifyNaturalStatusChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyNaturalStatusChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NetProto.Action.Status.NaturalActionStatus statusArray = 2;
  int statusarray_size() const;
  void clear_statusarray();
  static const int kStatusArrayFieldNumber = 2;
  const ::NetProto::Action::Status::NaturalActionStatus& statusarray(int index) const;
  ::NetProto::Action::Status::NaturalActionStatus* mutable_statusarray(int index);
  ::NetProto::Action::Status::NaturalActionStatus* add_statusarray();
  ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >*
      mutable_statusarray();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >&
      statusarray() const;

  // string robot_id = 10;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 10;
  const ::std::string& robot_id() const;
  void set_robot_id(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_id(::std::string&& value);
  #endif
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  ::std::string* mutable_robot_id();
  ::std::string* release_robot_id();
  void set_allocated_robot_id(::std::string* robot_id);

  // uint32 scene_id = 1;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  ::google::protobuf::uint32 scene_id() const;
  void set_scene_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NetProto.Action.Status.NotifyNaturalStatusChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus > statusarray_;
  ::google::protobuf::internal::ArenaStringPtr robot_id_;
  ::google::protobuf::uint32 scene_id_;
  mutable int _cached_size_;
  friend struct protobuf_natural_5faction_5fstatus_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ActStatus

// string robot_id = 10;
inline void ActStatus::clear_robot_id() {
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActStatus::robot_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.ActStatus.robot_id)
  return robot_id_.GetNoArena();
}
inline void ActStatus::set_robot_id(const ::std::string& value) {
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.ActStatus.robot_id)
}
#if LANG_CXX11
inline void ActStatus::set_robot_id(::std::string&& value) {
  
  robot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.ActStatus.robot_id)
}
#endif
inline void ActStatus::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.ActStatus.robot_id)
}
inline void ActStatus::set_robot_id(const char* value, size_t size) {
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.ActStatus.robot_id)
}
inline ::std::string* ActStatus::mutable_robot_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.ActStatus.robot_id)
  return robot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActStatus::release_robot_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.ActStatus.robot_id)
  
  return robot_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActStatus::set_allocated_robot_id(::std::string* robot_id) {
  if (robot_id != NULL) {
    
  } else {
    
  }
  robot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.ActStatus.robot_id)
}

// .NetProto.RoleStatusEvent type = 20;
inline void ActStatus::clear_type() {
  type_ = 0;
}
inline ::NetProto::RoleStatusEvent ActStatus::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.ActStatus.type)
  return static_cast< ::NetProto::RoleStatusEvent >(type_);
}
inline void ActStatus::set_type(::NetProto::RoleStatusEvent value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.ActStatus.type)
}

// string obj_id = 30;
inline void ActStatus::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActStatus::obj_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.ActStatus.obj_id)
  return obj_id_.GetNoArena();
}
inline void ActStatus::set_obj_id(const ::std::string& value) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.ActStatus.obj_id)
}
#if LANG_CXX11
inline void ActStatus::set_obj_id(::std::string&& value) {
  
  obj_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.ActStatus.obj_id)
}
#endif
inline void ActStatus::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.ActStatus.obj_id)
}
inline void ActStatus::set_obj_id(const char* value, size_t size) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.ActStatus.obj_id)
}
inline ::std::string* ActStatus::mutable_obj_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.ActStatus.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActStatus::release_obj_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.ActStatus.obj_id)
  
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActStatus::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    
  } else {
    
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.ActStatus.obj_id)
}

// -------------------------------------------------------------------

// OpenStatus

// string obj_id = 10;
inline void OpenStatus::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenStatus::obj_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.OpenStatus.obj_id)
  return obj_id_.GetNoArena();
}
inline void OpenStatus::set_obj_id(const ::std::string& value) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.OpenStatus.obj_id)
}
#if LANG_CXX11
inline void OpenStatus::set_obj_id(::std::string&& value) {
  
  obj_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.OpenStatus.obj_id)
}
#endif
inline void OpenStatus::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.OpenStatus.obj_id)
}
inline void OpenStatus::set_obj_id(const char* value, size_t size) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.OpenStatus.obj_id)
}
inline ::std::string* OpenStatus::mutable_obj_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.OpenStatus.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenStatus::release_obj_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.OpenStatus.obj_id)
  
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenStatus::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    
  } else {
    
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.OpenStatus.obj_id)
}

// .NetProto.Action.Status.OpenStatusType type = 20;
inline void OpenStatus::clear_type() {
  type_ = 0;
}
inline ::NetProto::Action::Status::OpenStatusType OpenStatus::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.OpenStatus.type)
  return static_cast< ::NetProto::Action::Status::OpenStatusType >(type_);
}
inline void OpenStatus::set_type(::NetProto::Action::Status::OpenStatusType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.OpenStatus.type)
}

// string feel = 30;
inline void OpenStatus::clear_feel() {
  feel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenStatus::feel() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.OpenStatus.feel)
  return feel_.GetNoArena();
}
inline void OpenStatus::set_feel(const ::std::string& value) {
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.OpenStatus.feel)
}
#if LANG_CXX11
inline void OpenStatus::set_feel(::std::string&& value) {
  
  feel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.OpenStatus.feel)
}
#endif
inline void OpenStatus::set_feel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.OpenStatus.feel)
}
inline void OpenStatus::set_feel(const char* value, size_t size) {
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.OpenStatus.feel)
}
inline ::std::string* OpenStatus::mutable_feel() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.OpenStatus.feel)
  return feel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenStatus::release_feel() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.OpenStatus.feel)
  
  return feel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenStatus::set_allocated_feel(::std::string* feel) {
  if (feel != NULL) {
    
  } else {
    
  }
  feel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feel);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.OpenStatus.feel)
}

// -------------------------------------------------------------------

// ContainerStatus

// string container_id = 10;
inline void ContainerStatus::clear_container_id() {
  container_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContainerStatus::container_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.ContainerStatus.container_id)
  return container_id_.GetNoArena();
}
inline void ContainerStatus::set_container_id(const ::std::string& value) {
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.ContainerStatus.container_id)
}
#if LANG_CXX11
inline void ContainerStatus::set_container_id(::std::string&& value) {
  
  container_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.ContainerStatus.container_id)
}
#endif
inline void ContainerStatus::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.ContainerStatus.container_id)
}
inline void ContainerStatus::set_container_id(const char* value, size_t size) {
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.ContainerStatus.container_id)
}
inline ::std::string* ContainerStatus::mutable_container_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.ContainerStatus.container_id)
  return container_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerStatus::release_container_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.ContainerStatus.container_id)
  
  return container_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerStatus::set_allocated_container_id(::std::string* container_id) {
  if (container_id != NULL) {
    
  } else {
    
  }
  container_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.ContainerStatus.container_id)
}

// uint32 type = 20;
inline void ContainerStatus::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 ContainerStatus::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.ContainerStatus.type)
  return type_;
}
inline void ContainerStatus::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.ContainerStatus.type)
}

// -------------------------------------------------------------------

// FillAttr

// string container_id = 10;
inline void FillAttr::clear_container_id() {
  container_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FillAttr::container_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.FillAttr.container_id)
  return container_id_.GetNoArena();
}
inline void FillAttr::set_container_id(const ::std::string& value) {
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.FillAttr.container_id)
}
#if LANG_CXX11
inline void FillAttr::set_container_id(::std::string&& value) {
  
  container_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.FillAttr.container_id)
}
#endif
inline void FillAttr::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.FillAttr.container_id)
}
inline void FillAttr::set_container_id(const char* value, size_t size) {
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.FillAttr.container_id)
}
inline ::std::string* FillAttr::mutable_container_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.FillAttr.container_id)
  return container_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FillAttr::release_container_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.FillAttr.container_id)
  
  return container_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FillAttr::set_allocated_container_id(::std::string* container_id) {
  if (container_id != NULL) {
    
  } else {
    
  }
  container_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.FillAttr.container_id)
}

// string obj_id = 20;
inline void FillAttr::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FillAttr::obj_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.FillAttr.obj_id)
  return obj_id_.GetNoArena();
}
inline void FillAttr::set_obj_id(const ::std::string& value) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.FillAttr.obj_id)
}
#if LANG_CXX11
inline void FillAttr::set_obj_id(::std::string&& value) {
  
  obj_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.FillAttr.obj_id)
}
#endif
inline void FillAttr::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.FillAttr.obj_id)
}
inline void FillAttr::set_obj_id(const char* value, size_t size) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.FillAttr.obj_id)
}
inline ::std::string* FillAttr::mutable_obj_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.FillAttr.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FillAttr::release_obj_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.FillAttr.obj_id)
  
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FillAttr::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    
  } else {
    
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.FillAttr.obj_id)
}

// .NetProto.Action.Status.FillAttrType type = 30;
inline void FillAttr::clear_type() {
  type_ = 0;
}
inline ::NetProto::Action::Status::FillAttrType FillAttr::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.FillAttr.type)
  return static_cast< ::NetProto::Action::Status::FillAttrType >(type_);
}
inline void FillAttr::set_type(::NetProto::Action::Status::FillAttrType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.FillAttr.type)
}

// -------------------------------------------------------------------

// BurnStatus

// string obj_id = 10;
inline void BurnStatus::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BurnStatus::obj_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.BurnStatus.obj_id)
  return obj_id_.GetNoArena();
}
inline void BurnStatus::set_obj_id(const ::std::string& value) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.BurnStatus.obj_id)
}
#if LANG_CXX11
inline void BurnStatus::set_obj_id(::std::string&& value) {
  
  obj_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.BurnStatus.obj_id)
}
#endif
inline void BurnStatus::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.BurnStatus.obj_id)
}
inline void BurnStatus::set_obj_id(const char* value, size_t size) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.BurnStatus.obj_id)
}
inline ::std::string* BurnStatus::mutable_obj_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.BurnStatus.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BurnStatus::release_obj_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.BurnStatus.obj_id)
  
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BurnStatus::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    
  } else {
    
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.BurnStatus.obj_id)
}

// .NetProto.Action.Status.BurnStatusType type = 20;
inline void BurnStatus::clear_type() {
  type_ = 0;
}
inline ::NetProto::Action::Status::BurnStatusType BurnStatus::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.BurnStatus.type)
  return static_cast< ::NetProto::Action::Status::BurnStatusType >(type_);
}
inline void BurnStatus::set_type(::NetProto::Action::Status::BurnStatusType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.BurnStatus.type)
}

// -------------------------------------------------------------------

// AllOpenStatus

// string room_id = 10;
inline void AllOpenStatus::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllOpenStatus::room_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AllOpenStatus.room_id)
  return room_id_.GetNoArena();
}
inline void AllOpenStatus::set_room_id(const ::std::string& value) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AllOpenStatus.room_id)
}
#if LANG_CXX11
inline void AllOpenStatus::set_room_id(::std::string&& value) {
  
  room_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.AllOpenStatus.room_id)
}
#endif
inline void AllOpenStatus::set_room_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.AllOpenStatus.room_id)
}
inline void AllOpenStatus::set_room_id(const char* value, size_t size) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.AllOpenStatus.room_id)
}
inline ::std::string* AllOpenStatus::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.AllOpenStatus.room_id)
  return room_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllOpenStatus::release_room_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.AllOpenStatus.room_id)
  
  return room_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllOpenStatus::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.AllOpenStatus.room_id)
}

// string abstract_id = 20;
inline void AllOpenStatus::clear_abstract_id() {
  abstract_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllOpenStatus::abstract_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AllOpenStatus.abstract_id)
  return abstract_id_.GetNoArena();
}
inline void AllOpenStatus::set_abstract_id(const ::std::string& value) {
  
  abstract_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AllOpenStatus.abstract_id)
}
#if LANG_CXX11
inline void AllOpenStatus::set_abstract_id(::std::string&& value) {
  
  abstract_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.AllOpenStatus.abstract_id)
}
#endif
inline void AllOpenStatus::set_abstract_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  abstract_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.AllOpenStatus.abstract_id)
}
inline void AllOpenStatus::set_abstract_id(const char* value, size_t size) {
  
  abstract_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.AllOpenStatus.abstract_id)
}
inline ::std::string* AllOpenStatus::mutable_abstract_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.AllOpenStatus.abstract_id)
  return abstract_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllOpenStatus::release_abstract_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.AllOpenStatus.abstract_id)
  
  return abstract_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllOpenStatus::set_allocated_abstract_id(::std::string* abstract_id) {
  if (abstract_id != NULL) {
    
  } else {
    
  }
  abstract_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), abstract_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.AllOpenStatus.abstract_id)
}

// .NetProto.Action.Status.OpenStatusType type = 30;
inline void AllOpenStatus::clear_type() {
  type_ = 0;
}
inline ::NetProto::Action::Status::OpenStatusType AllOpenStatus::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AllOpenStatus.type)
  return static_cast< ::NetProto::Action::Status::OpenStatusType >(type_);
}
inline void AllOpenStatus::set_type(::NetProto::Action::Status::OpenStatusType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AllOpenStatus.type)
}

// -------------------------------------------------------------------

// AttrStatus

// string obj_id = 1;
inline void AttrStatus::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttrStatus::obj_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AttrStatus.obj_id)
  return obj_id_.GetNoArena();
}
inline void AttrStatus::set_obj_id(const ::std::string& value) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AttrStatus.obj_id)
}
#if LANG_CXX11
inline void AttrStatus::set_obj_id(::std::string&& value) {
  
  obj_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.AttrStatus.obj_id)
}
#endif
inline void AttrStatus::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.AttrStatus.obj_id)
}
inline void AttrStatus::set_obj_id(const char* value, size_t size) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.AttrStatus.obj_id)
}
inline ::std::string* AttrStatus::mutable_obj_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.AttrStatus.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttrStatus::release_obj_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.AttrStatus.obj_id)
  
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttrStatus::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    
  } else {
    
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.AttrStatus.obj_id)
}

// .NetProto.Action.Status.AttrStatus.Attr attr = 2;
inline void AttrStatus::clear_attr() {
  attr_ = 0;
}
inline ::NetProto::Action::Status::AttrStatus_Attr AttrStatus::attr() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AttrStatus.attr)
  return static_cast< ::NetProto::Action::Status::AttrStatus_Attr >(attr_);
}
inline void AttrStatus::set_attr(::NetProto::Action::Status::AttrStatus_Attr value) {
  
  attr_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AttrStatus.attr)
}

// string desc = 3;
inline void AttrStatus::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttrStatus::desc() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AttrStatus.desc)
  return desc_.GetNoArena();
}
inline void AttrStatus::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AttrStatus.desc)
}
#if LANG_CXX11
inline void AttrStatus::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.AttrStatus.desc)
}
#endif
inline void AttrStatus::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.AttrStatus.desc)
}
inline void AttrStatus::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.AttrStatus.desc)
}
inline ::std::string* AttrStatus::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.AttrStatus.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttrStatus::release_desc() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.AttrStatus.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttrStatus::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.AttrStatus.desc)
}

// string feel = 4;
inline void AttrStatus::clear_feel() {
  feel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttrStatus::feel() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AttrStatus.feel)
  return feel_.GetNoArena();
}
inline void AttrStatus::set_feel(const ::std::string& value) {
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AttrStatus.feel)
}
#if LANG_CXX11
inline void AttrStatus::set_feel(::std::string&& value) {
  
  feel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.AttrStatus.feel)
}
#endif
inline void AttrStatus::set_feel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.AttrStatus.feel)
}
inline void AttrStatus::set_feel(const char* value, size_t size) {
  
  feel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.AttrStatus.feel)
}
inline ::std::string* AttrStatus::mutable_feel() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.AttrStatus.feel)
  return feel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttrStatus::release_feel() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.AttrStatus.feel)
  
  return feel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttrStatus::set_allocated_feel(::std::string* feel) {
  if (feel != NULL) {
    
  } else {
    
  }
  feel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feel);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.AttrStatus.feel)
}

// float feel_degree = 5;
inline void AttrStatus::clear_feel_degree() {
  feel_degree_ = 0;
}
inline float AttrStatus::feel_degree() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.AttrStatus.feel_degree)
  return feel_degree_;
}
inline void AttrStatus::set_feel_degree(float value) {
  
  feel_degree_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.AttrStatus.feel_degree)
}

// -------------------------------------------------------------------

// EmsComing

// string obj_id = 1;
inline void EmsComing::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmsComing::obj_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.EmsComing.obj_id)
  return obj_id_.GetNoArena();
}
inline void EmsComing::set_obj_id(const ::std::string& value) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.EmsComing.obj_id)
}
#if LANG_CXX11
inline void EmsComing::set_obj_id(::std::string&& value) {
  
  obj_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.EmsComing.obj_id)
}
#endif
inline void EmsComing::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.EmsComing.obj_id)
}
inline void EmsComing::set_obj_id(const char* value, size_t size) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.EmsComing.obj_id)
}
inline ::std::string* EmsComing::mutable_obj_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.EmsComing.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmsComing::release_obj_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.EmsComing.obj_id)
  
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmsComing::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    
  } else {
    
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.EmsComing.obj_id)
}

// string item_id = 2;
inline void EmsComing::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmsComing::item_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.EmsComing.item_id)
  return item_id_.GetNoArena();
}
inline void EmsComing::set_item_id(const ::std::string& value) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.EmsComing.item_id)
}
#if LANG_CXX11
inline void EmsComing::set_item_id(::std::string&& value) {
  
  item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.EmsComing.item_id)
}
#endif
inline void EmsComing::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.EmsComing.item_id)
}
inline void EmsComing::set_item_id(const char* value, size_t size) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.EmsComing.item_id)
}
inline ::std::string* EmsComing::mutable_item_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.EmsComing.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmsComing::release_item_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.EmsComing.item_id)
  
  return item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmsComing::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.EmsComing.item_id)
}

// -------------------------------------------------------------------

// NaturalActionStatusData

// .NetProto.ObjPosRelation pos_relation = 1;
inline bool NaturalActionStatusData::has_pos_relation() const {
  return this != internal_default_instance() && pos_relation_ != NULL;
}
inline void NaturalActionStatusData::clear_pos_relation() {
  if (GetArenaNoVirtual() == NULL && pos_relation_ != NULL) delete pos_relation_;
  pos_relation_ = NULL;
}
inline const ::NetProto::ObjPosRelation& NaturalActionStatusData::pos_relation() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.pos_relation)
  return pos_relation_ != NULL ? *pos_relation_
                         : *::NetProto::ObjPosRelation::internal_default_instance();
}
inline ::NetProto::ObjPosRelation* NaturalActionStatusData::mutable_pos_relation() {
  
  if (pos_relation_ == NULL) {
    pos_relation_ = new ::NetProto::ObjPosRelation;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.pos_relation)
  return pos_relation_;
}
inline ::NetProto::ObjPosRelation* NaturalActionStatusData::release_pos_relation() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.pos_relation)
  
  ::NetProto::ObjPosRelation* temp = pos_relation_;
  pos_relation_ = NULL;
  return temp;
}
inline void NaturalActionStatusData::set_allocated_pos_relation(::NetProto::ObjPosRelation* pos_relation) {
  delete pos_relation_;
  pos_relation_ = pos_relation;
  if (pos_relation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.pos_relation)
}

// .NetProto.Action.Status.OpenStatus open_status = 3;
inline bool NaturalActionStatusData::has_open_status() const {
  return this != internal_default_instance() && open_status_ != NULL;
}
inline void NaturalActionStatusData::clear_open_status() {
  if (GetArenaNoVirtual() == NULL && open_status_ != NULL) delete open_status_;
  open_status_ = NULL;
}
inline const ::NetProto::Action::Status::OpenStatus& NaturalActionStatusData::open_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.open_status)
  return open_status_ != NULL ? *open_status_
                         : *::NetProto::Action::Status::OpenStatus::internal_default_instance();
}
inline ::NetProto::Action::Status::OpenStatus* NaturalActionStatusData::mutable_open_status() {
  
  if (open_status_ == NULL) {
    open_status_ = new ::NetProto::Action::Status::OpenStatus;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.open_status)
  return open_status_;
}
inline ::NetProto::Action::Status::OpenStatus* NaturalActionStatusData::release_open_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.open_status)
  
  ::NetProto::Action::Status::OpenStatus* temp = open_status_;
  open_status_ = NULL;
  return temp;
}
inline void NaturalActionStatusData::set_allocated_open_status(::NetProto::Action::Status::OpenStatus* open_status) {
  delete open_status_;
  open_status_ = open_status;
  if (open_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.open_status)
}

// .NetProto.Action.Status.ActStatus act_status = 4;
inline bool NaturalActionStatusData::has_act_status() const {
  return this != internal_default_instance() && act_status_ != NULL;
}
inline void NaturalActionStatusData::clear_act_status() {
  if (GetArenaNoVirtual() == NULL && act_status_ != NULL) delete act_status_;
  act_status_ = NULL;
}
inline const ::NetProto::Action::Status::ActStatus& NaturalActionStatusData::act_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.act_status)
  return act_status_ != NULL ? *act_status_
                         : *::NetProto::Action::Status::ActStatus::internal_default_instance();
}
inline ::NetProto::Action::Status::ActStatus* NaturalActionStatusData::mutable_act_status() {
  
  if (act_status_ == NULL) {
    act_status_ = new ::NetProto::Action::Status::ActStatus;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.act_status)
  return act_status_;
}
inline ::NetProto::Action::Status::ActStatus* NaturalActionStatusData::release_act_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.act_status)
  
  ::NetProto::Action::Status::ActStatus* temp = act_status_;
  act_status_ = NULL;
  return temp;
}
inline void NaturalActionStatusData::set_allocated_act_status(::NetProto::Action::Status::ActStatus* act_status) {
  delete act_status_;
  act_status_ = act_status;
  if (act_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.act_status)
}

// .NetProto.Action.Status.ContainerStatus container_status = 5;
inline bool NaturalActionStatusData::has_container_status() const {
  return this != internal_default_instance() && container_status_ != NULL;
}
inline void NaturalActionStatusData::clear_container_status() {
  if (GetArenaNoVirtual() == NULL && container_status_ != NULL) delete container_status_;
  container_status_ = NULL;
}
inline const ::NetProto::Action::Status::ContainerStatus& NaturalActionStatusData::container_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.container_status)
  return container_status_ != NULL ? *container_status_
                         : *::NetProto::Action::Status::ContainerStatus::internal_default_instance();
}
inline ::NetProto::Action::Status::ContainerStatus* NaturalActionStatusData::mutable_container_status() {
  
  if (container_status_ == NULL) {
    container_status_ = new ::NetProto::Action::Status::ContainerStatus;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.container_status)
  return container_status_;
}
inline ::NetProto::Action::Status::ContainerStatus* NaturalActionStatusData::release_container_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.container_status)
  
  ::NetProto::Action::Status::ContainerStatus* temp = container_status_;
  container_status_ = NULL;
  return temp;
}
inline void NaturalActionStatusData::set_allocated_container_status(::NetProto::Action::Status::ContainerStatus* container_status) {
  delete container_status_;
  container_status_ = container_status;
  if (container_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.container_status)
}

// .NetProto.Action.Status.FillAttr fill_attr = 6;
inline bool NaturalActionStatusData::has_fill_attr() const {
  return this != internal_default_instance() && fill_attr_ != NULL;
}
inline void NaturalActionStatusData::clear_fill_attr() {
  if (GetArenaNoVirtual() == NULL && fill_attr_ != NULL) delete fill_attr_;
  fill_attr_ = NULL;
}
inline const ::NetProto::Action::Status::FillAttr& NaturalActionStatusData::fill_attr() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.fill_attr)
  return fill_attr_ != NULL ? *fill_attr_
                         : *::NetProto::Action::Status::FillAttr::internal_default_instance();
}
inline ::NetProto::Action::Status::FillAttr* NaturalActionStatusData::mutable_fill_attr() {
  
  if (fill_attr_ == NULL) {
    fill_attr_ = new ::NetProto::Action::Status::FillAttr;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.fill_attr)
  return fill_attr_;
}
inline ::NetProto::Action::Status::FillAttr* NaturalActionStatusData::release_fill_attr() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.fill_attr)
  
  ::NetProto::Action::Status::FillAttr* temp = fill_attr_;
  fill_attr_ = NULL;
  return temp;
}
inline void NaturalActionStatusData::set_allocated_fill_attr(::NetProto::Action::Status::FillAttr* fill_attr) {
  delete fill_attr_;
  fill_attr_ = fill_attr;
  if (fill_attr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.fill_attr)
}

// .NetProto.Action.Status.BurnStatus burn_status = 7;
inline bool NaturalActionStatusData::has_burn_status() const {
  return this != internal_default_instance() && burn_status_ != NULL;
}
inline void NaturalActionStatusData::clear_burn_status() {
  if (GetArenaNoVirtual() == NULL && burn_status_ != NULL) delete burn_status_;
  burn_status_ = NULL;
}
inline const ::NetProto::Action::Status::BurnStatus& NaturalActionStatusData::burn_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.burn_status)
  return burn_status_ != NULL ? *burn_status_
                         : *::NetProto::Action::Status::BurnStatus::internal_default_instance();
}
inline ::NetProto::Action::Status::BurnStatus* NaturalActionStatusData::mutable_burn_status() {
  
  if (burn_status_ == NULL) {
    burn_status_ = new ::NetProto::Action::Status::BurnStatus;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.burn_status)
  return burn_status_;
}
inline ::NetProto::Action::Status::BurnStatus* NaturalActionStatusData::release_burn_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.burn_status)
  
  ::NetProto::Action::Status::BurnStatus* temp = burn_status_;
  burn_status_ = NULL;
  return temp;
}
inline void NaturalActionStatusData::set_allocated_burn_status(::NetProto::Action::Status::BurnStatus* burn_status) {
  delete burn_status_;
  burn_status_ = burn_status;
  if (burn_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.burn_status)
}

// .NetProto.Action.Status.AllOpenStatus all_open_status = 8;
inline bool NaturalActionStatusData::has_all_open_status() const {
  return this != internal_default_instance() && all_open_status_ != NULL;
}
inline void NaturalActionStatusData::clear_all_open_status() {
  if (GetArenaNoVirtual() == NULL && all_open_status_ != NULL) delete all_open_status_;
  all_open_status_ = NULL;
}
inline const ::NetProto::Action::Status::AllOpenStatus& NaturalActionStatusData::all_open_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.all_open_status)
  return all_open_status_ != NULL ? *all_open_status_
                         : *::NetProto::Action::Status::AllOpenStatus::internal_default_instance();
}
inline ::NetProto::Action::Status::AllOpenStatus* NaturalActionStatusData::mutable_all_open_status() {
  
  if (all_open_status_ == NULL) {
    all_open_status_ = new ::NetProto::Action::Status::AllOpenStatus;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.all_open_status)
  return all_open_status_;
}
inline ::NetProto::Action::Status::AllOpenStatus* NaturalActionStatusData::release_all_open_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.all_open_status)
  
  ::NetProto::Action::Status::AllOpenStatus* temp = all_open_status_;
  all_open_status_ = NULL;
  return temp;
}
inline void NaturalActionStatusData::set_allocated_all_open_status(::NetProto::Action::Status::AllOpenStatus* all_open_status) {
  delete all_open_status_;
  all_open_status_ = all_open_status;
  if (all_open_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.all_open_status)
}

// .NetProto.Action.Status.AttrStatus attr_status = 9;
inline bool NaturalActionStatusData::has_attr_status() const {
  return this != internal_default_instance() && attr_status_ != NULL;
}
inline void NaturalActionStatusData::clear_attr_status() {
  if (GetArenaNoVirtual() == NULL && attr_status_ != NULL) delete attr_status_;
  attr_status_ = NULL;
}
inline const ::NetProto::Action::Status::AttrStatus& NaturalActionStatusData::attr_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.attr_status)
  return attr_status_ != NULL ? *attr_status_
                         : *::NetProto::Action::Status::AttrStatus::internal_default_instance();
}
inline ::NetProto::Action::Status::AttrStatus* NaturalActionStatusData::mutable_attr_status() {
  
  if (attr_status_ == NULL) {
    attr_status_ = new ::NetProto::Action::Status::AttrStatus;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.attr_status)
  return attr_status_;
}
inline ::NetProto::Action::Status::AttrStatus* NaturalActionStatusData::release_attr_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.attr_status)
  
  ::NetProto::Action::Status::AttrStatus* temp = attr_status_;
  attr_status_ = NULL;
  return temp;
}
inline void NaturalActionStatusData::set_allocated_attr_status(::NetProto::Action::Status::AttrStatus* attr_status) {
  delete attr_status_;
  attr_status_ = attr_status;
  if (attr_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.attr_status)
}

// .NetProto.Action.Status.EmsComing ems_status = 20;
inline bool NaturalActionStatusData::has_ems_status() const {
  return this != internal_default_instance() && ems_status_ != NULL;
}
inline void NaturalActionStatusData::clear_ems_status() {
  if (GetArenaNoVirtual() == NULL && ems_status_ != NULL) delete ems_status_;
  ems_status_ = NULL;
}
inline const ::NetProto::Action::Status::EmsComing& NaturalActionStatusData::ems_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.ems_status)
  return ems_status_ != NULL ? *ems_status_
                         : *::NetProto::Action::Status::EmsComing::internal_default_instance();
}
inline ::NetProto::Action::Status::EmsComing* NaturalActionStatusData::mutable_ems_status() {
  
  if (ems_status_ == NULL) {
    ems_status_ = new ::NetProto::Action::Status::EmsComing;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.ems_status)
  return ems_status_;
}
inline ::NetProto::Action::Status::EmsComing* NaturalActionStatusData::release_ems_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.ems_status)
  
  ::NetProto::Action::Status::EmsComing* temp = ems_status_;
  ems_status_ = NULL;
  return temp;
}
inline void NaturalActionStatusData::set_allocated_ems_status(::NetProto::Action::Status::EmsComing* ems_status) {
  delete ems_status_;
  ems_status_ = ems_status;
  if (ems_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.ems_status)
}

// .NetProto.Action.Status.Pretend pretend_status = 21;
inline bool NaturalActionStatusData::has_pretend_status() const {
  return this != internal_default_instance() && pretend_status_ != NULL;
}
inline void NaturalActionStatusData::clear_pretend_status() {
  if (GetArenaNoVirtual() == NULL && pretend_status_ != NULL) delete pretend_status_;
  pretend_status_ = NULL;
}
inline const ::NetProto::Action::Status::Pretend& NaturalActionStatusData::pretend_status() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatusData.pretend_status)
  return pretend_status_ != NULL ? *pretend_status_
                         : *::NetProto::Action::Status::Pretend::internal_default_instance();
}
inline ::NetProto::Action::Status::Pretend* NaturalActionStatusData::mutable_pretend_status() {
  
  if (pretend_status_ == NULL) {
    pretend_status_ = new ::NetProto::Action::Status::Pretend;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatusData.pretend_status)
  return pretend_status_;
}
inline ::NetProto::Action::Status::Pretend* NaturalActionStatusData::release_pretend_status() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatusData.pretend_status)
  
  ::NetProto::Action::Status::Pretend* temp = pretend_status_;
  pretend_status_ = NULL;
  return temp;
}
inline void NaturalActionStatusData::set_allocated_pretend_status(::NetProto::Action::Status::Pretend* pretend_status) {
  delete pretend_status_;
  pretend_status_ = pretend_status;
  if (pretend_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatusData.pretend_status)
}

// -------------------------------------------------------------------

// NaturalActionStatus

// uint32 flag = 1;
inline void NaturalActionStatus::clear_flag() {
  flag_ = 0u;
}
inline ::google::protobuf::uint32 NaturalActionStatus::flag() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatus.flag)
  return flag_;
}
inline void NaturalActionStatus::set_flag(::google::protobuf::uint32 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.NaturalActionStatus.flag)
}

// .NetProto.Action.Status.NaturalActionStatusType type = 2;
inline void NaturalActionStatus::clear_type() {
  type_ = 0;
}
inline ::NetProto::Action::Status::NaturalActionStatusType NaturalActionStatus::type() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatus.type)
  return static_cast< ::NetProto::Action::Status::NaturalActionStatusType >(type_);
}
inline void NaturalActionStatus::set_type(::NetProto::Action::Status::NaturalActionStatusType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.NaturalActionStatus.type)
}

// .NetProto.Action.Status.NaturalActionStatusData data = 3;
inline bool NaturalActionStatus::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void NaturalActionStatus::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::NetProto::Action::Status::NaturalActionStatusData& NaturalActionStatus::data() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NaturalActionStatus.data)
  return data_ != NULL ? *data_
                         : *::NetProto::Action::Status::NaturalActionStatusData::internal_default_instance();
}
inline ::NetProto::Action::Status::NaturalActionStatusData* NaturalActionStatus::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::NetProto::Action::Status::NaturalActionStatusData;
  }
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NaturalActionStatus.data)
  return data_;
}
inline ::NetProto::Action::Status::NaturalActionStatusData* NaturalActionStatus::release_data() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NaturalActionStatus.data)
  
  ::NetProto::Action::Status::NaturalActionStatusData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void NaturalActionStatus::set_allocated_data(::NetProto::Action::Status::NaturalActionStatusData* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NaturalActionStatus.data)
}

// -------------------------------------------------------------------

// NotifyNaturalStatusChange

// string robot_id = 10;
inline void NotifyNaturalStatusChange::clear_robot_id() {
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotifyNaturalStatusChange::robot_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
  return robot_id_.GetNoArena();
}
inline void NotifyNaturalStatusChange::set_robot_id(const ::std::string& value) {
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
}
#if LANG_CXX11
inline void NotifyNaturalStatusChange::set_robot_id(::std::string&& value) {
  
  robot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
}
#endif
inline void NotifyNaturalStatusChange::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
}
inline void NotifyNaturalStatusChange::set_robot_id(const char* value, size_t size) {
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
}
inline ::std::string* NotifyNaturalStatusChange::mutable_robot_id() {
  
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
  return robot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyNaturalStatusChange::release_robot_id() {
  // @@protoc_insertion_point(field_release:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
  
  return robot_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyNaturalStatusChange::set_allocated_robot_id(::std::string* robot_id) {
  if (robot_id != NULL) {
    
  } else {
    
  }
  robot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_id);
  // @@protoc_insertion_point(field_set_allocated:NetProto.Action.Status.NotifyNaturalStatusChange.robot_id)
}

// uint32 scene_id = 1;
inline void NotifyNaturalStatusChange::clear_scene_id() {
  scene_id_ = 0u;
}
inline ::google::protobuf::uint32 NotifyNaturalStatusChange::scene_id() const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NotifyNaturalStatusChange.scene_id)
  return scene_id_;
}
inline void NotifyNaturalStatusChange::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.Action.Status.NotifyNaturalStatusChange.scene_id)
}

// repeated .NetProto.Action.Status.NaturalActionStatus statusArray = 2;
inline int NotifyNaturalStatusChange::statusarray_size() const {
  return statusarray_.size();
}
inline void NotifyNaturalStatusChange::clear_statusarray() {
  statusarray_.Clear();
}
inline const ::NetProto::Action::Status::NaturalActionStatus& NotifyNaturalStatusChange::statusarray(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.Action.Status.NotifyNaturalStatusChange.statusArray)
  return statusarray_.Get(index);
}
inline ::NetProto::Action::Status::NaturalActionStatus* NotifyNaturalStatusChange::mutable_statusarray(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.Action.Status.NotifyNaturalStatusChange.statusArray)
  return statusarray_.Mutable(index);
}
inline ::NetProto::Action::Status::NaturalActionStatus* NotifyNaturalStatusChange::add_statusarray() {
  // @@protoc_insertion_point(field_add:NetProto.Action.Status.NotifyNaturalStatusChange.statusArray)
  return statusarray_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >*
NotifyNaturalStatusChange::mutable_statusarray() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.Action.Status.NotifyNaturalStatusChange.statusArray)
  return &statusarray_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::Action::Status::NaturalActionStatus >&
NotifyNaturalStatusChange::statusarray() const {
  // @@protoc_insertion_point(field_list:NetProto.Action.Status.NotifyNaturalStatusChange.statusArray)
  return statusarray_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Status
}  // namespace Action
}  // namespace NetProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NetProto::Action::Status::AttrStatus_Attr> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::Action::Status::AttrStatus_Attr>() {
  return ::NetProto::Action::Status::AttrStatus_Attr_descriptor();
}
template <> struct is_proto_enum< ::NetProto::Action::Status::OpenStatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::Action::Status::OpenStatusType>() {
  return ::NetProto::Action::Status::OpenStatusType_descriptor();
}
template <> struct is_proto_enum< ::NetProto::Action::Status::ContainerStatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::Action::Status::ContainerStatusType>() {
  return ::NetProto::Action::Status::ContainerStatusType_descriptor();
}
template <> struct is_proto_enum< ::NetProto::Action::Status::FillAttrType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::Action::Status::FillAttrType>() {
  return ::NetProto::Action::Status::FillAttrType_descriptor();
}
template <> struct is_proto_enum< ::NetProto::Action::Status::BurnStatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::Action::Status::BurnStatusType>() {
  return ::NetProto::Action::Status::BurnStatusType_descriptor();
}
template <> struct is_proto_enum< ::NetProto::Action::Status::NaturalActionStatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::Action::Status::NaturalActionStatusType>() {
  return ::NetProto::Action::Status::NaturalActionStatusType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_natural_5faction_5fstatus_2eproto__INCLUDED
